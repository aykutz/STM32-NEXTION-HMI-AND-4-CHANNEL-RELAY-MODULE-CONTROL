
nextionANDrelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008550  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080086d8  080086d8  000186d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086f4  080086f4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080086f4  080086f4  000186f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086fc  080086fc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086fc  080086fc  000186fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008700  08008700  00018700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          000009bc  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a38  20000a38  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018f86  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003a1a  00000000  00000000  00039075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001330  00000000  00000000  0003ca90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000011e0  00000000  00000000  0003ddc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023920  00000000  00000000  0003efa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001aa19  00000000  00000000  000628c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd5b8  00000000  00000000  0007d2d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005398  00000000  00000000  0014a894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080086c0 	.word	0x080086c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	080086c0 	.word	0x080086c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <ReadData>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ReadData()
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart2, (uint8_t*)rxBuffer,50,100);
 80004ca:	2364      	movs	r3, #100	; 0x64
 80004cc:	2232      	movs	r2, #50	; 0x32
 80004ce:	495f      	ldr	r1, [pc, #380]	; (800064c <ReadData+0x188>)
 80004d0:	485f      	ldr	r0, [pc, #380]	; (8000650 <ReadData+0x18c>)
 80004d2:	f004 f947 	bl	8004764 <HAL_UART_Receive>


    if(rxBuffer[0]==0x65 && rxBuffer[1]==0x00 && rxBuffer[2]==0x02 && rxBuffer[3]==0x01 && rxBuffer[4]==0xFF
 80004d6:	4b5d      	ldr	r3, [pc, #372]	; (800064c <ReadData+0x188>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b65      	cmp	r3, #101	; 0x65
 80004dc:	d125      	bne.n	800052a <ReadData+0x66>
 80004de:	4b5b      	ldr	r3, [pc, #364]	; (800064c <ReadData+0x188>)
 80004e0:	785b      	ldrb	r3, [r3, #1]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d121      	bne.n	800052a <ReadData+0x66>
 80004e6:	4b59      	ldr	r3, [pc, #356]	; (800064c <ReadData+0x188>)
 80004e8:	789b      	ldrb	r3, [r3, #2]
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	d11d      	bne.n	800052a <ReadData+0x66>
 80004ee:	4b57      	ldr	r3, [pc, #348]	; (800064c <ReadData+0x188>)
 80004f0:	78db      	ldrb	r3, [r3, #3]
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d119      	bne.n	800052a <ReadData+0x66>
 80004f6:	4b55      	ldr	r3, [pc, #340]	; (800064c <ReadData+0x188>)
 80004f8:	791b      	ldrb	r3, [r3, #4]
 80004fa:	2bff      	cmp	r3, #255	; 0xff
 80004fc:	d115      	bne.n	800052a <ReadData+0x66>
    	&& rxBuffer[5]==0xFF && rxBuffer[6]==0xFF)
 80004fe:	4b53      	ldr	r3, [pc, #332]	; (800064c <ReadData+0x188>)
 8000500:	795b      	ldrb	r3, [r3, #5]
 8000502:	2bff      	cmp	r3, #255	; 0xff
 8000504:	d111      	bne.n	800052a <ReadData+0x66>
 8000506:	4b51      	ldr	r3, [pc, #324]	; (800064c <ReadData+0x188>)
 8000508:	799b      	ldrb	r3, [r3, #6]
 800050a:	2bff      	cmp	r3, #255	; 0xff
 800050c:	d10d      	bne.n	800052a <ReadData+0x66>
    {
    	counter++;
 800050e:	4b51      	ldr	r3, [pc, #324]	; (8000654 <ReadData+0x190>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	3301      	adds	r3, #1
 8000514:	4a4f      	ldr	r2, [pc, #316]	; (8000654 <ReadData+0x190>)
 8000516:	6013      	str	r3, [r2, #0]
    	HAL_GPIO_TogglePin(GPIOD, relay1_Pin);
 8000518:	2102      	movs	r1, #2
 800051a:	484f      	ldr	r0, [pc, #316]	; (8000658 <ReadData+0x194>)
 800051c:	f001 f86b 	bl	80015f6 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8000520:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000524:	484c      	ldr	r0, [pc, #304]	; (8000658 <ReadData+0x194>)
 8000526:	f001 f866 	bl	80015f6 <HAL_GPIO_TogglePin>


    }

    if(rxBuffer[0]==0x65 && rxBuffer[1]==0x00 && rxBuffer[2]==0x03 && rxBuffer[3]==0x01 && rxBuffer[4]==0xFF
 800052a:	4b48      	ldr	r3, [pc, #288]	; (800064c <ReadData+0x188>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b65      	cmp	r3, #101	; 0x65
 8000530:	d125      	bne.n	800057e <ReadData+0xba>
 8000532:	4b46      	ldr	r3, [pc, #280]	; (800064c <ReadData+0x188>)
 8000534:	785b      	ldrb	r3, [r3, #1]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d121      	bne.n	800057e <ReadData+0xba>
 800053a:	4b44      	ldr	r3, [pc, #272]	; (800064c <ReadData+0x188>)
 800053c:	789b      	ldrb	r3, [r3, #2]
 800053e:	2b03      	cmp	r3, #3
 8000540:	d11d      	bne.n	800057e <ReadData+0xba>
 8000542:	4b42      	ldr	r3, [pc, #264]	; (800064c <ReadData+0x188>)
 8000544:	78db      	ldrb	r3, [r3, #3]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d119      	bne.n	800057e <ReadData+0xba>
 800054a:	4b40      	ldr	r3, [pc, #256]	; (800064c <ReadData+0x188>)
 800054c:	791b      	ldrb	r3, [r3, #4]
 800054e:	2bff      	cmp	r3, #255	; 0xff
 8000550:	d115      	bne.n	800057e <ReadData+0xba>
    	&& rxBuffer[5]==0xFF && rxBuffer[6]==0xFF)
 8000552:	4b3e      	ldr	r3, [pc, #248]	; (800064c <ReadData+0x188>)
 8000554:	795b      	ldrb	r3, [r3, #5]
 8000556:	2bff      	cmp	r3, #255	; 0xff
 8000558:	d111      	bne.n	800057e <ReadData+0xba>
 800055a:	4b3c      	ldr	r3, [pc, #240]	; (800064c <ReadData+0x188>)
 800055c:	799b      	ldrb	r3, [r3, #6]
 800055e:	2bff      	cmp	r3, #255	; 0xff
 8000560:	d10d      	bne.n	800057e <ReadData+0xba>
    {
    	HAL_GPIO_TogglePin(GPIOD, relay2_Pin);
 8000562:	2104      	movs	r1, #4
 8000564:	483c      	ldr	r0, [pc, #240]	; (8000658 <ReadData+0x194>)
 8000566:	f001 f846 	bl	80015f6 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 800056a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056e:	483a      	ldr	r0, [pc, #232]	; (8000658 <ReadData+0x194>)
 8000570:	f001 f841 	bl	80015f6 <HAL_GPIO_TogglePin>
    	counter++;
 8000574:	4b37      	ldr	r3, [pc, #220]	; (8000654 <ReadData+0x190>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	3301      	adds	r3, #1
 800057a:	4a36      	ldr	r2, [pc, #216]	; (8000654 <ReadData+0x190>)
 800057c:	6013      	str	r3, [r2, #0]


    }

    if(rxBuffer[0]==0x65 && rxBuffer[1]==0x00 && rxBuffer[2]==0x04 && rxBuffer[3]==0x01 && rxBuffer[4]==0xFF
 800057e:	4b33      	ldr	r3, [pc, #204]	; (800064c <ReadData+0x188>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b65      	cmp	r3, #101	; 0x65
 8000584:	d125      	bne.n	80005d2 <ReadData+0x10e>
 8000586:	4b31      	ldr	r3, [pc, #196]	; (800064c <ReadData+0x188>)
 8000588:	785b      	ldrb	r3, [r3, #1]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d121      	bne.n	80005d2 <ReadData+0x10e>
 800058e:	4b2f      	ldr	r3, [pc, #188]	; (800064c <ReadData+0x188>)
 8000590:	789b      	ldrb	r3, [r3, #2]
 8000592:	2b04      	cmp	r3, #4
 8000594:	d11d      	bne.n	80005d2 <ReadData+0x10e>
 8000596:	4b2d      	ldr	r3, [pc, #180]	; (800064c <ReadData+0x188>)
 8000598:	78db      	ldrb	r3, [r3, #3]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d119      	bne.n	80005d2 <ReadData+0x10e>
 800059e:	4b2b      	ldr	r3, [pc, #172]	; (800064c <ReadData+0x188>)
 80005a0:	791b      	ldrb	r3, [r3, #4]
 80005a2:	2bff      	cmp	r3, #255	; 0xff
 80005a4:	d115      	bne.n	80005d2 <ReadData+0x10e>
    	&& rxBuffer[5]==0xFF && rxBuffer[6]==0xFF)
 80005a6:	4b29      	ldr	r3, [pc, #164]	; (800064c <ReadData+0x188>)
 80005a8:	795b      	ldrb	r3, [r3, #5]
 80005aa:	2bff      	cmp	r3, #255	; 0xff
 80005ac:	d111      	bne.n	80005d2 <ReadData+0x10e>
 80005ae:	4b27      	ldr	r3, [pc, #156]	; (800064c <ReadData+0x188>)
 80005b0:	799b      	ldrb	r3, [r3, #6]
 80005b2:	2bff      	cmp	r3, #255	; 0xff
 80005b4:	d10d      	bne.n	80005d2 <ReadData+0x10e>
    {
    	HAL_GPIO_TogglePin(GPIOD, relay3_Pin);
 80005b6:	2108      	movs	r1, #8
 80005b8:	4827      	ldr	r0, [pc, #156]	; (8000658 <ReadData+0x194>)
 80005ba:	f001 f81c 	bl	80015f6 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 80005be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c2:	4825      	ldr	r0, [pc, #148]	; (8000658 <ReadData+0x194>)
 80005c4:	f001 f817 	bl	80015f6 <HAL_GPIO_TogglePin>
    	counter++;
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <ReadData+0x190>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	4a21      	ldr	r2, [pc, #132]	; (8000654 <ReadData+0x190>)
 80005d0:	6013      	str	r3, [r2, #0]
    }

    if(rxBuffer[0]==0x65 && rxBuffer[1]==0x00 && rxBuffer[2]==0x05 && rxBuffer[3]==0x01 && rxBuffer[4]==0xFF
 80005d2:	4b1e      	ldr	r3, [pc, #120]	; (800064c <ReadData+0x188>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b65      	cmp	r3, #101	; 0x65
 80005d8:	d125      	bne.n	8000626 <ReadData+0x162>
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <ReadData+0x188>)
 80005dc:	785b      	ldrb	r3, [r3, #1]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d121      	bne.n	8000626 <ReadData+0x162>
 80005e2:	4b1a      	ldr	r3, [pc, #104]	; (800064c <ReadData+0x188>)
 80005e4:	789b      	ldrb	r3, [r3, #2]
 80005e6:	2b05      	cmp	r3, #5
 80005e8:	d11d      	bne.n	8000626 <ReadData+0x162>
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <ReadData+0x188>)
 80005ec:	78db      	ldrb	r3, [r3, #3]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d119      	bne.n	8000626 <ReadData+0x162>
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <ReadData+0x188>)
 80005f4:	791b      	ldrb	r3, [r3, #4]
 80005f6:	2bff      	cmp	r3, #255	; 0xff
 80005f8:	d115      	bne.n	8000626 <ReadData+0x162>
    	&& rxBuffer[5]==0xFF && rxBuffer[6]==0xFF)
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <ReadData+0x188>)
 80005fc:	795b      	ldrb	r3, [r3, #5]
 80005fe:	2bff      	cmp	r3, #255	; 0xff
 8000600:	d111      	bne.n	8000626 <ReadData+0x162>
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <ReadData+0x188>)
 8000604:	799b      	ldrb	r3, [r3, #6]
 8000606:	2bff      	cmp	r3, #255	; 0xff
 8000608:	d10d      	bne.n	8000626 <ReadData+0x162>
    {
    	HAL_GPIO_TogglePin(GPIOD, relay4_Pin);
 800060a:	2110      	movs	r1, #16
 800060c:	4812      	ldr	r0, [pc, #72]	; (8000658 <ReadData+0x194>)
 800060e:	f000 fff2 	bl	80015f6 <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8000612:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000616:	4810      	ldr	r0, [pc, #64]	; (8000658 <ReadData+0x194>)
 8000618:	f000 ffed 	bl	80015f6 <HAL_GPIO_TogglePin>
    	counter++;
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <ReadData+0x190>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <ReadData+0x190>)
 8000624:	6013      	str	r3, [r2, #0]
    }


    for(int i=0; i<50; i++)
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	e007      	b.n	800063c <ReadData+0x178>
    	rxBuffer[i]='\0';
 800062c:	4a07      	ldr	r2, [pc, #28]	; (800064c <ReadData+0x188>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<50; i++)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3301      	adds	r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b31      	cmp	r3, #49	; 0x31
 8000640:	ddf4      	ble.n	800062c <ReadData+0x168>


}
 8000642:	bf00      	nop
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200001d0 	.word	0x200001d0
 8000650:	2000018c 	.word	0x2000018c
 8000654:	20000204 	.word	0x20000204
 8000658:	40020c00 	.word	0x40020c00

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000660:	f000 fc6c 	bl	8000f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000664:	f000 f818 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000668:	f000 f93e 	bl	80008e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800066c:	f000 f87e 	bl	800076c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000670:	f000 f8aa 	bl	80007c8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000674:	f000 f8d8 	bl	8000828 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000678:	f007 fbce 	bl	8007e18 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 800067c:	f000 f90a 	bl	8000894 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, relay1_Pin | relay2_Pin | relay3_Pin | relay4_Pin, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	211e      	movs	r1, #30
 8000684:	4803      	ldr	r0, [pc, #12]	; (8000694 <main+0x38>)
 8000686:	f000 ff9d 	bl	80015c4 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800068a:	f007 fbeb 	bl	8007e64 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    ReadData();
 800068e:	f7ff ff19 	bl	80004c4 <ReadData>
    MX_USB_HOST_Process();
 8000692:	e7fa      	b.n	800068a <main+0x2e>
 8000694:	40020c00 	.word	0x40020c00

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f007 ff7a 	bl	80085a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a27      	ldr	r2, [pc, #156]	; (8000764 <SystemClock_Config+0xcc>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <SystemClock_Config+0xd0>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000702:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000708:	2308      	movs	r3, #8
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800070c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000710:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000716:	2307      	movs	r3, #7
 8000718:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	4618      	mov	r0, r3
 8000720:	f003 f972 	bl	8003a08 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800072a:	f000 f9db 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800073a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000744:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2105      	movs	r1, #5
 800074c:	4618      	mov	r0, r3
 800074e:	f003 fbd3 	bl	8003ef8 <HAL_RCC_ClockConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000758:	f000 f9c4 	bl	8000ae4 <Error_Handler>
  }
}
 800075c:	bf00      	nop
 800075e:	3750      	adds	r7, #80	; 0x50
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_I2C1_Init+0x50>)
 8000772:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <MX_I2C1_Init+0x54>)
 8000774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_I2C1_Init+0x50>)
 8000778:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <MX_I2C1_Init+0x58>)
 800077a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_I2C1_Init+0x50>)
 800078a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800078e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_I2C1_Init+0x50>)
 80007aa:	f002 fb49 	bl	8002e40 <HAL_I2C_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b4:	f000 f996 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000098 	.word	0x20000098
 80007c0:	40005400 	.word	0x40005400
 80007c4:	000186a0 	.word	0x000186a0

080007c8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_I2S3_Init+0x54>)
 80007ce:	4a14      	ldr	r2, [pc, #80]	; (8000820 <MX_I2S3_Init+0x58>)
 80007d0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_I2S3_Init+0x54>)
 80007d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_I2S3_Init+0x54>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007e0:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_I2S3_Init+0x54>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_I2S3_Init+0x54>)
 80007e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ec:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_I2S3_Init+0x54>)
 80007f0:	4a0c      	ldr	r2, [pc, #48]	; (8000824 <MX_I2S3_Init+0x5c>)
 80007f2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_I2S3_Init+0x54>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_I2S3_Init+0x54>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_I2S3_Init+0x54>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_I2S3_Init+0x54>)
 8000808:	f002 fc5e 	bl	80030c8 <HAL_I2S_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000812:	f000 f967 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000ec 	.word	0x200000ec
 8000820:	40003c00 	.word	0x40003c00
 8000824:	00017700 	.word	0x00017700

08000828 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_SPI1_Init+0x64>)
 800082e:	4a18      	ldr	r2, [pc, #96]	; (8000890 <MX_SPI1_Init+0x68>)
 8000830:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_SPI1_Init+0x64>)
 8000834:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000838:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_SPI1_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_SPI1_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_SPI1_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_SPI1_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_SPI1_Init+0x64>)
 8000854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000858:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_SPI1_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <MX_SPI1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_SPI1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <MX_SPI1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_SPI1_Init+0x64>)
 8000874:	220a      	movs	r2, #10
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_SPI1_Init+0x64>)
 800087a:	f003 fe9d 	bl	80045b8 <HAL_SPI_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000884:	f000 f92e 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000134 	.word	0x20000134
 8000890:	40013000 	.word	0x40013000

08000894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <MX_USART2_UART_Init+0x50>)
 800089c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART2_UART_Init+0x4c>)
 80008cc:	f003 fefd 	bl	80046ca <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008d6:	f000 f905 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000018c 	.word	0x2000018c
 80008e4:	40004400 	.word	0x40004400

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	; 0x30
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	4b72      	ldr	r3, [pc, #456]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a71      	ldr	r2, [pc, #452]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000908:	f043 0310 	orr.w	r3, r3, #16
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b6f      	ldr	r3, [pc, #444]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0310 	and.w	r3, r3, #16
 8000916:	61bb      	str	r3, [r7, #24]
 8000918:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	4b6b      	ldr	r3, [pc, #428]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a6a      	ldr	r2, [pc, #424]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b68      	ldr	r3, [pc, #416]	; (8000acc <MX_GPIO_Init+0x1e4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b64      	ldr	r3, [pc, #400]	; (8000acc <MX_GPIO_Init+0x1e4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a63      	ldr	r2, [pc, #396]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b61      	ldr	r3, [pc, #388]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b5d      	ldr	r3, [pc, #372]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a5c      	ldr	r2, [pc, #368]	; (8000acc <MX_GPIO_Init+0x1e4>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b5a      	ldr	r3, [pc, #360]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b56      	ldr	r3, [pc, #344]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a55      	ldr	r2, [pc, #340]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b53      	ldr	r3, [pc, #332]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b4f      	ldr	r3, [pc, #316]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a4e      	ldr	r2, [pc, #312]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000994:	f043 0308 	orr.w	r3, r3, #8
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b4c      	ldr	r3, [pc, #304]	; (8000acc <MX_GPIO_Init+0x1e4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2108      	movs	r1, #8
 80009aa:	4849      	ldr	r0, [pc, #292]	; (8000ad0 <MX_GPIO_Init+0x1e8>)
 80009ac:	f000 fe0a 	bl	80015c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2101      	movs	r1, #1
 80009b4:	4847      	ldr	r0, [pc, #284]	; (8000ad4 <MX_GPIO_Init+0x1ec>)
 80009b6:	f000 fe05 	bl	80015c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ba:	2200      	movs	r2, #0
 80009bc:	f24f 011e 	movw	r1, #61470	; 0xf01e
 80009c0:	4845      	ldr	r0, [pc, #276]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 80009c2:	f000 fdff 	bl	80015c4 <HAL_GPIO_WritePin>
                          |relay1_Pin|relay2_Pin|relay3_Pin|relay4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009c6:	2308      	movs	r3, #8
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	483c      	ldr	r0, [pc, #240]	; (8000ad0 <MX_GPIO_Init+0x1e8>)
 80009de:	f000 fc55 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009e2:	2301      	movs	r3, #1
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4836      	ldr	r0, [pc, #216]	; (8000ad4 <MX_GPIO_Init+0x1ec>)
 80009fa:	f000 fc47 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009fe:	2308      	movs	r3, #8
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a0e:	2305      	movs	r3, #5
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	482e      	ldr	r0, [pc, #184]	; (8000ad4 <MX_GPIO_Init+0x1ec>)
 8000a1a:	f000 fc37 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a22:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	482a      	ldr	r0, [pc, #168]	; (8000adc <MX_GPIO_Init+0x1f4>)
 8000a34:	f000 fc2a 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4825      	ldr	r0, [pc, #148]	; (8000ae0 <MX_GPIO_Init+0x1f8>)
 8000a4c:	f000 fc1e 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a62:	2305      	movs	r3, #5
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	481c      	ldr	r0, [pc, #112]	; (8000ae0 <MX_GPIO_Init+0x1f8>)
 8000a6e:	f000 fc0d 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           relay1_Pin relay2_Pin relay3_Pin relay4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a72:	f24f 031e 	movw	r3, #61470	; 0xf01e
 8000a76:	61fb      	str	r3, [r7, #28]
                          |relay1_Pin|relay2_Pin|relay3_Pin|relay4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4813      	ldr	r0, [pc, #76]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 8000a8c:	f000 fbfe 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a90:	2320      	movs	r3, #32
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 8000aa4:	f000 fbf2 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_GPIO_Init+0x1e8>)
 8000abe:	f000 fbe5 	bl	800128c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3730      	adds	r7, #48	; 0x30
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020400 	.word	0x40020400

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b2e:	2007      	movs	r0, #7
 8000b30:	f000 fb6a 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_I2C_MspInit+0x84>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12c      	bne.n	8000bbc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b7e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b84:	2312      	movs	r3, #18
 8000b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b90:	2304      	movs	r3, #4
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480c      	ldr	r0, [pc, #48]	; (8000bcc <HAL_I2C_MspInit+0x8c>)
 8000b9c:	f000 fb76 	bl	800128c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000baa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bae:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bbc:	bf00      	nop
 8000bbe:	3728      	adds	r7, #40	; 0x28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40005400 	.word	0x40005400
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020400 	.word	0x40020400

08000bd0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08e      	sub	sp, #56	; 0x38
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a31      	ldr	r2, [pc, #196]	; (8000cc0 <HAL_I2S_MspInit+0xf0>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d15a      	bne.n	8000cb6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c00:	2301      	movs	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c04:	23c0      	movs	r3, #192	; 0xc0
 8000c06:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 fb91 	bl	8004338 <HAL_RCCEx_PeriphCLKConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c1c:	f7ff ff62 	bl	8000ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	4a26      	ldr	r2, [pc, #152]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c30:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	4a1f      	ldr	r2, [pc, #124]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	4a18      	ldr	r2, [pc, #96]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6313      	str	r3, [r2, #48]	; 0x30
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <HAL_I2S_MspInit+0xf4>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c74:	2310      	movs	r3, #16
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c84:	2306      	movs	r3, #6
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480e      	ldr	r0, [pc, #56]	; (8000cc8 <HAL_I2S_MspInit+0xf8>)
 8000c90:	f000 fafc 	bl	800128c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c94:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ca6:	2306      	movs	r3, #6
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4806      	ldr	r0, [pc, #24]	; (8000ccc <HAL_I2S_MspInit+0xfc>)
 8000cb2:	f000 faeb 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3738      	adds	r7, #56	; 0x38
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40003c00 	.word	0x40003c00
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020000 	.word	0x40020000
 8000ccc:	40020800 	.word	0x40020800

08000cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a19      	ldr	r2, [pc, #100]	; (8000d54 <HAL_SPI_MspInit+0x84>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d12b      	bne.n	8000d4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_SPI_MspInit+0x88>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <HAL_SPI_MspInit+0x88>)
 8000cfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_SPI_MspInit+0x88>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_SPI_MspInit+0x88>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <HAL_SPI_MspInit+0x88>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_SPI_MspInit+0x88>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d2a:	23e0      	movs	r3, #224	; 0xe0
 8000d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000d46:	f000 faa1 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	; 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40013000 	.word	0x40013000
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020000 	.word	0x40020000

08000d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <HAL_UART_MspInit+0x84>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d12b      	bne.n	8000dda <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a17      	ldr	r2, [pc, #92]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_UART_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dba:	230c      	movs	r3, #12
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dca:	2307      	movs	r3, #7
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <HAL_UART_MspInit+0x8c>)
 8000dd6:	f000 fa59 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	; 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40004400 	.word	0x40004400
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3c:	f000 f8d0 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <OTG_FS_IRQHandler+0x10>)
 8000e4a:	f000 fe59 	bl	8001b00 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200005ec 	.word	0x200005ec

08000e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <_sbrk+0x5c>)
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <_sbrk+0x60>)
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <_sbrk+0x64>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <_sbrk+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d207      	bcs.n	8000e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e88:	f007 fba2 	bl	80085d0 <__errno>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	220c      	movs	r2, #12
 8000e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	e009      	b.n	8000eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <_sbrk+0x64>)
 8000ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20020000 	.word	0x20020000
 8000eb8:	00000400 	.word	0x00000400
 8000ebc:	20000208 	.word	0x20000208
 8000ec0:	20000a38 	.word	0x20000a38

08000ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <SystemInit+0x20>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <SystemInit+0x20>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eee:	490e      	ldr	r1, [pc, #56]	; (8000f28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ef0:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef4:	e002      	b.n	8000efc <LoopCopyDataInit>

08000ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efa:	3304      	adds	r3, #4

08000efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f00:	d3f9      	bcc.n	8000ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f02:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f04:	4c0b      	ldr	r4, [pc, #44]	; (8000f34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f08:	e001      	b.n	8000f0e <LoopFillZerobss>

08000f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f0c:	3204      	adds	r2, #4

08000f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f10:	d3fb      	bcc.n	8000f0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f12:	f7ff ffd7 	bl	8000ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f16:	f007 fb61 	bl	80085dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1a:	f7ff fb9f 	bl	800065c <main>
  bx  lr    
 8000f1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000f2c:	08008704 	.word	0x08008704
  ldr r2, =_sbss
 8000f30:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000f34:	20000a38 	.word	0x20000a38

08000f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC_IRQHandler>
	...

08000f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <HAL_Init+0x40>)
 8000f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <HAL_Init+0x40>)
 8000f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <HAL_Init+0x40>)
 8000f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f64:	2003      	movs	r0, #3
 8000f66:	f000 f94f 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f000 f808 	bl	8000f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f70:	f7ff fdbe 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023c00 	.word	0x40023c00

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x54>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0x58>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f967 	bl	8001272 <HAL_SYSTICK_Config>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00e      	b.n	8000fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b0f      	cmp	r3, #15
 8000fb2:	d80a      	bhi.n	8000fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f000 f92f 	bl	800121e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <HAL_InitTick+0x5c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e000      	b.n	8000fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000004 	.word	0x20000004

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x20>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_IncTick+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000008 	.word	0x20000008
 8001004:	2000020c 	.word	0x2000020c

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_GetTick+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	2000020c 	.word	0x2000020c

08001020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff ffee 	bl	8001008 <HAL_GetTick>
 800102c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	d005      	beq.n	8001046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_Delay+0x44>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001046:	bf00      	nop
 8001048:	f7ff ffde 	bl	8001008 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8f7      	bhi.n	8001048 <HAL_Delay+0x28>
  {
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008

08001068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109a:	4a04      	ldr	r2, [pc, #16]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60d3      	str	r3, [r2, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db0b      	blt.n	80010f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 021f 	and.w	r2, r3, #31
 80010e4:	4907      	ldr	r1, [pc, #28]	; (8001104 <__NVIC_EnableIRQ+0x38>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	2001      	movs	r0, #1
 80010ee:	fa00 f202 	lsl.w	r2, r0, r2
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff ff8e 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff29 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff3e 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff8e 	bl	800115c <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff31 	bl	80010cc <__NVIC_EnableIRQ>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffa2 	bl	80011c4 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
 80012a6:	e16b      	b.n	8001580 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012a8:	2201      	movs	r2, #1
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	f040 815a 	bne.w	800157a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d005      	beq.n	80012de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d130      	bne.n	8001340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	68da      	ldr	r2, [r3, #12]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001314:	2201      	movs	r2, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	f003 0201 	and.w	r2, r3, #1
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b03      	cmp	r3, #3
 800134a:	d017      	beq.n	800137c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d123      	bne.n	80013d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	08da      	lsrs	r2, r3, #3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3208      	adds	r2, #8
 8001390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	220f      	movs	r2, #15
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	08da      	lsrs	r2, r3, #3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3208      	adds	r2, #8
 80013ca:	69b9      	ldr	r1, [r7, #24]
 80013cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	2203      	movs	r2, #3
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0203 	and.w	r2, r3, #3
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80b4 	beq.w	800157a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b60      	ldr	r3, [pc, #384]	; (8001598 <HAL_GPIO_Init+0x30c>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a5f      	ldr	r2, [pc, #380]	; (8001598 <HAL_GPIO_Init+0x30c>)
 800141c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b5d      	ldr	r3, [pc, #372]	; (8001598 <HAL_GPIO_Init+0x30c>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800142e:	4a5b      	ldr	r2, [pc, #364]	; (800159c <HAL_GPIO_Init+0x310>)
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	3302      	adds	r3, #2
 8001436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	220f      	movs	r2, #15
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a52      	ldr	r2, [pc, #328]	; (80015a0 <HAL_GPIO_Init+0x314>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d02b      	beq.n	80014b2 <HAL_GPIO_Init+0x226>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a51      	ldr	r2, [pc, #324]	; (80015a4 <HAL_GPIO_Init+0x318>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d025      	beq.n	80014ae <HAL_GPIO_Init+0x222>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a50      	ldr	r2, [pc, #320]	; (80015a8 <HAL_GPIO_Init+0x31c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d01f      	beq.n	80014aa <HAL_GPIO_Init+0x21e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4f      	ldr	r2, [pc, #316]	; (80015ac <HAL_GPIO_Init+0x320>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d019      	beq.n	80014a6 <HAL_GPIO_Init+0x21a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4e      	ldr	r2, [pc, #312]	; (80015b0 <HAL_GPIO_Init+0x324>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0x216>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4d      	ldr	r2, [pc, #308]	; (80015b4 <HAL_GPIO_Init+0x328>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d00d      	beq.n	800149e <HAL_GPIO_Init+0x212>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4c      	ldr	r2, [pc, #304]	; (80015b8 <HAL_GPIO_Init+0x32c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d007      	beq.n	800149a <HAL_GPIO_Init+0x20e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4b      	ldr	r2, [pc, #300]	; (80015bc <HAL_GPIO_Init+0x330>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_GPIO_Init+0x20a>
 8001492:	2307      	movs	r3, #7
 8001494:	e00e      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 8001496:	2308      	movs	r3, #8
 8001498:	e00c      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 800149a:	2306      	movs	r3, #6
 800149c:	e00a      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 800149e:	2305      	movs	r3, #5
 80014a0:	e008      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 80014a2:	2304      	movs	r3, #4
 80014a4:	e006      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 80014a6:	2303      	movs	r3, #3
 80014a8:	e004      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e002      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 80014b2:	2300      	movs	r3, #0
 80014b4:	69fa      	ldr	r2, [r7, #28]
 80014b6:	f002 0203 	and.w	r2, r2, #3
 80014ba:	0092      	lsls	r2, r2, #2
 80014bc:	4093      	lsls	r3, r2
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c4:	4935      	ldr	r1, [pc, #212]	; (800159c <HAL_GPIO_Init+0x310>)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	3302      	adds	r3, #2
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014d2:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <HAL_GPIO_Init+0x334>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014f6:	4a32      	ldr	r2, [pc, #200]	; (80015c0 <HAL_GPIO_Init+0x334>)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014fc:	4b30      	ldr	r3, [pc, #192]	; (80015c0 <HAL_GPIO_Init+0x334>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001520:	4a27      	ldr	r2, [pc, #156]	; (80015c0 <HAL_GPIO_Init+0x334>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001526:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <HAL_GPIO_Init+0x334>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800154a:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <HAL_GPIO_Init+0x334>)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_GPIO_Init+0x334>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001574:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <HAL_GPIO_Init+0x334>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3301      	adds	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	2b0f      	cmp	r3, #15
 8001584:	f67f ae90 	bls.w	80012a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3724      	adds	r7, #36	; 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40013800 	.word	0x40013800
 80015a0:	40020000 	.word	0x40020000
 80015a4:	40020400 	.word	0x40020400
 80015a8:	40020800 	.word	0x40020800
 80015ac:	40020c00 	.word	0x40020c00
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40021400 	.word	0x40021400
 80015b8:	40021800 	.word	0x40021800
 80015bc:	40021c00 	.word	0x40021c00
 80015c0:	40013c00 	.word	0x40013c00

080015c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	807b      	strh	r3, [r7, #2]
 80015d0:	4613      	mov	r3, r2
 80015d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d4:	787b      	ldrb	r3, [r7, #1]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015da:	887a      	ldrh	r2, [r7, #2]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015e0:	e003      	b.n	80015ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015e2:	887b      	ldrh	r3, [r7, #2]
 80015e4:	041a      	lsls	r2, r3, #16
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	619a      	str	r2, [r3, #24]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b085      	sub	sp, #20
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	460b      	mov	r3, r1
 8001600:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001608:	887a      	ldrh	r2, [r7, #2]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4013      	ands	r3, r2
 800160e:	041a      	lsls	r2, r3, #16
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	43d9      	mvns	r1, r3
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	400b      	ands	r3, r1
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	619a      	str	r2, [r3, #24]
}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800162a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162c:	b08f      	sub	sp, #60	; 0x3c
 800162e:	af0a      	add	r7, sp, #40	; 0x28
 8001630:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e054      	b.n	80016e6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d106      	bne.n	800165c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f006 fc3c 	bl	8007ed4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2203      	movs	r2, #3
 8001660:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f003 fc68 	bl	8004f50 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	687e      	ldr	r6, [r7, #4]
 8001688:	466d      	mov	r5, sp
 800168a:	f106 0410 	add.w	r4, r6, #16
 800168e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001696:	e894 0003 	ldmia.w	r4, {r0, r1}
 800169a:	e885 0003 	stmia.w	r5, {r0, r1}
 800169e:	1d33      	adds	r3, r6, #4
 80016a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a2:	6838      	ldr	r0, [r7, #0]
 80016a4:	f003 fbe2 	bl	8004e6c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2101      	movs	r1, #1
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 fc5f 	bl	8004f72 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	603b      	str	r3, [r7, #0]
 80016ba:	687e      	ldr	r6, [r7, #4]
 80016bc:	466d      	mov	r5, sp
 80016be:	f106 0410 	add.w	r4, r6, #16
 80016c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80016d2:	1d33      	adds	r3, r6, #4
 80016d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016d6:	6838      	ldr	r0, [r7, #0]
 80016d8:	f003 fde8 	bl	80052ac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016ee <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80016ee:	b590      	push	{r4, r7, lr}
 80016f0:	b089      	sub	sp, #36	; 0x24
 80016f2:	af04      	add	r7, sp, #16
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	4608      	mov	r0, r1
 80016f8:	4611      	mov	r1, r2
 80016fa:	461a      	mov	r2, r3
 80016fc:	4603      	mov	r3, r0
 80016fe:	70fb      	strb	r3, [r7, #3]
 8001700:	460b      	mov	r3, r1
 8001702:	70bb      	strb	r3, [r7, #2]
 8001704:	4613      	mov	r3, r2
 8001706:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <HAL_HCD_HC_Init+0x28>
 8001712:	2302      	movs	r3, #2
 8001714:	e076      	b.n	8001804 <HAL_HCD_HC_Init+0x116>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	212c      	movs	r1, #44	; 0x2c
 8001724:	fb01 f303 	mul.w	r3, r1, r3
 8001728:	4413      	add	r3, r2
 800172a:	333d      	adds	r3, #61	; 0x3d
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	212c      	movs	r1, #44	; 0x2c
 8001736:	fb01 f303 	mul.w	r3, r1, r3
 800173a:	4413      	add	r3, r2
 800173c:	3338      	adds	r3, #56	; 0x38
 800173e:	787a      	ldrb	r2, [r7, #1]
 8001740:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	212c      	movs	r1, #44	; 0x2c
 8001748:	fb01 f303 	mul.w	r3, r1, r3
 800174c:	4413      	add	r3, r2
 800174e:	3340      	adds	r3, #64	; 0x40
 8001750:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001752:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	212c      	movs	r1, #44	; 0x2c
 800175a:	fb01 f303 	mul.w	r3, r1, r3
 800175e:	4413      	add	r3, r2
 8001760:	3339      	adds	r3, #57	; 0x39
 8001762:	78fa      	ldrb	r2, [r7, #3]
 8001764:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	212c      	movs	r1, #44	; 0x2c
 800176c:	fb01 f303 	mul.w	r3, r1, r3
 8001770:	4413      	add	r3, r2
 8001772:	333f      	adds	r3, #63	; 0x3f
 8001774:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001778:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	78ba      	ldrb	r2, [r7, #2]
 800177e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001782:	b2d0      	uxtb	r0, r2
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	212c      	movs	r1, #44	; 0x2c
 8001788:	fb01 f303 	mul.w	r3, r1, r3
 800178c:	4413      	add	r3, r2
 800178e:	333a      	adds	r3, #58	; 0x3a
 8001790:	4602      	mov	r2, r0
 8001792:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001794:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001798:	2b00      	cmp	r3, #0
 800179a:	da09      	bge.n	80017b0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	212c      	movs	r1, #44	; 0x2c
 80017a2:	fb01 f303 	mul.w	r3, r1, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	333b      	adds	r3, #59	; 0x3b
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]
 80017ae:	e008      	b.n	80017c2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	212c      	movs	r1, #44	; 0x2c
 80017b6:	fb01 f303 	mul.w	r3, r1, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	333b      	adds	r3, #59	; 0x3b
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	212c      	movs	r1, #44	; 0x2c
 80017c8:	fb01 f303 	mul.w	r3, r1, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	333c      	adds	r3, #60	; 0x3c
 80017d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017d4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6818      	ldr	r0, [r3, #0]
 80017da:	787c      	ldrb	r4, [r7, #1]
 80017dc:	78ba      	ldrb	r2, [r7, #2]
 80017de:	78f9      	ldrb	r1, [r7, #3]
 80017e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017e2:	9302      	str	r3, [sp, #8]
 80017e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	4623      	mov	r3, r4
 80017f2:	f003 fee1 	bl	80055b8 <USB_HC_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}

0800180c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_HCD_HC_Halt+0x1e>
 8001826:	2302      	movs	r3, #2
 8001828:	e00f      	b.n	800184a <HAL_HCD_HC_Halt+0x3e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	4611      	mov	r1, r2
 800183a:	4618      	mov	r0, r3
 800183c:	f004 f931 	bl	8005aa2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	4608      	mov	r0, r1
 800185e:	4611      	mov	r1, r2
 8001860:	461a      	mov	r2, r3
 8001862:	4603      	mov	r3, r0
 8001864:	70fb      	strb	r3, [r7, #3]
 8001866:	460b      	mov	r3, r1
 8001868:	70bb      	strb	r3, [r7, #2]
 800186a:	4613      	mov	r3, r2
 800186c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	212c      	movs	r1, #44	; 0x2c
 8001874:	fb01 f303 	mul.w	r3, r1, r3
 8001878:	4413      	add	r3, r2
 800187a:	333b      	adds	r3, #59	; 0x3b
 800187c:	78ba      	ldrb	r2, [r7, #2]
 800187e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	212c      	movs	r1, #44	; 0x2c
 8001886:	fb01 f303 	mul.w	r3, r1, r3
 800188a:	4413      	add	r3, r2
 800188c:	333f      	adds	r3, #63	; 0x3f
 800188e:	787a      	ldrb	r2, [r7, #1]
 8001890:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001892:	7c3b      	ldrb	r3, [r7, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d112      	bne.n	80018be <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	212c      	movs	r1, #44	; 0x2c
 800189e:	fb01 f303 	mul.w	r3, r1, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	3342      	adds	r3, #66	; 0x42
 80018a6:	2203      	movs	r2, #3
 80018a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	212c      	movs	r1, #44	; 0x2c
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	333d      	adds	r3, #61	; 0x3d
 80018b8:	7f3a      	ldrb	r2, [r7, #28]
 80018ba:	701a      	strb	r2, [r3, #0]
 80018bc:	e008      	b.n	80018d0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	212c      	movs	r1, #44	; 0x2c
 80018c4:	fb01 f303 	mul.w	r3, r1, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	3342      	adds	r3, #66	; 0x42
 80018cc:	2202      	movs	r2, #2
 80018ce:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018d0:	787b      	ldrb	r3, [r7, #1]
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	f200 80c6 	bhi.w	8001a64 <HAL_HCD_HC_SubmitRequest+0x210>
 80018d8:	a201      	add	r2, pc, #4	; (adr r2, 80018e0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80018da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018de:	bf00      	nop
 80018e0:	080018f1 	.word	0x080018f1
 80018e4:	08001a51 	.word	0x08001a51
 80018e8:	08001955 	.word	0x08001955
 80018ec:	080019d3 	.word	0x080019d3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80018f0:	7c3b      	ldrb	r3, [r7, #16]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	f040 80b8 	bne.w	8001a68 <HAL_HCD_HC_SubmitRequest+0x214>
 80018f8:	78bb      	ldrb	r3, [r7, #2]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f040 80b4 	bne.w	8001a68 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001900:	8b3b      	ldrh	r3, [r7, #24]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d108      	bne.n	8001918 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	212c      	movs	r1, #44	; 0x2c
 800190c:	fb01 f303 	mul.w	r3, r1, r3
 8001910:	4413      	add	r3, r2
 8001912:	3355      	adds	r3, #85	; 0x55
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	212c      	movs	r1, #44	; 0x2c
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	4413      	add	r3, r2
 8001924:	3355      	adds	r3, #85	; 0x55
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d109      	bne.n	8001940 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	212c      	movs	r1, #44	; 0x2c
 8001932:	fb01 f303 	mul.w	r3, r1, r3
 8001936:	4413      	add	r3, r2
 8001938:	3342      	adds	r3, #66	; 0x42
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800193e:	e093      	b.n	8001a68 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	212c      	movs	r1, #44	; 0x2c
 8001946:	fb01 f303 	mul.w	r3, r1, r3
 800194a:	4413      	add	r3, r2
 800194c:	3342      	adds	r3, #66	; 0x42
 800194e:	2202      	movs	r2, #2
 8001950:	701a      	strb	r2, [r3, #0]
      break;
 8001952:	e089      	b.n	8001a68 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001954:	78bb      	ldrb	r3, [r7, #2]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d11d      	bne.n	8001996 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	212c      	movs	r1, #44	; 0x2c
 8001960:	fb01 f303 	mul.w	r3, r1, r3
 8001964:	4413      	add	r3, r2
 8001966:	3355      	adds	r3, #85	; 0x55
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	212c      	movs	r1, #44	; 0x2c
 8001974:	fb01 f303 	mul.w	r3, r1, r3
 8001978:	4413      	add	r3, r2
 800197a:	3342      	adds	r3, #66	; 0x42
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001980:	e073      	b.n	8001a6a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	212c      	movs	r1, #44	; 0x2c
 8001988:	fb01 f303 	mul.w	r3, r1, r3
 800198c:	4413      	add	r3, r2
 800198e:	3342      	adds	r3, #66	; 0x42
 8001990:	2202      	movs	r2, #2
 8001992:	701a      	strb	r2, [r3, #0]
      break;
 8001994:	e069      	b.n	8001a6a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	212c      	movs	r1, #44	; 0x2c
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	3354      	adds	r3, #84	; 0x54
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	212c      	movs	r1, #44	; 0x2c
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	3342      	adds	r3, #66	; 0x42
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
      break;
 80019bc:	e055      	b.n	8001a6a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	212c      	movs	r1, #44	; 0x2c
 80019c4:	fb01 f303 	mul.w	r3, r1, r3
 80019c8:	4413      	add	r3, r2
 80019ca:	3342      	adds	r3, #66	; 0x42
 80019cc:	2202      	movs	r2, #2
 80019ce:	701a      	strb	r2, [r3, #0]
      break;
 80019d0:	e04b      	b.n	8001a6a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019d2:	78bb      	ldrb	r3, [r7, #2]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d11d      	bne.n	8001a14 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	212c      	movs	r1, #44	; 0x2c
 80019de:	fb01 f303 	mul.w	r3, r1, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	3355      	adds	r3, #85	; 0x55
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d109      	bne.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ec:	78fb      	ldrb	r3, [r7, #3]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	212c      	movs	r1, #44	; 0x2c
 80019f2:	fb01 f303 	mul.w	r3, r1, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	3342      	adds	r3, #66	; 0x42
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019fe:	e034      	b.n	8001a6a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	212c      	movs	r1, #44	; 0x2c
 8001a06:	fb01 f303 	mul.w	r3, r1, r3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3342      	adds	r3, #66	; 0x42
 8001a0e:	2202      	movs	r2, #2
 8001a10:	701a      	strb	r2, [r3, #0]
      break;
 8001a12:	e02a      	b.n	8001a6a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	212c      	movs	r1, #44	; 0x2c
 8001a1a:	fb01 f303 	mul.w	r3, r1, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	3354      	adds	r3, #84	; 0x54
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d109      	bne.n	8001a3c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	212c      	movs	r1, #44	; 0x2c
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	3342      	adds	r3, #66	; 0x42
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
      break;
 8001a3a:	e016      	b.n	8001a6a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	212c      	movs	r1, #44	; 0x2c
 8001a42:	fb01 f303 	mul.w	r3, r1, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	3342      	adds	r3, #66	; 0x42
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	701a      	strb	r2, [r3, #0]
      break;
 8001a4e:	e00c      	b.n	8001a6a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	212c      	movs	r1, #44	; 0x2c
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3342      	adds	r3, #66	; 0x42
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
      break;
 8001a62:	e002      	b.n	8001a6a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001a64:	bf00      	nop
 8001a66:	e000      	b.n	8001a6a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001a68:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	212c      	movs	r1, #44	; 0x2c
 8001a70:	fb01 f303 	mul.w	r3, r1, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	3344      	adds	r3, #68	; 0x44
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	8b3a      	ldrh	r2, [r7, #24]
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	202c      	movs	r0, #44	; 0x2c
 8001a84:	fb00 f303 	mul.w	r3, r0, r3
 8001a88:	440b      	add	r3, r1
 8001a8a:	334c      	adds	r3, #76	; 0x4c
 8001a8c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	212c      	movs	r1, #44	; 0x2c
 8001a94:	fb01 f303 	mul.w	r3, r1, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	3360      	adds	r3, #96	; 0x60
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	212c      	movs	r1, #44	; 0x2c
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	3350      	adds	r3, #80	; 0x50
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	212c      	movs	r1, #44	; 0x2c
 8001ab8:	fb01 f303 	mul.w	r3, r1, r3
 8001abc:	4413      	add	r3, r2
 8001abe:	3339      	adds	r3, #57	; 0x39
 8001ac0:	78fa      	ldrb	r2, [r7, #3]
 8001ac2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	212c      	movs	r1, #44	; 0x2c
 8001aca:	fb01 f303 	mul.w	r3, r1, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	3361      	adds	r3, #97	; 0x61
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	222c      	movs	r2, #44	; 0x2c
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	3338      	adds	r3, #56	; 0x38
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	18d1      	adds	r1, r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	f003 fe84 	bl	80057fc <USB_HC_StartXfer>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop

08001b00 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 fb85 	bl	8005226 <USB_GetMode>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	f040 80f6 	bne.w	8001d10 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 fb69 	bl	8005200 <USB_ReadInterrupts>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80ec 	beq.w	8001d0e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 fb60 	bl	8005200 <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b4a:	d104      	bne.n	8001b56 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 fb50 	bl	8005200 <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b6a:	d104      	bne.n	8001b76 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f003 fb40 	bl	8005200 <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b8a:	d104      	bne.n	8001b96 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 fb30 	bl	8005200 <USB_ReadInterrupts>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d103      	bne.n	8001bb2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 fb22 	bl	8005200 <USB_ReadInterrupts>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bc6:	d11c      	bne.n	8001c02 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bd0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10f      	bne.n	8001c02 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001be2:	2110      	movs	r1, #16
 8001be4:	6938      	ldr	r0, [r7, #16]
 8001be6:	f003 fa11 	bl	800500c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bea:	6938      	ldr	r0, [r7, #16]
 8001bec:	f003 fa42 	bl	8005074 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 fc18 	bl	800542c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f006 f9e7 	bl	8007fd0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f003 fafa 	bl	8005200 <USB_ReadInterrupts>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c16:	d102      	bne.n	8001c1e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f001 f89e 	bl	8002d5a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 faec 	bl	8005200 <USB_ReadInterrupts>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d106      	bne.n	8001c40 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f006 f9b0 	bl	8007f98 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2208      	movs	r2, #8
 8001c3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f003 fadb 	bl	8005200 <USB_ReadInterrupts>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	2b10      	cmp	r3, #16
 8001c52:	d101      	bne.n	8001c58 <HAL_HCD_IRQHandler+0x158>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <HAL_HCD_IRQHandler+0x15a>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d012      	beq.n	8001c84 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699a      	ldr	r2, [r3, #24]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0210 	bic.w	r2, r2, #16
 8001c6c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 ffa1 	bl	8002bb6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0210 	orr.w	r2, r2, #16
 8001c82:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 fab9 	bl	8005200 <USB_ReadInterrupts>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c98:	d13a      	bne.n	8001d10 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 feee 	bl	8005a80 <USB_HC_ReadInterrupt>
 8001ca4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	e025      	b.n	8001cf8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d018      	beq.n	8001cf2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	015a      	lsls	r2, r3, #5
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cd6:	d106      	bne.n	8001ce6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	4619      	mov	r1, r3
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f8ab 	bl	8001e3a <HCD_HC_IN_IRQHandler>
 8001ce4:	e005      	b.n	8001cf2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	4619      	mov	r1, r3
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 fbf9 	bl	80024e4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d3d4      	bcc.n	8001cac <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d0a:	615a      	str	r2, [r3, #20]
 8001d0c:	e000      	b.n	8001d10 <HAL_HCD_IRQHandler+0x210>
      return;
 8001d0e:	bf00      	nop
    }
  }
}
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_HCD_Start+0x16>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e013      	b.n	8001d54 <HAL_HCD_Start+0x3e>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2101      	movs	r1, #1
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 fbda 	bl	80054f4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f003 f8f2 	bl	8004f2e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_HCD_Stop+0x16>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e00d      	b.n	8001d8e <HAL_HCD_Stop+0x32>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 ffc8 	bl	8005d14 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f003 fb7c 	bl	80054a0 <USB_ResetPort>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	212c      	movs	r1, #44	; 0x2c
 8001dc4:	fb01 f303 	mul.w	r3, r1, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	3360      	adds	r3, #96	; 0x60
 8001dcc:	781b      	ldrb	r3, [r3, #0]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	460b      	mov	r3, r1
 8001de4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	212c      	movs	r1, #44	; 0x2c
 8001dec:	fb01 f303 	mul.w	r3, r1, r3
 8001df0:	4413      	add	r3, r2
 8001df2:	3350      	adds	r3, #80	; 0x50
 8001df4:	681b      	ldr	r3, [r3, #0]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f003 fbc0 	bl	8005594 <USB_GetCurrentFrame>
 8001e14:	4603      	mov	r3, r0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 fb9b 	bl	8005566 <USB_GetHostSpeed>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	460b      	mov	r3, r1
 8001e44:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	015a      	lsls	r2, r3, #5
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d11a      	bne.n	8001ea0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e76:	461a      	mov	r2, r3
 8001e78:	2304      	movs	r3, #4
 8001e7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	212c      	movs	r1, #44	; 0x2c
 8001e82:	fb01 f303 	mul.w	r3, r1, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	3361      	adds	r3, #97	; 0x61
 8001e8a:	2206      	movs	r2, #6
 8001e8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f003 fe02 	bl	8005aa2 <USB_HC_Halt>
 8001e9e:	e0af      	b.n	8002000 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	015a      	lsls	r2, r3, #5
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eb6:	d11b      	bne.n	8001ef0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	212c      	movs	r1, #44	; 0x2c
 8001ed2:	fb01 f303 	mul.w	r3, r1, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3361      	adds	r3, #97	; 0x61
 8001eda:	2207      	movs	r2, #7
 8001edc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 fdda 	bl	8005aa2 <USB_HC_Halt>
 8001eee:	e087      	b.n	8002000 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	015a      	lsls	r2, r3, #5
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	2b20      	cmp	r3, #32
 8001f04:	d109      	bne.n	8001f1a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f12:	461a      	mov	r2, r3
 8001f14:	2320      	movs	r3, #32
 8001f16:	6093      	str	r3, [r2, #8]
 8001f18:	e072      	b.n	8002000 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d11a      	bne.n	8001f66 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2308      	movs	r3, #8
 8001f40:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	212c      	movs	r1, #44	; 0x2c
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3361      	adds	r3, #97	; 0x61
 8001f50:	2205      	movs	r2, #5
 8001f52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 fd9f 	bl	8005aa2 <USB_HC_Halt>
 8001f64:	e04c      	b.n	8002000 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7c:	d11b      	bne.n	8001fb6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3361      	adds	r3, #97	; 0x61
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f003 fd77 	bl	8005aa2 <USB_HC_Halt>
 8001fb4:	e024      	b.n	8002000 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc8:	2b80      	cmp	r3, #128	; 0x80
 8001fca:	d119      	bne.n	8002000 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	015a      	lsls	r2, r3, #5
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd8:	461a      	mov	r2, r3
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	212c      	movs	r1, #44	; 0x2c
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	3361      	adds	r3, #97	; 0x61
 8001fec:	2206      	movs	r2, #6
 8001fee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f003 fd51 	bl	8005aa2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002016:	d112      	bne.n	800203e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f003 fd3d 	bl	8005aa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4413      	add	r3, r2
 8002030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002034:	461a      	mov	r2, r3
 8002036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800203a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800203c:	e24e      	b.n	80024dc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	015a      	lsls	r2, r3, #5
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4413      	add	r3, r2
 8002046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b01      	cmp	r3, #1
 8002052:	f040 80df 	bne.w	8002214 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d019      	beq.n	8002092 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	212c      	movs	r1, #44	; 0x2c
 8002064:	fb01 f303 	mul.w	r3, r1, r3
 8002068:	4413      	add	r3, r2
 800206a:	3348      	adds	r3, #72	; 0x48
 800206c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	0159      	lsls	r1, r3, #5
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	440b      	add	r3, r1
 8002076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002080:	1ad2      	subs	r2, r2, r3
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	202c      	movs	r0, #44	; 0x2c
 8002088:	fb00 f303 	mul.w	r3, r0, r3
 800208c:	440b      	add	r3, r1
 800208e:	3350      	adds	r3, #80	; 0x50
 8002090:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	212c      	movs	r1, #44	; 0x2c
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	3361      	adds	r3, #97	; 0x61
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	212c      	movs	r1, #44	; 0x2c
 80020aa:	fb01 f303 	mul.w	r3, r1, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	335c      	adds	r3, #92	; 0x5c
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c2:	461a      	mov	r2, r3
 80020c4:	2301      	movs	r3, #1
 80020c6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	212c      	movs	r1, #44	; 0x2c
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	333f      	adds	r3, #63	; 0x3f
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d009      	beq.n	80020f0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	212c      	movs	r1, #44	; 0x2c
 80020e2:	fb01 f303 	mul.w	r3, r1, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	333f      	adds	r3, #63	; 0x3f
 80020ea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d111      	bne.n	8002114 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	4611      	mov	r1, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 fcd1 	bl	8005aa2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4413      	add	r3, r2
 8002108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210c:	461a      	mov	r2, r3
 800210e:	2310      	movs	r3, #16
 8002110:	6093      	str	r3, [r2, #8]
 8002112:	e03a      	b.n	800218a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	212c      	movs	r1, #44	; 0x2c
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	4413      	add	r3, r2
 8002120:	333f      	adds	r3, #63	; 0x3f
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d009      	beq.n	800213c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	212c      	movs	r1, #44	; 0x2c
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4413      	add	r3, r2
 8002134:	333f      	adds	r3, #63	; 0x3f
 8002136:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002138:	2b01      	cmp	r3, #1
 800213a:	d126      	bne.n	800218a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4413      	add	r3, r2
 8002144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	0151      	lsls	r1, r2, #5
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	440a      	add	r2, r1
 8002152:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002156:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800215a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	3360      	adds	r3, #96	; 0x60
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	b2d9      	uxtb	r1, r3
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	202c      	movs	r0, #44	; 0x2c
 8002178:	fb00 f303 	mul.w	r3, r0, r3
 800217c:	4413      	add	r3, r2
 800217e:	3360      	adds	r3, #96	; 0x60
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f005 ff31 	bl	8007fec <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d12b      	bne.n	80021ea <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	3348      	adds	r3, #72	; 0x48
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	202c      	movs	r0, #44	; 0x2c
 80021a8:	fb00 f202 	mul.w	r2, r0, r2
 80021ac:	440a      	add	r2, r1
 80021ae:	3240      	adds	r2, #64	; 0x40
 80021b0:	8812      	ldrh	r2, [r2, #0]
 80021b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 818e 	beq.w	80024dc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	212c      	movs	r1, #44	; 0x2c
 80021c6:	fb01 f303 	mul.w	r3, r1, r3
 80021ca:	4413      	add	r3, r2
 80021cc:	3354      	adds	r3, #84	; 0x54
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	f083 0301 	eor.w	r3, r3, #1
 80021d4:	b2d8      	uxtb	r0, r3
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	212c      	movs	r1, #44	; 0x2c
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	3354      	adds	r3, #84	; 0x54
 80021e4:	4602      	mov	r2, r0
 80021e6:	701a      	strb	r2, [r3, #0]
}
 80021e8:	e178      	b.n	80024dc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	212c      	movs	r1, #44	; 0x2c
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	3354      	adds	r3, #84	; 0x54
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	f083 0301 	eor.w	r3, r3, #1
 80021fe:	b2d8      	uxtb	r0, r3
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	3354      	adds	r3, #84	; 0x54
 800220e:	4602      	mov	r2, r0
 8002210:	701a      	strb	r2, [r3, #0]
}
 8002212:	e163      	b.n	80024dc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4413      	add	r3, r2
 800221c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b02      	cmp	r3, #2
 8002228:	f040 80f6 	bne.w	8002418 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	212c      	movs	r1, #44	; 0x2c
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	4413      	add	r3, r2
 8002238:	3361      	adds	r3, #97	; 0x61
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d109      	bne.n	8002254 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	212c      	movs	r1, #44	; 0x2c
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	4413      	add	r3, r2
 800224c:	3360      	adds	r3, #96	; 0x60
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]
 8002252:	e0c9      	b.n	80023e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	212c      	movs	r1, #44	; 0x2c
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	4413      	add	r3, r2
 8002260:	3361      	adds	r3, #97	; 0x61
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b05      	cmp	r3, #5
 8002266:	d109      	bne.n	800227c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	212c      	movs	r1, #44	; 0x2c
 800226e:	fb01 f303 	mul.w	r3, r1, r3
 8002272:	4413      	add	r3, r2
 8002274:	3360      	adds	r3, #96	; 0x60
 8002276:	2205      	movs	r2, #5
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	e0b5      	b.n	80023e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	212c      	movs	r1, #44	; 0x2c
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	4413      	add	r3, r2
 8002288:	3361      	adds	r3, #97	; 0x61
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b06      	cmp	r3, #6
 800228e:	d009      	beq.n	80022a4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	212c      	movs	r1, #44	; 0x2c
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	3361      	adds	r3, #97	; 0x61
 800229e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d150      	bne.n	8002346 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	212c      	movs	r1, #44	; 0x2c
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	4413      	add	r3, r2
 80022b0:	335c      	adds	r3, #92	; 0x5c
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	202c      	movs	r0, #44	; 0x2c
 80022bc:	fb00 f303 	mul.w	r3, r0, r3
 80022c0:	440b      	add	r3, r1
 80022c2:	335c      	adds	r3, #92	; 0x5c
 80022c4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	335c      	adds	r3, #92	; 0x5c
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d912      	bls.n	8002300 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	335c      	adds	r3, #92	; 0x5c
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	212c      	movs	r1, #44	; 0x2c
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	3360      	adds	r3, #96	; 0x60
 80022fa:	2204      	movs	r2, #4
 80022fc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022fe:	e073      	b.n	80023e8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	212c      	movs	r1, #44	; 0x2c
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	4413      	add	r3, r2
 800230c:	3360      	adds	r3, #96	; 0x60
 800230e:	2202      	movs	r2, #2
 8002310:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4413      	add	r3, r2
 800231a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002328:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002330:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	461a      	mov	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002344:	e050      	b.n	80023e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	212c      	movs	r1, #44	; 0x2c
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	3361      	adds	r3, #97	; 0x61
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b03      	cmp	r3, #3
 8002358:	d122      	bne.n	80023a0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	212c      	movs	r1, #44	; 0x2c
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	3360      	adds	r3, #96	; 0x60
 8002368:	2202      	movs	r2, #2
 800236a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	015a      	lsls	r2, r3, #5
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4413      	add	r3, r2
 8002374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002382:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800238a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002398:	461a      	mov	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e023      	b.n	80023e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	212c      	movs	r1, #44	; 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	3361      	adds	r3, #97	; 0x61
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b07      	cmp	r3, #7
 80023b2:	d119      	bne.n	80023e8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	335c      	adds	r3, #92	; 0x5c
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	202c      	movs	r0, #44	; 0x2c
 80023cc:	fb00 f303 	mul.w	r3, r0, r3
 80023d0:	440b      	add	r3, r1
 80023d2:	335c      	adds	r3, #92	; 0x5c
 80023d4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	212c      	movs	r1, #44	; 0x2c
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	3360      	adds	r3, #96	; 0x60
 80023e4:	2204      	movs	r2, #4
 80023e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f4:	461a      	mov	r2, r3
 80023f6:	2302      	movs	r3, #2
 80023f8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	b2d9      	uxtb	r1, r3
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	202c      	movs	r0, #44	; 0x2c
 8002404:	fb00 f303 	mul.w	r3, r0, r3
 8002408:	4413      	add	r3, r2
 800240a:	3360      	adds	r3, #96	; 0x60
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f005 fdeb 	bl	8007fec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002416:	e061      	b.n	80024dc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4413      	add	r3, r2
 8002420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b10      	cmp	r3, #16
 800242c:	d156      	bne.n	80024dc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	212c      	movs	r1, #44	; 0x2c
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	4413      	add	r3, r2
 800243a:	333f      	adds	r3, #63	; 0x3f
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b03      	cmp	r3, #3
 8002440:	d111      	bne.n	8002466 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	212c      	movs	r1, #44	; 0x2c
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	4413      	add	r3, r2
 800244e:	335c      	adds	r3, #92	; 0x5c
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f003 fb1f 	bl	8005aa2 <USB_HC_Halt>
 8002464:	e031      	b.n	80024ca <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	212c      	movs	r1, #44	; 0x2c
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	4413      	add	r3, r2
 8002472:	333f      	adds	r3, #63	; 0x3f
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d009      	beq.n	800248e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	212c      	movs	r1, #44	; 0x2c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	333f      	adds	r3, #63	; 0x3f
 8002488:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800248a:	2b02      	cmp	r3, #2
 800248c:	d11d      	bne.n	80024ca <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	212c      	movs	r1, #44	; 0x2c
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	4413      	add	r3, r2
 800249a:	335c      	adds	r3, #92	; 0x5c
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d110      	bne.n	80024ca <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	212c      	movs	r1, #44	; 0x2c
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	4413      	add	r3, r2
 80024b4:	3361      	adds	r3, #97	; 0x61
 80024b6:	2203      	movs	r2, #3
 80024b8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f003 faec 	bl	8005aa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d6:	461a      	mov	r2, r3
 80024d8:	2310      	movs	r3, #16
 80024da:	6093      	str	r3, [r2, #8]
}
 80024dc:	bf00      	nop
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	4413      	add	r3, r2
 8002506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b04      	cmp	r3, #4
 8002512:	d11a      	bne.n	800254a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	461a      	mov	r2, r3
 8002522:	2304      	movs	r3, #4
 8002524:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	212c      	movs	r1, #44	; 0x2c
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	3361      	adds	r3, #97	; 0x61
 8002534:	2206      	movs	r2, #6
 8002536:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f003 faad 	bl	8005aa2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002548:	e331      	b.n	8002bae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	015a      	lsls	r2, r3, #5
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	4413      	add	r3, r2
 8002552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b20      	cmp	r3, #32
 800255e:	d12e      	bne.n	80025be <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256c:	461a      	mov	r2, r3
 800256e:	2320      	movs	r3, #32
 8002570:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	212c      	movs	r1, #44	; 0x2c
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	4413      	add	r3, r2
 800257e:	333d      	adds	r3, #61	; 0x3d
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	f040 8313 	bne.w	8002bae <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	212c      	movs	r1, #44	; 0x2c
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	333d      	adds	r3, #61	; 0x3d
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	3360      	adds	r3, #96	; 0x60
 80025a8:	2202      	movs	r2, #2
 80025aa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f003 fa73 	bl	8005aa2 <USB_HC_Halt>
}
 80025bc:	e2f7      	b.n	8002bae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d4:	d112      	bne.n	80025fc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e2:	461a      	mov	r2, r3
 80025e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025e8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	4611      	mov	r1, r2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 fa54 	bl	8005aa2 <USB_HC_Halt>
}
 80025fa:	e2d8      	b.n	8002bae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	4413      	add	r3, r2
 8002604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b01      	cmp	r3, #1
 8002610:	d140      	bne.n	8002694 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	212c      	movs	r1, #44	; 0x2c
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	4413      	add	r3, r2
 800261e:	335c      	adds	r3, #92	; 0x5c
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	4413      	add	r3, r2
 800262c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002636:	2b40      	cmp	r3, #64	; 0x40
 8002638:	d111      	bne.n	800265e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	212c      	movs	r1, #44	; 0x2c
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	4413      	add	r3, r2
 8002646:	333d      	adds	r3, #61	; 0x3d
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	4413      	add	r3, r2
 8002654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002658:	461a      	mov	r2, r3
 800265a:	2340      	movs	r3, #64	; 0x40
 800265c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	4413      	add	r3, r2
 8002666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266a:	461a      	mov	r2, r3
 800266c:	2301      	movs	r3, #1
 800266e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	212c      	movs	r1, #44	; 0x2c
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	4413      	add	r3, r2
 800267c:	3361      	adds	r3, #97	; 0x61
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f003 fa08 	bl	8005aa2 <USB_HC_Halt>
}
 8002692:	e28c      	b.n	8002bae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a6:	2b40      	cmp	r3, #64	; 0x40
 80026a8:	d12c      	bne.n	8002704 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	212c      	movs	r1, #44	; 0x2c
 80026b0:	fb01 f303 	mul.w	r3, r1, r3
 80026b4:	4413      	add	r3, r2
 80026b6:	3361      	adds	r3, #97	; 0x61
 80026b8:	2204      	movs	r2, #4
 80026ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	333d      	adds	r3, #61	; 0x3d
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	212c      	movs	r1, #44	; 0x2c
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	4413      	add	r3, r2
 80026da:	335c      	adds	r3, #92	; 0x5c
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f003 f9d9 	bl	8005aa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fc:	461a      	mov	r2, r3
 80026fe:	2340      	movs	r3, #64	; 0x40
 8002700:	6093      	str	r3, [r2, #8]
}
 8002702:	e254      	b.n	8002bae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b08      	cmp	r3, #8
 8002718:	d11a      	bne.n	8002750 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4413      	add	r3, r2
 8002722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002726:	461a      	mov	r2, r3
 8002728:	2308      	movs	r3, #8
 800272a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	3361      	adds	r3, #97	; 0x61
 800273a:	2205      	movs	r2, #5
 800273c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f003 f9aa 	bl	8005aa2 <USB_HC_Halt>
}
 800274e:	e22e      	b.n	8002bae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b10      	cmp	r3, #16
 8002764:	d140      	bne.n	80027e8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	212c      	movs	r1, #44	; 0x2c
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	4413      	add	r3, r2
 8002772:	335c      	adds	r3, #92	; 0x5c
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	212c      	movs	r1, #44	; 0x2c
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	3361      	adds	r3, #97	; 0x61
 8002786:	2203      	movs	r2, #3
 8002788:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	333d      	adds	r3, #61	; 0x3d
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d112      	bne.n	80027c4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	212c      	movs	r1, #44	; 0x2c
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	333c      	adds	r3, #60	; 0x3c
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d108      	bne.n	80027c4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	212c      	movs	r1, #44	; 0x2c
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	333d      	adds	r3, #61	; 0x3d
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f003 f967 	bl	8005aa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e0:	461a      	mov	r2, r3
 80027e2:	2310      	movs	r3, #16
 80027e4:	6093      	str	r3, [r2, #8]
}
 80027e6:	e1e2      	b.n	8002bae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fa:	2b80      	cmp	r3, #128	; 0x80
 80027fc:	d164      	bne.n	80028c8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d111      	bne.n	800282a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	212c      	movs	r1, #44	; 0x2c
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	4413      	add	r3, r2
 8002812:	3361      	adds	r3, #97	; 0x61
 8002814:	2206      	movs	r2, #6
 8002816:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f003 f93d 	bl	8005aa2 <USB_HC_Halt>
 8002828:	e044      	b.n	80028b4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	212c      	movs	r1, #44	; 0x2c
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	4413      	add	r3, r2
 8002836:	335c      	adds	r3, #92	; 0x5c
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	202c      	movs	r0, #44	; 0x2c
 8002842:	fb00 f303 	mul.w	r3, r0, r3
 8002846:	440b      	add	r3, r1
 8002848:	335c      	adds	r3, #92	; 0x5c
 800284a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	212c      	movs	r1, #44	; 0x2c
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	4413      	add	r3, r2
 8002858:	335c      	adds	r3, #92	; 0x5c
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d920      	bls.n	80028a2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	212c      	movs	r1, #44	; 0x2c
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	4413      	add	r3, r2
 800286c:	335c      	adds	r3, #92	; 0x5c
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	212c      	movs	r1, #44	; 0x2c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	3360      	adds	r3, #96	; 0x60
 8002880:	2204      	movs	r2, #4
 8002882:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	b2d9      	uxtb	r1, r3
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	202c      	movs	r0, #44	; 0x2c
 800288e:	fb00 f303 	mul.w	r3, r0, r3
 8002892:	4413      	add	r3, r2
 8002894:	3360      	adds	r3, #96	; 0x60
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f005 fba6 	bl	8007fec <HAL_HCD_HC_NotifyURBChange_Callback>
 80028a0:	e008      	b.n	80028b4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3360      	adds	r3, #96	; 0x60
 80028b0:	2202      	movs	r2, #2
 80028b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c0:	461a      	mov	r2, r3
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	6093      	str	r3, [r2, #8]
}
 80028c6:	e172      	b.n	8002bae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028de:	d11b      	bne.n	8002918 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	212c      	movs	r1, #44	; 0x2c
 80028e6:	fb01 f303 	mul.w	r3, r1, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	3361      	adds	r3, #97	; 0x61
 80028ee:	2208      	movs	r2, #8
 80028f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f003 f8d0 	bl	8005aa2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	4413      	add	r3, r2
 800290a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290e:	461a      	mov	r2, r3
 8002910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002914:	6093      	str	r3, [r2, #8]
}
 8002916:	e14a      	b.n	8002bae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b02      	cmp	r3, #2
 800292c:	f040 813f 	bne.w	8002bae <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	212c      	movs	r1, #44	; 0x2c
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	4413      	add	r3, r2
 800293c:	3361      	adds	r3, #97	; 0x61
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d17d      	bne.n	8002a40 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	212c      	movs	r1, #44	; 0x2c
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	4413      	add	r3, r2
 8002950:	3360      	adds	r3, #96	; 0x60
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	212c      	movs	r1, #44	; 0x2c
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	333f      	adds	r3, #63	; 0x3f
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d00a      	beq.n	8002980 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	212c      	movs	r1, #44	; 0x2c
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	333f      	adds	r3, #63	; 0x3f
 8002978:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800297a:	2b03      	cmp	r3, #3
 800297c:	f040 8100 	bne.w	8002b80 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d113      	bne.n	80029b0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	3355      	adds	r3, #85	; 0x55
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	f083 0301 	eor.w	r3, r3, #1
 800299c:	b2d8      	uxtb	r0, r3
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	212c      	movs	r1, #44	; 0x2c
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	3355      	adds	r3, #85	; 0x55
 80029ac:	4602      	mov	r2, r0
 80029ae:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	f040 80e3 	bne.w	8002b80 <HCD_HC_OUT_IRQHandler+0x69c>
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	212c      	movs	r1, #44	; 0x2c
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	334c      	adds	r3, #76	; 0x4c
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 80d8 	beq.w	8002b80 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	212c      	movs	r1, #44	; 0x2c
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	334c      	adds	r3, #76	; 0x4c
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	202c      	movs	r0, #44	; 0x2c
 80029e6:	fb00 f202 	mul.w	r2, r0, r2
 80029ea:	440a      	add	r2, r1
 80029ec:	3240      	adds	r2, #64	; 0x40
 80029ee:	8812      	ldrh	r2, [r2, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	3b01      	subs	r3, #1
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	202c      	movs	r0, #44	; 0x2c
 80029fa:	fb00 f202 	mul.w	r2, r0, r2
 80029fe:	440a      	add	r2, r1
 8002a00:	3240      	adds	r2, #64	; 0x40
 8002a02:	8812      	ldrh	r2, [r2, #0]
 8002a04:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80b5 	beq.w	8002b80 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	212c      	movs	r1, #44	; 0x2c
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	3355      	adds	r3, #85	; 0x55
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	f083 0301 	eor.w	r3, r3, #1
 8002a2a:	b2d8      	uxtb	r0, r3
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	3355      	adds	r3, #85	; 0x55
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	e09f      	b.n	8002b80 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	212c      	movs	r1, #44	; 0x2c
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3361      	adds	r3, #97	; 0x61
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d109      	bne.n	8002a68 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3360      	adds	r3, #96	; 0x60
 8002a62:	2202      	movs	r2, #2
 8002a64:	701a      	strb	r2, [r3, #0]
 8002a66:	e08b      	b.n	8002b80 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	212c      	movs	r1, #44	; 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	3361      	adds	r3, #97	; 0x61
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d109      	bne.n	8002a90 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	212c      	movs	r1, #44	; 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3360      	adds	r3, #96	; 0x60
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	e077      	b.n	8002b80 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	212c      	movs	r1, #44	; 0x2c
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3361      	adds	r3, #97	; 0x61
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b05      	cmp	r3, #5
 8002aa2:	d109      	bne.n	8002ab8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3360      	adds	r3, #96	; 0x60
 8002ab2:	2205      	movs	r2, #5
 8002ab4:	701a      	strb	r2, [r3, #0]
 8002ab6:	e063      	b.n	8002b80 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3361      	adds	r3, #97	; 0x61
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b06      	cmp	r3, #6
 8002aca:	d009      	beq.n	8002ae0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	212c      	movs	r1, #44	; 0x2c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3361      	adds	r3, #97	; 0x61
 8002ada:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d14f      	bne.n	8002b80 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	212c      	movs	r1, #44	; 0x2c
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	335c      	adds	r3, #92	; 0x5c
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	202c      	movs	r0, #44	; 0x2c
 8002af8:	fb00 f303 	mul.w	r3, r0, r3
 8002afc:	440b      	add	r3, r1
 8002afe:	335c      	adds	r3, #92	; 0x5c
 8002b00:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	335c      	adds	r3, #92	; 0x5c
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d912      	bls.n	8002b3c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	335c      	adds	r3, #92	; 0x5c
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	3360      	adds	r3, #96	; 0x60
 8002b36:	2204      	movs	r2, #4
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	e021      	b.n	8002b80 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	212c      	movs	r1, #44	; 0x2c
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	3360      	adds	r3, #96	; 0x60
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b64:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b6c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	2302      	movs	r3, #2
 8002b90:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	b2d9      	uxtb	r1, r3
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	202c      	movs	r0, #44	; 0x2c
 8002b9c:	fb00 f303 	mul.w	r3, r0, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3360      	adds	r3, #96	; 0x60
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f005 fa1f 	bl	8007fec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bae:	bf00      	nop
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b08a      	sub	sp, #40	; 0x28
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	0c5b      	lsrs	r3, r3, #17
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bea:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d004      	beq.n	8002bfc <HCD_RXQLVL_IRQHandler+0x46>
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	f000 80a9 	beq.w	8002d4c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002bfa:	e0aa      	b.n	8002d52 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 80a6 	beq.w	8002d50 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3344      	adds	r3, #68	; 0x44
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 809b 	beq.w	8002d50 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	3350      	adds	r3, #80	; 0x50
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	441a      	add	r2, r3
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	202c      	movs	r0, #44	; 0x2c
 8002c34:	fb00 f303 	mul.w	r3, r0, r3
 8002c38:	440b      	add	r3, r1
 8002c3a:	334c      	adds	r3, #76	; 0x4c
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d87a      	bhi.n	8002d38 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	3344      	adds	r3, #68	; 0x44
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	b292      	uxth	r2, r2
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	f002 fa78 	bl	8005150 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	212c      	movs	r1, #44	; 0x2c
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3344      	adds	r3, #68	; 0x44
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	441a      	add	r2, r3
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	202c      	movs	r0, #44	; 0x2c
 8002c7a:	fb00 f303 	mul.w	r3, r0, r3
 8002c7e:	440b      	add	r3, r1
 8002c80:	3344      	adds	r3, #68	; 0x44
 8002c82:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	212c      	movs	r1, #44	; 0x2c
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	3350      	adds	r3, #80	; 0x50
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	441a      	add	r2, r3
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	202c      	movs	r0, #44	; 0x2c
 8002c9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3350      	adds	r3, #80	; 0x50
 8002ca6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	0cdb      	lsrs	r3, r3, #19
 8002cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cbc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	3340      	adds	r3, #64	; 0x40
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d13c      	bne.n	8002d50 <HCD_RXQLVL_IRQHandler+0x19a>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d039      	beq.n	8002d50 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cf2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cfa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d08:	461a      	mov	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	212c      	movs	r1, #44	; 0x2c
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	3354      	adds	r3, #84	; 0x54
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	f083 0301 	eor.w	r3, r3, #1
 8002d22:	b2d8      	uxtb	r0, r3
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	212c      	movs	r1, #44	; 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3354      	adds	r3, #84	; 0x54
 8002d32:	4602      	mov	r2, r0
 8002d34:	701a      	strb	r2, [r3, #0]
      break;
 8002d36:	e00b      	b.n	8002d50 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3360      	adds	r3, #96	; 0x60
 8002d46:	2204      	movs	r2, #4
 8002d48:	701a      	strb	r2, [r3, #0]
      break;
 8002d4a:	e001      	b.n	8002d50 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d4c:	bf00      	nop
 8002d4e:	e000      	b.n	8002d52 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d50:	bf00      	nop
  }
}
 8002d52:	bf00      	nop
 8002d54:	3728      	adds	r7, #40	; 0x28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b086      	sub	sp, #24
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d86:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d10b      	bne.n	8002daa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d102      	bne.n	8002da2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f005 f909 	bl	8007fb4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f043 0302 	orr.w	r3, r3, #2
 8002da8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d132      	bne.n	8002e1a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f043 0308 	orr.w	r3, r3, #8
 8002dba:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d126      	bne.n	8002e14 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d113      	bne.n	8002df6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002dd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dd8:	d106      	bne.n	8002de8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2102      	movs	r1, #2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f002 fb23 	bl	800542c <USB_InitFSLSPClkSel>
 8002de6:	e011      	b.n	8002e0c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2101      	movs	r1, #1
 8002dee:	4618      	mov	r0, r3
 8002df0:	f002 fb1c 	bl	800542c <USB_InitFSLSPClkSel>
 8002df4:	e00a      	b.n	8002e0c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d106      	bne.n	8002e0c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e04:	461a      	mov	r2, r3
 8002e06:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e0a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f005 f8fb 	bl	8008008 <HAL_HCD_PortEnabled_Callback>
 8002e12:	e002      	b.n	8002e1a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f005 f905 	bl	8008024 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d103      	bne.n	8002e2c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f043 0320 	orr.w	r3, r3, #32
 8002e2a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e32:	461a      	mov	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	6013      	str	r3, [r2, #0]
}
 8002e38:	bf00      	nop
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e12b      	b.n	80030aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fd fe6a 	bl	8000b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2224      	movs	r2, #36	; 0x24
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ea4:	f001 fa20 	bl	80042e8 <HAL_RCC_GetPCLK1Freq>
 8002ea8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4a81      	ldr	r2, [pc, #516]	; (80030b4 <HAL_I2C_Init+0x274>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d807      	bhi.n	8002ec4 <HAL_I2C_Init+0x84>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4a80      	ldr	r2, [pc, #512]	; (80030b8 <HAL_I2C_Init+0x278>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	bf94      	ite	ls
 8002ebc:	2301      	movls	r3, #1
 8002ebe:	2300      	movhi	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e006      	b.n	8002ed2 <HAL_I2C_Init+0x92>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4a7d      	ldr	r2, [pc, #500]	; (80030bc <HAL_I2C_Init+0x27c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	bf94      	ite	ls
 8002ecc:	2301      	movls	r3, #1
 8002ece:	2300      	movhi	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e0e7      	b.n	80030aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4a78      	ldr	r2, [pc, #480]	; (80030c0 <HAL_I2C_Init+0x280>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	0c9b      	lsrs	r3, r3, #18
 8002ee4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4a6a      	ldr	r2, [pc, #424]	; (80030b4 <HAL_I2C_Init+0x274>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d802      	bhi.n	8002f14 <HAL_I2C_Init+0xd4>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	3301      	adds	r3, #1
 8002f12:	e009      	b.n	8002f28 <HAL_I2C_Init+0xe8>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	4a69      	ldr	r2, [pc, #420]	; (80030c4 <HAL_I2C_Init+0x284>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	3301      	adds	r3, #1
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	495c      	ldr	r1, [pc, #368]	; (80030b4 <HAL_I2C_Init+0x274>)
 8002f44:	428b      	cmp	r3, r1
 8002f46:	d819      	bhi.n	8002f7c <HAL_I2C_Init+0x13c>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1e59      	subs	r1, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f56:	1c59      	adds	r1, r3, #1
 8002f58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f5c:	400b      	ands	r3, r1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_I2C_Init+0x138>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1e59      	subs	r1, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f70:	3301      	adds	r3, #1
 8002f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f76:	e051      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002f78:	2304      	movs	r3, #4
 8002f7a:	e04f      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d111      	bne.n	8002fa8 <HAL_I2C_Init+0x168>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1e58      	subs	r0, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	440b      	add	r3, r1
 8002f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	e012      	b.n	8002fce <HAL_I2C_Init+0x18e>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1e58      	subs	r0, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	0099      	lsls	r1, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_Init+0x196>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e022      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10e      	bne.n	8002ffc <HAL_I2C_Init+0x1bc>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1e58      	subs	r0, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6859      	ldr	r1, [r3, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	440b      	add	r3, r1
 8002fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ffa:	e00f      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1e58      	subs	r0, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	0099      	lsls	r1, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003012:	3301      	adds	r3, #1
 8003014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	6809      	ldr	r1, [r1, #0]
 8003020:	4313      	orrs	r3, r2
 8003022:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800304a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6911      	ldr	r1, [r2, #16]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68d2      	ldr	r2, [r2, #12]
 8003056:	4311      	orrs	r1, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	430b      	orrs	r3, r1
 800305e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	000186a0 	.word	0x000186a0
 80030b8:	001e847f 	.word	0x001e847f
 80030bc:	003d08ff 	.word	0x003d08ff
 80030c0:	431bde83 	.word	0x431bde83
 80030c4:	10624dd3 	.word	0x10624dd3

080030c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e128      	b.n	800332c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a90      	ldr	r2, [pc, #576]	; (8003334 <HAL_I2S_Init+0x26c>)
 80030f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7fd fd6b 	bl	8000bd0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2202      	movs	r2, #2
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003110:	f023 030f 	bic.w	r3, r3, #15
 8003114:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2202      	movs	r2, #2
 800311c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d060      	beq.n	80031e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d102      	bne.n	8003134 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800312e:	2310      	movs	r3, #16
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	e001      	b.n	8003138 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003134:	2320      	movs	r3, #32
 8003136:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b20      	cmp	r3, #32
 800313e:	d802      	bhi.n	8003146 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003146:	2001      	movs	r0, #1
 8003148:	f001 f9d8 	bl	80044fc <HAL_RCCEx_GetPeriphCLKFreq>
 800314c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003156:	d125      	bne.n	80031a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d010      	beq.n	8003182 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	fbb2 f2f3 	udiv	r2, r2, r3
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	461a      	mov	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	fbb2 f3f3 	udiv	r3, r2, r3
 800317c:	3305      	adds	r3, #5
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	e01f      	b.n	80031c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	fbb2 f2f3 	udiv	r2, r2, r3
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	461a      	mov	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	fbb2 f3f3 	udiv	r3, r2, r3
 800319e:	3305      	adds	r3, #5
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	e00e      	b.n	80031c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	461a      	mov	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80031be:	3305      	adds	r3, #5
 80031c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4a5c      	ldr	r2, [pc, #368]	; (8003338 <HAL_I2S_Init+0x270>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	08db      	lsrs	r3, r3, #3
 80031cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	085b      	lsrs	r3, r3, #1
 80031de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	021b      	lsls	r3, r3, #8
 80031e4:	61bb      	str	r3, [r7, #24]
 80031e6:	e003      	b.n	80031f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031e8:	2302      	movs	r3, #2
 80031ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d902      	bls.n	80031fc <HAL_I2S_Init+0x134>
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	2bff      	cmp	r3, #255	; 0xff
 80031fa:	d907      	bls.n	800320c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003200:	f043 0210 	orr.w	r2, r3, #16
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e08f      	b.n	800332c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	ea42 0103 	orr.w	r1, r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	430a      	orrs	r2, r1
 800321e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800322a:	f023 030f 	bic.w	r3, r3, #15
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6851      	ldr	r1, [r2, #4]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6892      	ldr	r2, [r2, #8]
 8003236:	4311      	orrs	r1, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	68d2      	ldr	r2, [r2, #12]
 800323c:	4311      	orrs	r1, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6992      	ldr	r2, [r2, #24]
 8003242:	430a      	orrs	r2, r1
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800324e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d161      	bne.n	800331c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a38      	ldr	r2, [pc, #224]	; (800333c <HAL_I2S_Init+0x274>)
 800325c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a37      	ldr	r2, [pc, #220]	; (8003340 <HAL_I2S_Init+0x278>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d101      	bne.n	800326c <HAL_I2S_Init+0x1a4>
 8003268:	4b36      	ldr	r3, [pc, #216]	; (8003344 <HAL_I2S_Init+0x27c>)
 800326a:	e001      	b.n	8003270 <HAL_I2S_Init+0x1a8>
 800326c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	4932      	ldr	r1, [pc, #200]	; (8003340 <HAL_I2S_Init+0x278>)
 8003278:	428a      	cmp	r2, r1
 800327a:	d101      	bne.n	8003280 <HAL_I2S_Init+0x1b8>
 800327c:	4a31      	ldr	r2, [pc, #196]	; (8003344 <HAL_I2S_Init+0x27c>)
 800327e:	e001      	b.n	8003284 <HAL_I2S_Init+0x1bc>
 8003280:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003284:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003288:	f023 030f 	bic.w	r3, r3, #15
 800328c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a2b      	ldr	r2, [pc, #172]	; (8003340 <HAL_I2S_Init+0x278>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d101      	bne.n	800329c <HAL_I2S_Init+0x1d4>
 8003298:	4b2a      	ldr	r3, [pc, #168]	; (8003344 <HAL_I2S_Init+0x27c>)
 800329a:	e001      	b.n	80032a0 <HAL_I2S_Init+0x1d8>
 800329c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032a0:	2202      	movs	r2, #2
 80032a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a25      	ldr	r2, [pc, #148]	; (8003340 <HAL_I2S_Init+0x278>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d101      	bne.n	80032b2 <HAL_I2S_Init+0x1ea>
 80032ae:	4b25      	ldr	r3, [pc, #148]	; (8003344 <HAL_I2S_Init+0x27c>)
 80032b0:	e001      	b.n	80032b6 <HAL_I2S_Init+0x1ee>
 80032b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c2:	d003      	beq.n	80032cc <HAL_I2S_Init+0x204>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d103      	bne.n	80032d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80032cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	e001      	b.n	80032d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80032d4:	2300      	movs	r3, #0
 80032d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032e2:	4313      	orrs	r3, r2
 80032e4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032ec:	4313      	orrs	r3, r2
 80032ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032f6:	4313      	orrs	r3, r2
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	897b      	ldrh	r3, [r7, #10]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	b29b      	uxth	r3, r3
 8003300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003304:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a0d      	ldr	r2, [pc, #52]	; (8003340 <HAL_I2S_Init+0x278>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d101      	bne.n	8003314 <HAL_I2S_Init+0x24c>
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <HAL_I2S_Init+0x27c>)
 8003312:	e001      	b.n	8003318 <HAL_I2S_Init+0x250>
 8003314:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003318:	897a      	ldrh	r2, [r7, #10]
 800331a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3720      	adds	r7, #32
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	0800343f 	.word	0x0800343f
 8003338:	cccccccd 	.word	0xcccccccd
 800333c:	08003555 	.word	0x08003555
 8003340:	40003800 	.word	0x40003800
 8003344:	40003400 	.word	0x40003400

08003348 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	881a      	ldrh	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	1c9a      	adds	r2, r3, #2
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10e      	bne.n	80033d8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033c8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff ffb8 	bl	8003348 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033d8:	bf00      	nop
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	b292      	uxth	r2, r2
 80033f4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	1c9a      	adds	r2, r3, #2
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10e      	bne.n	8003436 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003426:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff ff93 	bl	800335c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b086      	sub	sp, #24
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b04      	cmp	r3, #4
 8003458:	d13a      	bne.n	80034d0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b01      	cmp	r3, #1
 8003462:	d109      	bne.n	8003478 <I2S_IRQHandler+0x3a>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346e:	2b40      	cmp	r3, #64	; 0x40
 8003470:	d102      	bne.n	8003478 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff ffb4 	bl	80033e0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347e:	2b40      	cmp	r3, #64	; 0x40
 8003480:	d126      	bne.n	80034d0 <I2S_IRQHandler+0x92>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b20      	cmp	r3, #32
 800348e:	d11f      	bne.n	80034d0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800349e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034a0:	2300      	movs	r3, #0
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f043 0202 	orr.w	r2, r3, #2
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff ff50 	bl	8003370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d136      	bne.n	800354a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d109      	bne.n	80034fa <I2S_IRQHandler+0xbc>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f0:	2b80      	cmp	r3, #128	; 0x80
 80034f2:	d102      	bne.n	80034fa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff ff45 	bl	8003384 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b08      	cmp	r3, #8
 8003502:	d122      	bne.n	800354a <I2S_IRQHandler+0x10c>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b20      	cmp	r3, #32
 8003510:	d11b      	bne.n	800354a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003520:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353c:	f043 0204 	orr.w	r2, r3, #4
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7ff ff13 	bl	8003370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800354a:	bf00      	nop
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a92      	ldr	r2, [pc, #584]	; (80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d101      	bne.n	8003572 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800356e:	4b92      	ldr	r3, [pc, #584]	; (80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003570:	e001      	b.n	8003576 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003572:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a8b      	ldr	r2, [pc, #556]	; (80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d101      	bne.n	8003590 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800358c:	4b8a      	ldr	r3, [pc, #552]	; (80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800358e:	e001      	b.n	8003594 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003590:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a0:	d004      	beq.n	80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f040 8099 	bne.w	80036de <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d107      	bne.n	80035c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f925 	bl	8003810 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d107      	bne.n	80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f9c8 	bl	8003970 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b40      	cmp	r3, #64	; 0x40
 80035e8:	d13a      	bne.n	8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d035      	beq.n	8003660 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a6e      	ldr	r2, [pc, #440]	; (80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d101      	bne.n	8003602 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80035fe:	4b6e      	ldr	r3, [pc, #440]	; (80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003600:	e001      	b.n	8003606 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003602:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4969      	ldr	r1, [pc, #420]	; (80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800360e:	428b      	cmp	r3, r1
 8003610:	d101      	bne.n	8003616 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003612:	4b69      	ldr	r3, [pc, #420]	; (80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003614:	e001      	b.n	800361a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003616:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800361a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800361e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800362e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	f043 0202 	orr.w	r2, r3, #2
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff fe88 	bl	8003370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b08      	cmp	r3, #8
 8003668:	f040 80c3 	bne.w	80037f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 80bd 	beq.w	80037f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003686:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a49      	ldr	r2, [pc, #292]	; (80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d101      	bne.n	8003696 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003692:	4b49      	ldr	r3, [pc, #292]	; (80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003694:	e001      	b.n	800369a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003696:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4944      	ldr	r1, [pc, #272]	; (80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036a2:	428b      	cmp	r3, r1
 80036a4:	d101      	bne.n	80036aa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036a6:	4b44      	ldr	r3, [pc, #272]	; (80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036a8:	e001      	b.n	80036ae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036b2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036b4:	2300      	movs	r3, #0
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	f043 0204 	orr.w	r2, r3, #4
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff fe4a 	bl	8003370 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036dc:	e089      	b.n	80037f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d107      	bne.n	80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f8be 	bl	8003874 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d107      	bne.n	8003712 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f8fd 	bl	800390c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b40      	cmp	r3, #64	; 0x40
 800371a:	d12f      	bne.n	800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b00      	cmp	r3, #0
 8003724:	d02a      	beq.n	800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003734:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a1e      	ldr	r2, [pc, #120]	; (80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d101      	bne.n	8003744 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003740:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003742:	e001      	b.n	8003748 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003744:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4919      	ldr	r1, [pc, #100]	; (80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003750:	428b      	cmp	r3, r1
 8003752:	d101      	bne.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003754:	4b18      	ldr	r3, [pc, #96]	; (80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003756:	e001      	b.n	800375c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003758:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800375c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003760:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	f043 0202 	orr.w	r2, r3, #2
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff fdfa 	bl	8003370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b08      	cmp	r3, #8
 8003784:	d136      	bne.n	80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b00      	cmp	r3, #0
 800378e:	d031      	beq.n	80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a07      	ldr	r2, [pc, #28]	; (80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d101      	bne.n	800379e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800379a:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800379c:	e001      	b.n	80037a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800379e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4902      	ldr	r1, [pc, #8]	; (80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037aa:	428b      	cmp	r3, r1
 80037ac:	d106      	bne.n	80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80037ae:	4b02      	ldr	r3, [pc, #8]	; (80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037b0:	e006      	b.n	80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80037b2:	bf00      	nop
 80037b4:	40003800 	.word	0x40003800
 80037b8:	40003400 	.word	0x40003400
 80037bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037c4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	f043 0204 	orr.w	r2, r3, #4
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff fdc0 	bl	8003370 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037f0:	e000      	b.n	80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037f2:	bf00      	nop
}
 80037f4:	bf00      	nop
 80037f6:	3720      	adds	r7, #32
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	1c99      	adds	r1, r3, #2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6251      	str	r1, [r2, #36]	; 0x24
 8003822:	881a      	ldrh	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d113      	bne.n	800386a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003850:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003856:	b29b      	uxth	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d106      	bne.n	800386a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff ffc9 	bl	80037fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	1c99      	adds	r1, r3, #2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6251      	str	r1, [r2, #36]	; 0x24
 8003886:	8819      	ldrh	r1, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <I2SEx_TxISR_I2SExt+0x90>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d101      	bne.n	8003896 <I2SEx_TxISR_I2SExt+0x22>
 8003892:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <I2SEx_TxISR_I2SExt+0x94>)
 8003894:	e001      	b.n	800389a <I2SEx_TxISR_I2SExt+0x26>
 8003896:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800389a:	460a      	mov	r2, r1
 800389c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d121      	bne.n	80038fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a12      	ldr	r2, [pc, #72]	; (8003904 <I2SEx_TxISR_I2SExt+0x90>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d101      	bne.n	80038c4 <I2SEx_TxISR_I2SExt+0x50>
 80038c0:	4b11      	ldr	r3, [pc, #68]	; (8003908 <I2SEx_TxISR_I2SExt+0x94>)
 80038c2:	e001      	b.n	80038c8 <I2SEx_TxISR_I2SExt+0x54>
 80038c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	490d      	ldr	r1, [pc, #52]	; (8003904 <I2SEx_TxISR_I2SExt+0x90>)
 80038d0:	428b      	cmp	r3, r1
 80038d2:	d101      	bne.n	80038d8 <I2SEx_TxISR_I2SExt+0x64>
 80038d4:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <I2SEx_TxISR_I2SExt+0x94>)
 80038d6:	e001      	b.n	80038dc <I2SEx_TxISR_I2SExt+0x68>
 80038d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff ff81 	bl	80037fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40003800 	.word	0x40003800
 8003908:	40003400 	.word	0x40003400

0800390c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68d8      	ldr	r0, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	1c99      	adds	r1, r3, #2
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003924:	b282      	uxth	r2, r0
 8003926:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d113      	bne.n	8003968 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800394e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7ff ff4a 	bl	80037fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003968:	bf00      	nop
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a20      	ldr	r2, [pc, #128]	; (8003a00 <I2SEx_RxISR_I2SExt+0x90>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d101      	bne.n	8003986 <I2SEx_RxISR_I2SExt+0x16>
 8003982:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <I2SEx_RxISR_I2SExt+0x94>)
 8003984:	e001      	b.n	800398a <I2SEx_RxISR_I2SExt+0x1a>
 8003986:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800398a:	68d8      	ldr	r0, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	1c99      	adds	r1, r3, #2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003996:	b282      	uxth	r2, r0
 8003998:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d121      	bne.n	80039f6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a12      	ldr	r2, [pc, #72]	; (8003a00 <I2SEx_RxISR_I2SExt+0x90>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d101      	bne.n	80039c0 <I2SEx_RxISR_I2SExt+0x50>
 80039bc:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <I2SEx_RxISR_I2SExt+0x94>)
 80039be:	e001      	b.n	80039c4 <I2SEx_RxISR_I2SExt+0x54>
 80039c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	490d      	ldr	r1, [pc, #52]	; (8003a00 <I2SEx_RxISR_I2SExt+0x90>)
 80039cc:	428b      	cmp	r3, r1
 80039ce:	d101      	bne.n	80039d4 <I2SEx_RxISR_I2SExt+0x64>
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <I2SEx_RxISR_I2SExt+0x94>)
 80039d2:	e001      	b.n	80039d8 <I2SEx_RxISR_I2SExt+0x68>
 80039d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039dc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d106      	bne.n	80039f6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff ff03 	bl	80037fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40003800 	.word	0x40003800
 8003a04:	40003400 	.word	0x40003400

08003a08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e267      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d075      	beq.n	8003b12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a26:	4b88      	ldr	r3, [pc, #544]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d00c      	beq.n	8003a4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a32:	4b85      	ldr	r3, [pc, #532]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d112      	bne.n	8003a64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a3e:	4b82      	ldr	r3, [pc, #520]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a4a:	d10b      	bne.n	8003a64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4c:	4b7e      	ldr	r3, [pc, #504]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d05b      	beq.n	8003b10 <HAL_RCC_OscConfig+0x108>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d157      	bne.n	8003b10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e242      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6c:	d106      	bne.n	8003a7c <HAL_RCC_OscConfig+0x74>
 8003a6e:	4b76      	ldr	r3, [pc, #472]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a75      	ldr	r2, [pc, #468]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	e01d      	b.n	8003ab8 <HAL_RCC_OscConfig+0xb0>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x98>
 8003a86:	4b70      	ldr	r3, [pc, #448]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a6f      	ldr	r2, [pc, #444]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	4b6d      	ldr	r3, [pc, #436]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a6c      	ldr	r2, [pc, #432]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e00b      	b.n	8003ab8 <HAL_RCC_OscConfig+0xb0>
 8003aa0:	4b69      	ldr	r3, [pc, #420]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a68      	ldr	r2, [pc, #416]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4b66      	ldr	r3, [pc, #408]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a65      	ldr	r2, [pc, #404]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d013      	beq.n	8003ae8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac0:	f7fd faa2 	bl	8001008 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ac8:	f7fd fa9e 	bl	8001008 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b64      	cmp	r3, #100	; 0x64
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e207      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	4b5b      	ldr	r3, [pc, #364]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0xc0>
 8003ae6:	e014      	b.n	8003b12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae8:	f7fd fa8e 	bl	8001008 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af0:	f7fd fa8a 	bl	8001008 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b64      	cmp	r3, #100	; 0x64
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e1f3      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b02:	4b51      	ldr	r3, [pc, #324]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f0      	bne.n	8003af0 <HAL_RCC_OscConfig+0xe8>
 8003b0e:	e000      	b.n	8003b12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d063      	beq.n	8003be6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b1e:	4b4a      	ldr	r3, [pc, #296]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00b      	beq.n	8003b42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b2a:	4b47      	ldr	r3, [pc, #284]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d11c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b36:	4b44      	ldr	r3, [pc, #272]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d116      	bne.n	8003b70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b42:	4b41      	ldr	r3, [pc, #260]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_RCC_OscConfig+0x152>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d001      	beq.n	8003b5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e1c7      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5a:	4b3b      	ldr	r3, [pc, #236]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4937      	ldr	r1, [pc, #220]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6e:	e03a      	b.n	8003be6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d020      	beq.n	8003bba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b78:	4b34      	ldr	r3, [pc, #208]	; (8003c4c <HAL_RCC_OscConfig+0x244>)
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7e:	f7fd fa43 	bl	8001008 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b86:	f7fd fa3f 	bl	8001008 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e1a8      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b98:	4b2b      	ldr	r3, [pc, #172]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba4:	4b28      	ldr	r3, [pc, #160]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4925      	ldr	r1, [pc, #148]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	600b      	str	r3, [r1, #0]
 8003bb8:	e015      	b.n	8003be6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bba:	4b24      	ldr	r3, [pc, #144]	; (8003c4c <HAL_RCC_OscConfig+0x244>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc0:	f7fd fa22 	bl	8001008 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc8:	f7fd fa1e 	bl	8001008 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e187      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bda:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d036      	beq.n	8003c60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d016      	beq.n	8003c28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bfa:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <HAL_RCC_OscConfig+0x248>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c00:	f7fd fa02 	bl	8001008 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c08:	f7fd f9fe 	bl	8001008 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e167      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x200>
 8003c26:	e01b      	b.n	8003c60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c28:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <HAL_RCC_OscConfig+0x248>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2e:	f7fd f9eb 	bl	8001008 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c34:	e00e      	b.n	8003c54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c36:	f7fd f9e7 	bl	8001008 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d907      	bls.n	8003c54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e150      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	42470000 	.word	0x42470000
 8003c50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c54:	4b88      	ldr	r3, [pc, #544]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1ea      	bne.n	8003c36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8097 	beq.w	8003d9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c72:	4b81      	ldr	r3, [pc, #516]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10f      	bne.n	8003c9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	4b7d      	ldr	r3, [pc, #500]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	4a7c      	ldr	r2, [pc, #496]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c8e:	4b7a      	ldr	r3, [pc, #488]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9e:	4b77      	ldr	r3, [pc, #476]	; (8003e7c <HAL_RCC_OscConfig+0x474>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d118      	bne.n	8003cdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003caa:	4b74      	ldr	r3, [pc, #464]	; (8003e7c <HAL_RCC_OscConfig+0x474>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a73      	ldr	r2, [pc, #460]	; (8003e7c <HAL_RCC_OscConfig+0x474>)
 8003cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb6:	f7fd f9a7 	bl	8001008 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cbe:	f7fd f9a3 	bl	8001008 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e10c      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd0:	4b6a      	ldr	r3, [pc, #424]	; (8003e7c <HAL_RCC_OscConfig+0x474>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d106      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x2ea>
 8003ce4:	4b64      	ldr	r3, [pc, #400]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	4a63      	ldr	r2, [pc, #396]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf0:	e01c      	b.n	8003d2c <HAL_RCC_OscConfig+0x324>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b05      	cmp	r3, #5
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x30c>
 8003cfa:	4b5f      	ldr	r3, [pc, #380]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	4a5e      	ldr	r2, [pc, #376]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d00:	f043 0304 	orr.w	r3, r3, #4
 8003d04:	6713      	str	r3, [r2, #112]	; 0x70
 8003d06:	4b5c      	ldr	r3, [pc, #368]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0a:	4a5b      	ldr	r2, [pc, #364]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	6713      	str	r3, [r2, #112]	; 0x70
 8003d12:	e00b      	b.n	8003d2c <HAL_RCC_OscConfig+0x324>
 8003d14:	4b58      	ldr	r3, [pc, #352]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	4a57      	ldr	r2, [pc, #348]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d1a:	f023 0301 	bic.w	r3, r3, #1
 8003d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d20:	4b55      	ldr	r3, [pc, #340]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d24:	4a54      	ldr	r2, [pc, #336]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d26:	f023 0304 	bic.w	r3, r3, #4
 8003d2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d015      	beq.n	8003d60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d34:	f7fd f968 	bl	8001008 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3a:	e00a      	b.n	8003d52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d3c:	f7fd f964 	bl	8001008 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e0cb      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d52:	4b49      	ldr	r3, [pc, #292]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0ee      	beq.n	8003d3c <HAL_RCC_OscConfig+0x334>
 8003d5e:	e014      	b.n	8003d8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d60:	f7fd f952 	bl	8001008 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d68:	f7fd f94e 	bl	8001008 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e0b5      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7e:	4b3e      	ldr	r3, [pc, #248]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1ee      	bne.n	8003d68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d8a:	7dfb      	ldrb	r3, [r7, #23]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d105      	bne.n	8003d9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d90:	4b39      	ldr	r3, [pc, #228]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	4a38      	ldr	r2, [pc, #224]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 80a1 	beq.w	8003ee8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003da6:	4b34      	ldr	r3, [pc, #208]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d05c      	beq.n	8003e6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d141      	bne.n	8003e3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dba:	4b31      	ldr	r3, [pc, #196]	; (8003e80 <HAL_RCC_OscConfig+0x478>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc0:	f7fd f922 	bl	8001008 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc8:	f7fd f91e 	bl	8001008 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e087      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dda:	4b27      	ldr	r3, [pc, #156]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69da      	ldr	r2, [r3, #28]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	019b      	lsls	r3, r3, #6
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	085b      	lsrs	r3, r3, #1
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	041b      	lsls	r3, r3, #16
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	061b      	lsls	r3, r3, #24
 8003e0a:	491b      	ldr	r1, [pc, #108]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e10:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <HAL_RCC_OscConfig+0x478>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e16:	f7fd f8f7 	bl	8001008 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e1e:	f7fd f8f3 	bl	8001008 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e05c      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x416>
 8003e3c:	e054      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3e:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <HAL_RCC_OscConfig+0x478>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e44:	f7fd f8e0 	bl	8001008 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4c:	f7fd f8dc 	bl	8001008 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e045      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_RCC_OscConfig+0x470>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x444>
 8003e6a:	e03d      	b.n	8003ee8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d107      	bne.n	8003e84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e038      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40007000 	.word	0x40007000
 8003e80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e84:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <HAL_RCC_OscConfig+0x4ec>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d028      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d121      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d11a      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d111      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d107      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d001      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800

08003ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0cc      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f0c:	4b68      	ldr	r3, [pc, #416]	; (80040b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d90c      	bls.n	8003f34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1a:	4b65      	ldr	r3, [pc, #404]	; (80040b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f22:	4b63      	ldr	r3, [pc, #396]	; (80040b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0b8      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d020      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f4c:	4b59      	ldr	r3, [pc, #356]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	4a58      	ldr	r2, [pc, #352]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f64:	4b53      	ldr	r3, [pc, #332]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	4a52      	ldr	r2, [pc, #328]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f70:	4b50      	ldr	r3, [pc, #320]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	494d      	ldr	r1, [pc, #308]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d044      	beq.n	8004018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d107      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f96:	4b47      	ldr	r3, [pc, #284]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d119      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e07f      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d003      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d107      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb6:	4b3f      	ldr	r3, [pc, #252]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d109      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e06f      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc6:	4b3b      	ldr	r3, [pc, #236]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e067      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fd6:	4b37      	ldr	r3, [pc, #220]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f023 0203 	bic.w	r2, r3, #3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	4934      	ldr	r1, [pc, #208]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fe8:	f7fd f80e 	bl	8001008 <HAL_GetTick>
 8003fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fee:	e00a      	b.n	8004006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff0:	f7fd f80a 	bl	8001008 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e04f      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004006:	4b2b      	ldr	r3, [pc, #172]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 020c 	and.w	r2, r3, #12
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	429a      	cmp	r2, r3
 8004016:	d1eb      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004018:	4b25      	ldr	r3, [pc, #148]	; (80040b0 <HAL_RCC_ClockConfig+0x1b8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d20c      	bcs.n	8004040 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004026:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800402e:	4b20      	ldr	r3, [pc, #128]	; (80040b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d001      	beq.n	8004040 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e032      	b.n	80040a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800404c:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4916      	ldr	r1, [pc, #88]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	4313      	orrs	r3, r2
 800405c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d009      	beq.n	800407e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800406a:	4b12      	ldr	r3, [pc, #72]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	490e      	ldr	r1, [pc, #56]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	4313      	orrs	r3, r2
 800407c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800407e:	f000 f821 	bl	80040c4 <HAL_RCC_GetSysClockFreq>
 8004082:	4602      	mov	r2, r0
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	091b      	lsrs	r3, r3, #4
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	490a      	ldr	r1, [pc, #40]	; (80040b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004090:	5ccb      	ldrb	r3, [r1, r3]
 8004092:	fa22 f303 	lsr.w	r3, r2, r3
 8004096:	4a09      	ldr	r2, [pc, #36]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8004098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800409a:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fc ff6e 	bl	8000f80 <HAL_InitTick>

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40023c00 	.word	0x40023c00
 80040b4:	40023800 	.word	0x40023800
 80040b8:	080086dc 	.word	0x080086dc
 80040bc:	20000000 	.word	0x20000000
 80040c0:	20000004 	.word	0x20000004

080040c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040c8:	b094      	sub	sp, #80	; 0x50
 80040ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	647b      	str	r3, [r7, #68]	; 0x44
 80040d0:	2300      	movs	r3, #0
 80040d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d4:	2300      	movs	r3, #0
 80040d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040dc:	4b79      	ldr	r3, [pc, #484]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 030c 	and.w	r3, r3, #12
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d00d      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0x40>
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	f200 80e1 	bhi.w	80042b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <HAL_RCC_GetSysClockFreq+0x34>
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d003      	beq.n	80040fe <HAL_RCC_GetSysClockFreq+0x3a>
 80040f6:	e0db      	b.n	80042b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040f8:	4b73      	ldr	r3, [pc, #460]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80040fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80040fc:	e0db      	b.n	80042b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040fe:	4b73      	ldr	r3, [pc, #460]	; (80042cc <HAL_RCC_GetSysClockFreq+0x208>)
 8004100:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004102:	e0d8      	b.n	80042b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004104:	4b6f      	ldr	r3, [pc, #444]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800410c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800410e:	4b6d      	ldr	r3, [pc, #436]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d063      	beq.n	80041e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800411a:	4b6a      	ldr	r3, [pc, #424]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	099b      	lsrs	r3, r3, #6
 8004120:	2200      	movs	r2, #0
 8004122:	63bb      	str	r3, [r7, #56]	; 0x38
 8004124:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800412c:	633b      	str	r3, [r7, #48]	; 0x30
 800412e:	2300      	movs	r3, #0
 8004130:	637b      	str	r3, [r7, #52]	; 0x34
 8004132:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004136:	4622      	mov	r2, r4
 8004138:	462b      	mov	r3, r5
 800413a:	f04f 0000 	mov.w	r0, #0
 800413e:	f04f 0100 	mov.w	r1, #0
 8004142:	0159      	lsls	r1, r3, #5
 8004144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004148:	0150      	lsls	r0, r2, #5
 800414a:	4602      	mov	r2, r0
 800414c:	460b      	mov	r3, r1
 800414e:	4621      	mov	r1, r4
 8004150:	1a51      	subs	r1, r2, r1
 8004152:	6139      	str	r1, [r7, #16]
 8004154:	4629      	mov	r1, r5
 8004156:	eb63 0301 	sbc.w	r3, r3, r1
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	f04f 0300 	mov.w	r3, #0
 8004164:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004168:	4659      	mov	r1, fp
 800416a:	018b      	lsls	r3, r1, #6
 800416c:	4651      	mov	r1, sl
 800416e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004172:	4651      	mov	r1, sl
 8004174:	018a      	lsls	r2, r1, #6
 8004176:	4651      	mov	r1, sl
 8004178:	ebb2 0801 	subs.w	r8, r2, r1
 800417c:	4659      	mov	r1, fp
 800417e:	eb63 0901 	sbc.w	r9, r3, r1
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800418e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004196:	4690      	mov	r8, r2
 8004198:	4699      	mov	r9, r3
 800419a:	4623      	mov	r3, r4
 800419c:	eb18 0303 	adds.w	r3, r8, r3
 80041a0:	60bb      	str	r3, [r7, #8]
 80041a2:	462b      	mov	r3, r5
 80041a4:	eb49 0303 	adc.w	r3, r9, r3
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041b6:	4629      	mov	r1, r5
 80041b8:	024b      	lsls	r3, r1, #9
 80041ba:	4621      	mov	r1, r4
 80041bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041c0:	4621      	mov	r1, r4
 80041c2:	024a      	lsls	r2, r1, #9
 80041c4:	4610      	mov	r0, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ca:	2200      	movs	r2, #0
 80041cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041d4:	f7fb fff8 	bl	80001c8 <__aeabi_uldivmod>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4613      	mov	r3, r2
 80041de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041e0:	e058      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e2:	4b38      	ldr	r3, [pc, #224]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	099b      	lsrs	r3, r3, #6
 80041e8:	2200      	movs	r2, #0
 80041ea:	4618      	mov	r0, r3
 80041ec:	4611      	mov	r1, r2
 80041ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041f2:	623b      	str	r3, [r7, #32]
 80041f4:	2300      	movs	r3, #0
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
 80041f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041fc:	4642      	mov	r2, r8
 80041fe:	464b      	mov	r3, r9
 8004200:	f04f 0000 	mov.w	r0, #0
 8004204:	f04f 0100 	mov.w	r1, #0
 8004208:	0159      	lsls	r1, r3, #5
 800420a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800420e:	0150      	lsls	r0, r2, #5
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4641      	mov	r1, r8
 8004216:	ebb2 0a01 	subs.w	sl, r2, r1
 800421a:	4649      	mov	r1, r9
 800421c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800422c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004230:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004234:	ebb2 040a 	subs.w	r4, r2, sl
 8004238:	eb63 050b 	sbc.w	r5, r3, fp
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	00eb      	lsls	r3, r5, #3
 8004246:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800424a:	00e2      	lsls	r2, r4, #3
 800424c:	4614      	mov	r4, r2
 800424e:	461d      	mov	r5, r3
 8004250:	4643      	mov	r3, r8
 8004252:	18e3      	adds	r3, r4, r3
 8004254:	603b      	str	r3, [r7, #0]
 8004256:	464b      	mov	r3, r9
 8004258:	eb45 0303 	adc.w	r3, r5, r3
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	e9d7 4500 	ldrd	r4, r5, [r7]
 800426a:	4629      	mov	r1, r5
 800426c:	028b      	lsls	r3, r1, #10
 800426e:	4621      	mov	r1, r4
 8004270:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004274:	4621      	mov	r1, r4
 8004276:	028a      	lsls	r2, r1, #10
 8004278:	4610      	mov	r0, r2
 800427a:	4619      	mov	r1, r3
 800427c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800427e:	2200      	movs	r2, #0
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	61fa      	str	r2, [r7, #28]
 8004284:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004288:	f7fb ff9e 	bl	80001c8 <__aeabi_uldivmod>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4613      	mov	r3, r2
 8004292:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004294:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	0c1b      	lsrs	r3, r3, #16
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	3301      	adds	r3, #1
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042ae:	e002      	b.n	80042b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042b0:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80042b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3750      	adds	r7, #80	; 0x50
 80042bc:	46bd      	mov	sp, r7
 80042be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042c2:	bf00      	nop
 80042c4:	40023800 	.word	0x40023800
 80042c8:	00f42400 	.word	0x00f42400
 80042cc:	007a1200 	.word	0x007a1200

080042d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042d4:	4b03      	ldr	r3, [pc, #12]	; (80042e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042d6:	681b      	ldr	r3, [r3, #0]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20000000 	.word	0x20000000

080042e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042ec:	f7ff fff0 	bl	80042d0 <HAL_RCC_GetHCLKFreq>
 80042f0:	4602      	mov	r2, r0
 80042f2:	4b05      	ldr	r3, [pc, #20]	; (8004308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	0a9b      	lsrs	r3, r3, #10
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	4903      	ldr	r1, [pc, #12]	; (800430c <HAL_RCC_GetPCLK1Freq+0x24>)
 80042fe:	5ccb      	ldrb	r3, [r1, r3]
 8004300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004304:	4618      	mov	r0, r3
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40023800 	.word	0x40023800
 800430c:	080086ec 	.word	0x080086ec

08004310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004314:	f7ff ffdc 	bl	80042d0 <HAL_RCC_GetHCLKFreq>
 8004318:	4602      	mov	r2, r0
 800431a:	4b05      	ldr	r3, [pc, #20]	; (8004330 <HAL_RCC_GetPCLK2Freq+0x20>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	0b5b      	lsrs	r3, r3, #13
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	4903      	ldr	r1, [pc, #12]	; (8004334 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004326:	5ccb      	ldrb	r3, [r1, r3]
 8004328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800432c:	4618      	mov	r0, r3
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40023800 	.word	0x40023800
 8004334:	080086ec 	.word	0x080086ec

08004338 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d105      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800435c:	2b00      	cmp	r3, #0
 800435e:	d035      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004360:	4b62      	ldr	r3, [pc, #392]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004366:	f7fc fe4f 	bl	8001008 <HAL_GetTick>
 800436a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800436c:	e008      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800436e:	f7fc fe4b 	bl	8001008 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e0b0      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004380:	4b5b      	ldr	r3, [pc, #364]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1f0      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	019a      	lsls	r2, r3, #6
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	071b      	lsls	r3, r3, #28
 8004398:	4955      	ldr	r1, [pc, #340]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043a0:	4b52      	ldr	r3, [pc, #328]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043a6:	f7fc fe2f 	bl	8001008 <HAL_GetTick>
 80043aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043ac:	e008      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043ae:	f7fc fe2b 	bl	8001008 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e090      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043c0:	4b4b      	ldr	r3, [pc, #300]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0f0      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 8083 	beq.w	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	4b44      	ldr	r3, [pc, #272]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	4a43      	ldr	r2, [pc, #268]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ea:	4b41      	ldr	r3, [pc, #260]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043f6:	4b3f      	ldr	r3, [pc, #252]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a3e      	ldr	r2, [pc, #248]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004400:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004402:	f7fc fe01 	bl	8001008 <HAL_GetTick>
 8004406:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004408:	e008      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800440a:	f7fc fdfd 	bl	8001008 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e062      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800441c:	4b35      	ldr	r3, [pc, #212]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f0      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004428:	4b31      	ldr	r3, [pc, #196]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800442a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004430:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d02f      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	429a      	cmp	r2, r3
 8004444:	d028      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004446:	4b2a      	ldr	r3, [pc, #168]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004450:	4b29      	ldr	r3, [pc, #164]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004452:	2201      	movs	r2, #1
 8004454:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004456:	4b28      	ldr	r3, [pc, #160]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800445c:	4a24      	ldr	r2, [pc, #144]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004462:	4b23      	ldr	r3, [pc, #140]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b01      	cmp	r3, #1
 800446c:	d114      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800446e:	f7fc fdcb 	bl	8001008 <HAL_GetTick>
 8004472:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004474:	e00a      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004476:	f7fc fdc7 	bl	8001008 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	f241 3288 	movw	r2, #5000	; 0x1388
 8004484:	4293      	cmp	r3, r2
 8004486:	d901      	bls.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e02a      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448c:	4b18      	ldr	r3, [pc, #96]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0ee      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044a4:	d10d      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80044a6:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ba:	490d      	ldr	r1, [pc, #52]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	608b      	str	r3, [r1, #8]
 80044c0:	e005      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 80044c2:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	4a0a      	ldr	r2, [pc, #40]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044cc:	6093      	str	r3, [r2, #8]
 80044ce:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044da:	4905      	ldr	r1, [pc, #20]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	42470068 	.word	0x42470068
 80044f0:	40023800 	.word	0x40023800
 80044f4:	40007000 	.word	0x40007000
 80044f8:	42470e40 	.word	0x42470e40

080044fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d13e      	bne.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800451a:	4b23      	ldr	r3, [pc, #140]	; (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d12f      	bne.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004530:	4b1e      	ldr	r3, [pc, #120]	; (80045ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004532:	617b      	str	r3, [r7, #20]
          break;
 8004534:	e02f      	b.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004536:	4b1c      	ldr	r3, [pc, #112]	; (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004542:	d108      	bne.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004544:	4b18      	ldr	r3, [pc, #96]	; (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800454c:	4a18      	ldr	r2, [pc, #96]	; (80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800454e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	e007      	b.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004556:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800455e:	4a15      	ldr	r2, [pc, #84]	; (80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004560:	fbb2 f3f3 	udiv	r3, r2, r3
 8004564:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004566:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800456c:	099b      	lsrs	r3, r3, #6
 800456e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	fb02 f303 	mul.w	r3, r2, r3
 8004578:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800457a:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800457c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004580:	0f1b      	lsrs	r3, r3, #28
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	fbb2 f3f3 	udiv	r3, r2, r3
 800458c:	617b      	str	r3, [r7, #20]
          break;
 800458e:	e002      	b.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
          break;
 8004594:	bf00      	nop
        }
      }
      break;
 8004596:	bf00      	nop
    }
  }
  return frequency;
 8004598:	697b      	ldr	r3, [r7, #20]
}
 800459a:	4618      	mov	r0, r3
 800459c:	371c      	adds	r7, #28
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40023800 	.word	0x40023800
 80045ac:	00bb8000 	.word	0x00bb8000
 80045b0:	007a1200 	.word	0x007a1200
 80045b4:	00f42400 	.word	0x00f42400

080045b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e07b      	b.n	80046c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d108      	bne.n	80045e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045da:	d009      	beq.n	80045f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	61da      	str	r2, [r3, #28]
 80045e2:	e005      	b.n	80045f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fc fb60 	bl	8000cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004626:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004660:	431a      	orrs	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004674:	ea42 0103 	orr.w	r1, r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	0c1b      	lsrs	r3, r3, #16
 800468e:	f003 0104 	and.w	r1, r3, #4
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	f003 0210 	and.w	r2, r3, #16
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b082      	sub	sp, #8
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e03f      	b.n	800475c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d106      	bne.n	80046f6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7fc fb35 	bl	8000d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2224      	movs	r2, #36	; 0x24
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800470c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f938 	bl	8004984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	691a      	ldr	r2, [r3, #16]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004722:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695a      	ldr	r2, [r3, #20]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004732:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004742:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08a      	sub	sp, #40	; 0x28
 8004768:	af02      	add	r7, sp, #8
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	4613      	mov	r3, r2
 8004772:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b20      	cmp	r3, #32
 8004782:	f040 808c 	bne.w	800489e <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <HAL_UART_Receive+0x2e>
 800478c:	88fb      	ldrh	r3, [r7, #6]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e084      	b.n	80048a0 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_UART_Receive+0x40>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e07d      	b.n	80048a0 <HAL_UART_Receive+0x13c>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2222      	movs	r2, #34	; 0x22
 80047b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047c0:	f7fc fc22 	bl	8001008 <HAL_GetTick>
 80047c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	88fa      	ldrh	r2, [r7, #6]
 80047ca:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	88fa      	ldrh	r2, [r7, #6]
 80047d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047da:	d108      	bne.n	80047ee <HAL_UART_Receive+0x8a>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d104      	bne.n	80047ee <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	61bb      	str	r3, [r7, #24]
 80047ec:	e003      	b.n	80047f6 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80047fe:	e043      	b.n	8004888 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2200      	movs	r2, #0
 8004808:	2120      	movs	r1, #32
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 f84c 	bl	80048a8 <UART_WaitOnFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e042      	b.n	80048a0 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10c      	bne.n	800483a <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	b29b      	uxth	r3, r3
 8004828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800482c:	b29a      	uxth	r2, r3
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	3302      	adds	r3, #2
 8004836:	61bb      	str	r3, [r7, #24]
 8004838:	e01f      	b.n	800487a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004842:	d007      	beq.n	8004854 <HAL_UART_Receive+0xf0>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10a      	bne.n	8004862 <HAL_UART_Receive+0xfe>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d106      	bne.n	8004862 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	b2da      	uxtb	r2, r3
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	701a      	strb	r2, [r3, #0]
 8004860:	e008      	b.n	8004874 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800486e:	b2da      	uxtb	r2, r3
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	3301      	adds	r3, #1
 8004878:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1b6      	bne.n	8004800 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	e000      	b.n	80048a0 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800489e:	2302      	movs	r3, #2
  }
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3720      	adds	r7, #32
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b090      	sub	sp, #64	; 0x40
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	4613      	mov	r3, r2
 80048b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048b8:	e050      	b.n	800495c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d04c      	beq.n	800495c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d007      	beq.n	80048d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80048c8:	f7fc fb9e 	bl	8001008 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d241      	bcs.n	800495c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	330c      	adds	r3, #12
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	e853 3f00 	ldrex	r3, [r3]
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	330c      	adds	r3, #12
 80048f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048f8:	637a      	str	r2, [r7, #52]	; 0x34
 80048fa:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004900:	e841 2300 	strex	r3, r2, [r1]
 8004904:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e5      	bne.n	80048d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3314      	adds	r3, #20
 8004912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	e853 3f00 	ldrex	r3, [r3]
 800491a:	613b      	str	r3, [r7, #16]
   return(result);
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f023 0301 	bic.w	r3, r3, #1
 8004922:	63bb      	str	r3, [r7, #56]	; 0x38
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3314      	adds	r3, #20
 800492a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800492c:	623a      	str	r2, [r7, #32]
 800492e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004930:	69f9      	ldr	r1, [r7, #28]
 8004932:	6a3a      	ldr	r2, [r7, #32]
 8004934:	e841 2300 	strex	r3, r2, [r1]
 8004938:	61bb      	str	r3, [r7, #24]
   return(result);
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1e5      	bne.n	800490c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e00f      	b.n	800497c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4013      	ands	r3, r2
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	429a      	cmp	r2, r3
 800496a:	bf0c      	ite	eq
 800496c:	2301      	moveq	r3, #1
 800496e:	2300      	movne	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	429a      	cmp	r2, r3
 8004978:	d09f      	beq.n	80048ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3740      	adds	r7, #64	; 0x40
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004988:	b0c0      	sub	sp, #256	; 0x100
 800498a:	af00      	add	r7, sp, #0
 800498c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a0:	68d9      	ldr	r1, [r3, #12]
 80049a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	ea40 0301 	orr.w	r3, r0, r1
 80049ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049dc:	f021 010c 	bic.w	r1, r1, #12
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049ea:	430b      	orrs	r3, r1
 80049ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fe:	6999      	ldr	r1, [r3, #24]
 8004a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	ea40 0301 	orr.w	r3, r0, r1
 8004a0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	4b8f      	ldr	r3, [pc, #572]	; (8004c50 <UART_SetConfig+0x2cc>)
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d005      	beq.n	8004a24 <UART_SetConfig+0xa0>
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	4b8d      	ldr	r3, [pc, #564]	; (8004c54 <UART_SetConfig+0x2d0>)
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d104      	bne.n	8004a2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a24:	f7ff fc74 	bl	8004310 <HAL_RCC_GetPCLK2Freq>
 8004a28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a2c:	e003      	b.n	8004a36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a2e:	f7ff fc5b 	bl	80042e8 <HAL_RCC_GetPCLK1Freq>
 8004a32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a40:	f040 810c 	bne.w	8004c5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a56:	4622      	mov	r2, r4
 8004a58:	462b      	mov	r3, r5
 8004a5a:	1891      	adds	r1, r2, r2
 8004a5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a5e:	415b      	adcs	r3, r3
 8004a60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a66:	4621      	mov	r1, r4
 8004a68:	eb12 0801 	adds.w	r8, r2, r1
 8004a6c:	4629      	mov	r1, r5
 8004a6e:	eb43 0901 	adc.w	r9, r3, r1
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a86:	4690      	mov	r8, r2
 8004a88:	4699      	mov	r9, r3
 8004a8a:	4623      	mov	r3, r4
 8004a8c:	eb18 0303 	adds.w	r3, r8, r3
 8004a90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a94:	462b      	mov	r3, r5
 8004a96:	eb49 0303 	adc.w	r3, r9, r3
 8004a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004aaa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004aae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	18db      	adds	r3, r3, r3
 8004ab6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ab8:	4613      	mov	r3, r2
 8004aba:	eb42 0303 	adc.w	r3, r2, r3
 8004abe:	657b      	str	r3, [r7, #84]	; 0x54
 8004ac0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ac4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ac8:	f7fb fb7e 	bl	80001c8 <__aeabi_uldivmod>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4b61      	ldr	r3, [pc, #388]	; (8004c58 <UART_SetConfig+0x2d4>)
 8004ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	011c      	lsls	r4, r3, #4
 8004ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ae4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ae8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004aec:	4642      	mov	r2, r8
 8004aee:	464b      	mov	r3, r9
 8004af0:	1891      	adds	r1, r2, r2
 8004af2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004af4:	415b      	adcs	r3, r3
 8004af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004af8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004afc:	4641      	mov	r1, r8
 8004afe:	eb12 0a01 	adds.w	sl, r2, r1
 8004b02:	4649      	mov	r1, r9
 8004b04:	eb43 0b01 	adc.w	fp, r3, r1
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b1c:	4692      	mov	sl, r2
 8004b1e:	469b      	mov	fp, r3
 8004b20:	4643      	mov	r3, r8
 8004b22:	eb1a 0303 	adds.w	r3, sl, r3
 8004b26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b2a:	464b      	mov	r3, r9
 8004b2c:	eb4b 0303 	adc.w	r3, fp, r3
 8004b30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	18db      	adds	r3, r3, r3
 8004b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b4e:	4613      	mov	r3, r2
 8004b50:	eb42 0303 	adc.w	r3, r2, r3
 8004b54:	647b      	str	r3, [r7, #68]	; 0x44
 8004b56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b5e:	f7fb fb33 	bl	80001c8 <__aeabi_uldivmod>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4611      	mov	r1, r2
 8004b68:	4b3b      	ldr	r3, [pc, #236]	; (8004c58 <UART_SetConfig+0x2d4>)
 8004b6a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	2264      	movs	r2, #100	; 0x64
 8004b72:	fb02 f303 	mul.w	r3, r2, r3
 8004b76:	1acb      	subs	r3, r1, r3
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b7e:	4b36      	ldr	r3, [pc, #216]	; (8004c58 <UART_SetConfig+0x2d4>)
 8004b80:	fba3 2302 	umull	r2, r3, r3, r2
 8004b84:	095b      	lsrs	r3, r3, #5
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b8c:	441c      	add	r4, r3
 8004b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ba0:	4642      	mov	r2, r8
 8004ba2:	464b      	mov	r3, r9
 8004ba4:	1891      	adds	r1, r2, r2
 8004ba6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ba8:	415b      	adcs	r3, r3
 8004baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bb0:	4641      	mov	r1, r8
 8004bb2:	1851      	adds	r1, r2, r1
 8004bb4:	6339      	str	r1, [r7, #48]	; 0x30
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	414b      	adcs	r3, r1
 8004bba:	637b      	str	r3, [r7, #52]	; 0x34
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004bc8:	4659      	mov	r1, fp
 8004bca:	00cb      	lsls	r3, r1, #3
 8004bcc:	4651      	mov	r1, sl
 8004bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bd2:	4651      	mov	r1, sl
 8004bd4:	00ca      	lsls	r2, r1, #3
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4603      	mov	r3, r0
 8004bdc:	4642      	mov	r2, r8
 8004bde:	189b      	adds	r3, r3, r2
 8004be0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004be4:	464b      	mov	r3, r9
 8004be6:	460a      	mov	r2, r1
 8004be8:	eb42 0303 	adc.w	r3, r2, r3
 8004bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bfc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c04:	460b      	mov	r3, r1
 8004c06:	18db      	adds	r3, r3, r3
 8004c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	eb42 0303 	adc.w	r3, r2, r3
 8004c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c1a:	f7fb fad5 	bl	80001c8 <__aeabi_uldivmod>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <UART_SetConfig+0x2d4>)
 8004c24:	fba3 1302 	umull	r1, r3, r3, r2
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	2164      	movs	r1, #100	; 0x64
 8004c2c:	fb01 f303 	mul.w	r3, r1, r3
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	3332      	adds	r3, #50	; 0x32
 8004c36:	4a08      	ldr	r2, [pc, #32]	; (8004c58 <UART_SetConfig+0x2d4>)
 8004c38:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	f003 0207 	and.w	r2, r3, #7
 8004c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4422      	add	r2, r4
 8004c4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c4c:	e106      	b.n	8004e5c <UART_SetConfig+0x4d8>
 8004c4e:	bf00      	nop
 8004c50:	40011000 	.word	0x40011000
 8004c54:	40011400 	.word	0x40011400
 8004c58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c60:	2200      	movs	r2, #0
 8004c62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c6e:	4642      	mov	r2, r8
 8004c70:	464b      	mov	r3, r9
 8004c72:	1891      	adds	r1, r2, r2
 8004c74:	6239      	str	r1, [r7, #32]
 8004c76:	415b      	adcs	r3, r3
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c7e:	4641      	mov	r1, r8
 8004c80:	1854      	adds	r4, r2, r1
 8004c82:	4649      	mov	r1, r9
 8004c84:	eb43 0501 	adc.w	r5, r3, r1
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	00eb      	lsls	r3, r5, #3
 8004c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c96:	00e2      	lsls	r2, r4, #3
 8004c98:	4614      	mov	r4, r2
 8004c9a:	461d      	mov	r5, r3
 8004c9c:	4643      	mov	r3, r8
 8004c9e:	18e3      	adds	r3, r4, r3
 8004ca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ca4:	464b      	mov	r3, r9
 8004ca6:	eb45 0303 	adc.w	r3, r5, r3
 8004caa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004cca:	4629      	mov	r1, r5
 8004ccc:	008b      	lsls	r3, r1, #2
 8004cce:	4621      	mov	r1, r4
 8004cd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	008a      	lsls	r2, r1, #2
 8004cd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cdc:	f7fb fa74 	bl	80001c8 <__aeabi_uldivmod>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4b60      	ldr	r3, [pc, #384]	; (8004e68 <UART_SetConfig+0x4e4>)
 8004ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	011c      	lsls	r4, r3, #4
 8004cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cf8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d00:	4642      	mov	r2, r8
 8004d02:	464b      	mov	r3, r9
 8004d04:	1891      	adds	r1, r2, r2
 8004d06:	61b9      	str	r1, [r7, #24]
 8004d08:	415b      	adcs	r3, r3
 8004d0a:	61fb      	str	r3, [r7, #28]
 8004d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d10:	4641      	mov	r1, r8
 8004d12:	1851      	adds	r1, r2, r1
 8004d14:	6139      	str	r1, [r7, #16]
 8004d16:	4649      	mov	r1, r9
 8004d18:	414b      	adcs	r3, r1
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	f04f 0300 	mov.w	r3, #0
 8004d24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d28:	4659      	mov	r1, fp
 8004d2a:	00cb      	lsls	r3, r1, #3
 8004d2c:	4651      	mov	r1, sl
 8004d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d32:	4651      	mov	r1, sl
 8004d34:	00ca      	lsls	r2, r1, #3
 8004d36:	4610      	mov	r0, r2
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	189b      	adds	r3, r3, r2
 8004d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d44:	464b      	mov	r3, r9
 8004d46:	460a      	mov	r2, r1
 8004d48:	eb42 0303 	adc.w	r3, r2, r3
 8004d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d68:	4649      	mov	r1, r9
 8004d6a:	008b      	lsls	r3, r1, #2
 8004d6c:	4641      	mov	r1, r8
 8004d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d72:	4641      	mov	r1, r8
 8004d74:	008a      	lsls	r2, r1, #2
 8004d76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d7a:	f7fb fa25 	bl	80001c8 <__aeabi_uldivmod>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	4611      	mov	r1, r2
 8004d84:	4b38      	ldr	r3, [pc, #224]	; (8004e68 <UART_SetConfig+0x4e4>)
 8004d86:	fba3 2301 	umull	r2, r3, r3, r1
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	2264      	movs	r2, #100	; 0x64
 8004d8e:	fb02 f303 	mul.w	r3, r2, r3
 8004d92:	1acb      	subs	r3, r1, r3
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	3332      	adds	r3, #50	; 0x32
 8004d98:	4a33      	ldr	r2, [pc, #204]	; (8004e68 <UART_SetConfig+0x4e4>)
 8004d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004da4:	441c      	add	r4, r3
 8004da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004daa:	2200      	movs	r2, #0
 8004dac:	673b      	str	r3, [r7, #112]	; 0x70
 8004dae:	677a      	str	r2, [r7, #116]	; 0x74
 8004db0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004db4:	4642      	mov	r2, r8
 8004db6:	464b      	mov	r3, r9
 8004db8:	1891      	adds	r1, r2, r2
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	415b      	adcs	r3, r3
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dc4:	4641      	mov	r1, r8
 8004dc6:	1851      	adds	r1, r2, r1
 8004dc8:	6039      	str	r1, [r7, #0]
 8004dca:	4649      	mov	r1, r9
 8004dcc:	414b      	adcs	r3, r1
 8004dce:	607b      	str	r3, [r7, #4]
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ddc:	4659      	mov	r1, fp
 8004dde:	00cb      	lsls	r3, r1, #3
 8004de0:	4651      	mov	r1, sl
 8004de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004de6:	4651      	mov	r1, sl
 8004de8:	00ca      	lsls	r2, r1, #3
 8004dea:	4610      	mov	r0, r2
 8004dec:	4619      	mov	r1, r3
 8004dee:	4603      	mov	r3, r0
 8004df0:	4642      	mov	r2, r8
 8004df2:	189b      	adds	r3, r3, r2
 8004df4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004df6:	464b      	mov	r3, r9
 8004df8:	460a      	mov	r2, r1
 8004dfa:	eb42 0303 	adc.w	r3, r2, r3
 8004dfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	663b      	str	r3, [r7, #96]	; 0x60
 8004e0a:	667a      	str	r2, [r7, #100]	; 0x64
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e18:	4649      	mov	r1, r9
 8004e1a:	008b      	lsls	r3, r1, #2
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e22:	4641      	mov	r1, r8
 8004e24:	008a      	lsls	r2, r1, #2
 8004e26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e2a:	f7fb f9cd 	bl	80001c8 <__aeabi_uldivmod>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4b0d      	ldr	r3, [pc, #52]	; (8004e68 <UART_SetConfig+0x4e4>)
 8004e34:	fba3 1302 	umull	r1, r3, r3, r2
 8004e38:	095b      	lsrs	r3, r3, #5
 8004e3a:	2164      	movs	r1, #100	; 0x64
 8004e3c:	fb01 f303 	mul.w	r3, r1, r3
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	3332      	adds	r3, #50	; 0x32
 8004e46:	4a08      	ldr	r2, [pc, #32]	; (8004e68 <UART_SetConfig+0x4e4>)
 8004e48:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	f003 020f 	and.w	r2, r3, #15
 8004e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4422      	add	r2, r4
 8004e5a:	609a      	str	r2, [r3, #8]
}
 8004e5c:	bf00      	nop
 8004e5e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e62:	46bd      	mov	sp, r7
 8004e64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e68:	51eb851f 	.word	0x51eb851f

08004e6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b084      	sub	sp, #16
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	f107 001c 	add.w	r0, r7, #28
 8004e7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d122      	bne.n	8004eca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d105      	bne.n	8004ebe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f9c0 	bl	8005244 <USB_CoreReset>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	73fb      	strb	r3, [r7, #15]
 8004ec8:	e01a      	b.n	8004f00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f9b4 	bl	8005244 <USB_CoreReset>
 8004edc:	4603      	mov	r3, r0
 8004ede:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ef2:	e005      	b.n	8004f00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d10b      	bne.n	8004f1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f043 0206 	orr.w	r2, r3, #6
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f043 0220 	orr.w	r2, r3, #32
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f2a:	b004      	add	sp, #16
 8004f2c:	4770      	bx	lr

08004f2e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f043 0201 	orr.w	r2, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f023 0201 	bic.w	r2, r3, #1
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b084      	sub	sp, #16
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f8e:	78fb      	ldrb	r3, [r7, #3]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d115      	bne.n	8004fc0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fa0:	2001      	movs	r0, #1
 8004fa2:	f7fc f83d 	bl	8001020 <HAL_Delay>
      ms++;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f93a 	bl	8005226 <USB_GetMode>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d01e      	beq.n	8004ff6 <USB_SetCurrentMode+0x84>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b31      	cmp	r3, #49	; 0x31
 8004fbc:	d9f0      	bls.n	8004fa0 <USB_SetCurrentMode+0x2e>
 8004fbe:	e01a      	b.n	8004ff6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d115      	bne.n	8004ff2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fd2:	2001      	movs	r0, #1
 8004fd4:	f7fc f824 	bl	8001020 <HAL_Delay>
      ms++;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f921 	bl	8005226 <USB_GetMode>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d005      	beq.n	8004ff6 <USB_SetCurrentMode+0x84>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b31      	cmp	r3, #49	; 0x31
 8004fee:	d9f0      	bls.n	8004fd2 <USB_SetCurrentMode+0x60>
 8004ff0:	e001      	b.n	8004ff6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e005      	b.n	8005002 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b32      	cmp	r3, #50	; 0x32
 8004ffa:	d101      	bne.n	8005000 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e000      	b.n	8005002 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	3301      	adds	r3, #1
 800501e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4a13      	ldr	r2, [pc, #76]	; (8005070 <USB_FlushTxFifo+0x64>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d901      	bls.n	800502c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e01b      	b.n	8005064 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	daf2      	bge.n	800501a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	019b      	lsls	r3, r3, #6
 800503c:	f043 0220 	orr.w	r2, r3, #32
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	3301      	adds	r3, #1
 8005048:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4a08      	ldr	r2, [pc, #32]	; (8005070 <USB_FlushTxFifo+0x64>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d901      	bls.n	8005056 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e006      	b.n	8005064 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b20      	cmp	r3, #32
 8005060:	d0f0      	beq.n	8005044 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	00030d40 	.word	0x00030d40

08005074 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3301      	adds	r3, #1
 8005084:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4a11      	ldr	r2, [pc, #68]	; (80050d0 <USB_FlushRxFifo+0x5c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d901      	bls.n	8005092 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e018      	b.n	80050c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	daf2      	bge.n	8005080 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2210      	movs	r2, #16
 80050a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3301      	adds	r3, #1
 80050a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4a08      	ldr	r2, [pc, #32]	; (80050d0 <USB_FlushRxFifo+0x5c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d901      	bls.n	80050b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e006      	b.n	80050c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	2b10      	cmp	r3, #16
 80050c0:	d0f0      	beq.n	80050a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	00030d40 	.word	0x00030d40

080050d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b089      	sub	sp, #36	; 0x24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	4611      	mov	r1, r2
 80050e0:	461a      	mov	r2, r3
 80050e2:	460b      	mov	r3, r1
 80050e4:	71fb      	strb	r3, [r7, #7]
 80050e6:	4613      	mov	r3, r2
 80050e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80050f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d123      	bne.n	8005142 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050fa:	88bb      	ldrh	r3, [r7, #4]
 80050fc:	3303      	adds	r3, #3
 80050fe:	089b      	lsrs	r3, r3, #2
 8005100:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005102:	2300      	movs	r3, #0
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	e018      	b.n	800513a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005108:	79fb      	ldrb	r3, [r7, #7]
 800510a:	031a      	lsls	r2, r3, #12
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	4413      	add	r3, r2
 8005110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005114:	461a      	mov	r2, r3
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	3301      	adds	r3, #1
 8005120:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	3301      	adds	r3, #1
 8005126:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	3301      	adds	r3, #1
 800512c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	3301      	adds	r3, #1
 8005132:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	3301      	adds	r3, #1
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	429a      	cmp	r2, r3
 8005140:	d3e2      	bcc.n	8005108 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3724      	adds	r7, #36	; 0x24
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005150:	b480      	push	{r7}
 8005152:	b08b      	sub	sp, #44	; 0x2c
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	089b      	lsrs	r3, r3, #2
 800516a:	b29b      	uxth	r3, r3
 800516c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800516e:	88fb      	ldrh	r3, [r7, #6]
 8005170:	f003 0303 	and.w	r3, r3, #3
 8005174:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005176:	2300      	movs	r3, #0
 8005178:	623b      	str	r3, [r7, #32]
 800517a:	e014      	b.n	80051a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	601a      	str	r2, [r3, #0]
    pDest++;
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	3301      	adds	r3, #1
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	3301      	adds	r3, #1
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	3301      	adds	r3, #1
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	3301      	adds	r3, #1
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	3301      	adds	r3, #1
 80051a4:	623b      	str	r3, [r7, #32]
 80051a6:	6a3a      	ldr	r2, [r7, #32]
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d3e6      	bcc.n	800517c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80051ae:	8bfb      	ldrh	r3, [r7, #30]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01e      	beq.n	80051f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051be:	461a      	mov	r2, r3
 80051c0:	f107 0310 	add.w	r3, r7, #16
 80051c4:	6812      	ldr	r2, [r2, #0]
 80051c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	fa22 f303 	lsr.w	r3, r2, r3
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	701a      	strb	r2, [r3, #0]
      i++;
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	3301      	adds	r3, #1
 80051de:	623b      	str	r3, [r7, #32]
      pDest++;
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	3301      	adds	r3, #1
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80051e6:	8bfb      	ldrh	r3, [r7, #30]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051ec:	8bfb      	ldrh	r3, [r7, #30]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1ea      	bne.n	80051c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	372c      	adds	r7, #44	; 0x2c
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4013      	ands	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005218:	68fb      	ldr	r3, [r7, #12]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	f003 0301 	and.w	r3, r3, #1
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
	...

08005244 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	3301      	adds	r3, #1
 8005254:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4a13      	ldr	r2, [pc, #76]	; (80052a8 <USB_CoreReset+0x64>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d901      	bls.n	8005262 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e01b      	b.n	800529a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	daf2      	bge.n	8005250 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f043 0201 	orr.w	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	3301      	adds	r3, #1
 800527e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4a09      	ldr	r2, [pc, #36]	; (80052a8 <USB_CoreReset+0x64>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d901      	bls.n	800528c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e006      	b.n	800529a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b01      	cmp	r3, #1
 8005296:	d0f0      	beq.n	800527a <USB_CoreReset+0x36>

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	00030d40 	.word	0x00030d40

080052ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052ac:	b084      	sub	sp, #16
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b086      	sub	sp, #24
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052cc:	461a      	mov	r2, r3
 80052ce:	2300      	movs	r3, #0
 80052d0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d018      	beq.n	8005334 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005304:	2b01      	cmp	r3, #1
 8005306:	d10a      	bne.n	800531e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005316:	f043 0304 	orr.w	r3, r3, #4
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	e014      	b.n	8005348 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800532c:	f023 0304 	bic.w	r3, r3, #4
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	e009      	b.n	8005348 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005342:	f023 0304 	bic.w	r3, r3, #4
 8005346:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005348:	2110      	movs	r1, #16
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff fe5e 	bl	800500c <USB_FlushTxFifo>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7ff fe8a 	bl	8005074 <USB_FlushRxFifo>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800536a:	2300      	movs	r3, #0
 800536c:	613b      	str	r3, [r7, #16]
 800536e:	e015      	b.n	800539c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4413      	add	r3, r2
 8005378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537c:	461a      	mov	r2, r3
 800537e:	f04f 33ff 	mov.w	r3, #4294967295
 8005382:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005390:	461a      	mov	r2, r3
 8005392:	2300      	movs	r3, #0
 8005394:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	3301      	adds	r3, #1
 800539a:	613b      	str	r3, [r7, #16]
 800539c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d3e5      	bcc.n	8005370 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f04f 32ff 	mov.w	r2, #4294967295
 80053b0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00b      	beq.n	80053d6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053c4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a13      	ldr	r2, [pc, #76]	; (8005418 <USB_HostInit+0x16c>)
 80053ca:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a13      	ldr	r2, [pc, #76]	; (800541c <USB_HostInit+0x170>)
 80053d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80053d4:	e009      	b.n	80053ea <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2280      	movs	r2, #128	; 0x80
 80053da:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a10      	ldr	r2, [pc, #64]	; (8005420 <USB_HostInit+0x174>)
 80053e0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a0f      	ldr	r2, [pc, #60]	; (8005424 <USB_HostInit+0x178>)
 80053e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d105      	bne.n	80053fc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	f043 0210 	orr.w	r2, r3, #16
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699a      	ldr	r2, [r3, #24]
 8005400:	4b09      	ldr	r3, [pc, #36]	; (8005428 <USB_HostInit+0x17c>)
 8005402:	4313      	orrs	r3, r2
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005408:	7dfb      	ldrb	r3, [r7, #23]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005414:	b004      	add	sp, #16
 8005416:	4770      	bx	lr
 8005418:	01000200 	.word	0x01000200
 800541c:	00e00300 	.word	0x00e00300
 8005420:	00600080 	.word	0x00600080
 8005424:	004000e0 	.word	0x004000e0
 8005428:	a3200008 	.word	0xa3200008

0800542c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	68f9      	ldr	r1, [r7, #12]
 8005460:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005464:	4313      	orrs	r3, r2
 8005466:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d107      	bne.n	800547e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005474:	461a      	mov	r2, r3
 8005476:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800547a:	6053      	str	r3, [r2, #4]
 800547c:	e009      	b.n	8005492 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800547e:	78fb      	ldrb	r3, [r7, #3]
 8005480:	2b02      	cmp	r3, #2
 8005482:	d106      	bne.n	8005492 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800548a:	461a      	mov	r2, r3
 800548c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005490:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80054c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80054d0:	2064      	movs	r0, #100	; 0x64
 80054d2:	f7fb fda5 	bl	8001020 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80054e4:	200a      	movs	r0, #10
 80054e6:	f7fb fd9b 	bl	8001020 <HAL_Delay>

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005518:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d109      	bne.n	8005538 <USB_DriveVbus+0x44>
 8005524:	78fb      	ldrb	r3, [r7, #3]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d106      	bne.n	8005538 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005532:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005536:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800553e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005542:	d109      	bne.n	8005558 <USB_DriveVbus+0x64>
 8005544:	78fb      	ldrb	r3, [r7, #3]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d106      	bne.n	8005558 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005556:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005566:	b480      	push	{r7}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	0c5b      	lsrs	r3, r3, #17
 8005584:	f003 0303 	and.w	r3, r3, #3
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	b29b      	uxth	r3, r3
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	4608      	mov	r0, r1
 80055c2:	4611      	mov	r1, r2
 80055c4:	461a      	mov	r2, r3
 80055c6:	4603      	mov	r3, r0
 80055c8:	70fb      	strb	r3, [r7, #3]
 80055ca:	460b      	mov	r3, r1
 80055cc:	70bb      	strb	r3, [r7, #2]
 80055ce:	4613      	mov	r3, r2
 80055d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e6:	461a      	mov	r2, r3
 80055e8:	f04f 33ff 	mov.w	r3, #4294967295
 80055ec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80055ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d87e      	bhi.n	80056f4 <USB_HC_Init+0x13c>
 80055f6:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <USB_HC_Init+0x44>)
 80055f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fc:	0800560d 	.word	0x0800560d
 8005600:	080056b7 	.word	0x080056b7
 8005604:	0800560d 	.word	0x0800560d
 8005608:	08005679 	.word	0x08005679
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	4413      	add	r3, r2
 8005614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005618:	461a      	mov	r2, r3
 800561a:	f240 439d 	movw	r3, #1181	; 0x49d
 800561e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005620:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005624:	2b00      	cmp	r3, #0
 8005626:	da10      	bge.n	800564a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005628:	78fb      	ldrb	r3, [r7, #3]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	4413      	add	r3, r2
 8005630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	78fa      	ldrb	r2, [r7, #3]
 8005638:	0151      	lsls	r1, r2, #5
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	440a      	add	r2, r1
 800563e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005646:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005648:	e057      	b.n	80056fa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800564e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005652:	2b00      	cmp	r3, #0
 8005654:	d051      	beq.n	80056fa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005656:	78fb      	ldrb	r3, [r7, #3]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	4413      	add	r3, r2
 800565e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	78fa      	ldrb	r2, [r7, #3]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	440a      	add	r2, r1
 800566c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005670:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005674:	60d3      	str	r3, [r2, #12]
      break;
 8005676:	e040      	b.n	80056fa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	4413      	add	r3, r2
 8005680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005684:	461a      	mov	r2, r3
 8005686:	f240 639d 	movw	r3, #1693	; 0x69d
 800568a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800568c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005690:	2b00      	cmp	r3, #0
 8005692:	da34      	bge.n	80056fe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005694:	78fb      	ldrb	r3, [r7, #3]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	4413      	add	r3, r2
 800569c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	78fa      	ldrb	r2, [r7, #3]
 80056a4:	0151      	lsls	r1, r2, #5
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	440a      	add	r2, r1
 80056aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80056b4:	e023      	b.n	80056fe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c2:	461a      	mov	r2, r3
 80056c4:	f240 2325 	movw	r3, #549	; 0x225
 80056c8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	da17      	bge.n	8005702 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80056d2:	78fb      	ldrb	r3, [r7, #3]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	78fa      	ldrb	r2, [r7, #3]
 80056e2:	0151      	lsls	r1, r2, #5
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	440a      	add	r2, r1
 80056e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ec:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80056f0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80056f2:	e006      	b.n	8005702 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	77fb      	strb	r3, [r7, #31]
      break;
 80056f8:	e004      	b.n	8005704 <USB_HC_Init+0x14c>
      break;
 80056fa:	bf00      	nop
 80056fc:	e002      	b.n	8005704 <USB_HC_Init+0x14c>
      break;
 80056fe:	bf00      	nop
 8005700:	e000      	b.n	8005704 <USB_HC_Init+0x14c>
      break;
 8005702:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4413      	add	r3, r2
 800570c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	78fa      	ldrb	r2, [r7, #3]
 8005714:	0151      	lsls	r1, r2, #5
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	440a      	add	r2, r1
 800571a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800571e:	f043 0302 	orr.w	r3, r3, #2
 8005722:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	78fb      	ldrb	r3, [r7, #3]
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	2101      	movs	r1, #1
 8005734:	fa01 f303 	lsl.w	r3, r1, r3
 8005738:	6939      	ldr	r1, [r7, #16]
 800573a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800573e:	4313      	orrs	r3, r2
 8005740:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800574e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005752:	2b00      	cmp	r3, #0
 8005754:	da03      	bge.n	800575e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800575a:	61bb      	str	r3, [r7, #24]
 800575c:	e001      	b.n	8005762 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7ff feff 	bl	8005566 <USB_GetHostSpeed>
 8005768:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800576a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800576e:	2b02      	cmp	r3, #2
 8005770:	d106      	bne.n	8005780 <USB_HC_Init+0x1c8>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d003      	beq.n	8005780 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005778:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	e001      	b.n	8005784 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005784:	787b      	ldrb	r3, [r7, #1]
 8005786:	059b      	lsls	r3, r3, #22
 8005788:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800578c:	78bb      	ldrb	r3, [r7, #2]
 800578e:	02db      	lsls	r3, r3, #11
 8005790:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005794:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005796:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800579a:	049b      	lsls	r3, r3, #18
 800579c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80057a0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80057a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80057a8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057ae:	78fb      	ldrb	r3, [r7, #3]
 80057b0:	0159      	lsls	r1, r3, #5
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	440b      	add	r3, r1
 80057b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ba:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057c0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80057c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d003      	beq.n	80057d2 <USB_HC_Init+0x21a>
 80057ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d10f      	bne.n	80057f2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80057d2:	78fb      	ldrb	r3, [r7, #3]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	78fa      	ldrb	r2, [r7, #3]
 80057e2:	0151      	lsls	r1, r2, #5
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	440a      	add	r2, r1
 80057e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057f0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80057f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3720      	adds	r7, #32
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08c      	sub	sp, #48	; 0x30
 8005800:	af02      	add	r7, sp, #8
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	4613      	mov	r3, r2
 8005808:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	785b      	ldrb	r3, [r3, #1]
 8005812:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005818:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005822:	2b00      	cmp	r3, #0
 8005824:	d02d      	beq.n	8005882 <USB_HC_StartXfer+0x86>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	791b      	ldrb	r3, [r3, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d129      	bne.n	8005882 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d117      	bne.n	8005864 <USB_HC_StartXfer+0x68>
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	79db      	ldrb	r3, [r3, #7]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <USB_HC_StartXfer+0x48>
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	79db      	ldrb	r3, [r3, #7]
 8005840:	2b02      	cmp	r3, #2
 8005842:	d10f      	bne.n	8005864 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	4413      	add	r3, r2
 800584c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	0151      	lsls	r1, r2, #5
 8005856:	6a3a      	ldr	r2, [r7, #32]
 8005858:	440a      	add	r2, r1
 800585a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800585e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005862:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005864:	79fb      	ldrb	r3, [r7, #7]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10b      	bne.n	8005882 <USB_HC_StartXfer+0x86>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	795b      	ldrb	r3, [r3, #5]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d107      	bne.n	8005882 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	785b      	ldrb	r3, [r3, #1]
 8005876:	4619      	mov	r1, r3
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 fa0f 	bl	8005c9c <USB_DoPing>
      return HAL_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	e0f8      	b.n	8005a74 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d018      	beq.n	80058bc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	8912      	ldrh	r2, [r2, #8]
 8005892:	4413      	add	r3, r2
 8005894:	3b01      	subs	r3, #1
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	8912      	ldrh	r2, [r2, #8]
 800589a:	fbb3 f3f2 	udiv	r3, r3, r2
 800589e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80058a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80058a2:	8b7b      	ldrh	r3, [r7, #26]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d90b      	bls.n	80058c0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80058a8:	8b7b      	ldrh	r3, [r7, #26]
 80058aa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	8912      	ldrh	r2, [r2, #8]
 80058b2:	fb03 f202 	mul.w	r2, r3, r2
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	611a      	str	r2, [r3, #16]
 80058ba:	e001      	b.n	80058c0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80058bc:	2301      	movs	r3, #1
 80058be:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	78db      	ldrb	r3, [r3, #3]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d007      	beq.n	80058d8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	8912      	ldrh	r2, [r2, #8]
 80058ce:	fb03 f202 	mul.w	r2, r3, r2
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	611a      	str	r2, [r3, #16]
 80058d6:	e003      	b.n	80058e0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	695a      	ldr	r2, [r3, #20]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058ea:	04d9      	lsls	r1, r3, #19
 80058ec:	4b63      	ldr	r3, [pc, #396]	; (8005a7c <USB_HC_StartXfer+0x280>)
 80058ee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058f0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	7a9b      	ldrb	r3, [r3, #10]
 80058f6:	075b      	lsls	r3, r3, #29
 80058f8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058fc:	69f9      	ldr	r1, [r7, #28]
 80058fe:	0148      	lsls	r0, r1, #5
 8005900:	6a39      	ldr	r1, [r7, #32]
 8005902:	4401      	add	r1, r0
 8005904:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005908:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800590a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	68d9      	ldr	r1, [r3, #12]
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	4413      	add	r3, r2
 800591e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005922:	460a      	mov	r2, r1
 8005924:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	bf0c      	ite	eq
 8005936:	2301      	moveq	r3, #1
 8005938:	2300      	movne	r3, #0
 800593a:	b2db      	uxtb	r3, r3
 800593c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	4413      	add	r3, r2
 8005946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	0151      	lsls	r1, r2, #5
 8005950:	6a3a      	ldr	r2, [r7, #32]
 8005952:	440a      	add	r2, r1
 8005954:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005958:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800595c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	4413      	add	r3, r2
 8005966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	7e7b      	ldrb	r3, [r7, #25]
 800596e:	075b      	lsls	r3, r3, #29
 8005970:	69f9      	ldr	r1, [r7, #28]
 8005972:	0148      	lsls	r0, r1, #5
 8005974:	6a39      	ldr	r1, [r7, #32]
 8005976:	4401      	add	r1, r0
 8005978:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800597c:	4313      	orrs	r3, r2
 800597e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	4413      	add	r3, r2
 8005988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005996:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	78db      	ldrb	r3, [r3, #3]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d004      	beq.n	80059aa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	e003      	b.n	80059b2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059b0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059b8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c6:	461a      	mov	r2, r3
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e04e      	b.n	8005a74 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	78db      	ldrb	r3, [r3, #3]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d149      	bne.n	8005a72 <USB_HC_StartXfer+0x276>
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d045      	beq.n	8005a72 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	79db      	ldrb	r3, [r3, #7]
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d830      	bhi.n	8005a50 <USB_HC_StartXfer+0x254>
 80059ee:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <USB_HC_StartXfer+0x1f8>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	08005a05 	.word	0x08005a05
 80059f8:	08005a29 	.word	0x08005a29
 80059fc:	08005a05 	.word	0x08005a05
 8005a00:	08005a29 	.word	0x08005a29
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	3303      	adds	r3, #3
 8005a0a:	089b      	lsrs	r3, r3, #2
 8005a0c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005a0e:	8afa      	ldrh	r2, [r7, #22]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d91c      	bls.n	8005a54 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	f043 0220 	orr.w	r2, r3, #32
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a26:	e015      	b.n	8005a54 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	3303      	adds	r3, #3
 8005a2e:	089b      	lsrs	r3, r3, #2
 8005a30:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005a32:	8afa      	ldrh	r2, [r7, #22]
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d90a      	bls.n	8005a58 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a4e:	e003      	b.n	8005a58 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005a50:	bf00      	nop
 8005a52:	e002      	b.n	8005a5a <USB_HC_StartXfer+0x25e>
        break;
 8005a54:	bf00      	nop
 8005a56:	e000      	b.n	8005a5a <USB_HC_StartXfer+0x25e>
        break;
 8005a58:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	68d9      	ldr	r1, [r3, #12]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	785a      	ldrb	r2, [r3, #1]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	2000      	movs	r0, #0
 8005a6a:	9000      	str	r0, [sp, #0]
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7ff fb31 	bl	80050d4 <USB_WritePacket>
  }

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3728      	adds	r7, #40	; 0x28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	1ff80000 	.word	0x1ff80000

08005a80 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	b29b      	uxth	r3, r3
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b089      	sub	sp, #36	; 0x24
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005ab2:	78fb      	ldrb	r3, [r7, #3]
 8005ab4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	0c9b      	lsrs	r3, r3, #18
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	0fdb      	lsrs	r3, r3, #31
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 0320 	and.w	r3, r3, #32
 8005aee:	2b20      	cmp	r3, #32
 8005af0:	d104      	bne.n	8005afc <USB_HC_Halt+0x5a>
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	e0c8      	b.n	8005c8e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <USB_HC_Halt+0x66>
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d163      	bne.n	8005bd0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	69fa      	ldr	r2, [r7, #28]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b26:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 0320 	and.w	r3, r3, #32
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f040 80ab 	bne.w	8005c8c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d133      	bne.n	8005baa <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	0151      	lsls	r1, r2, #5
 8005b54:	69fa      	ldr	r2, [r7, #28]
 8005b56:	440a      	add	r2, r1
 8005b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b60:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	0151      	lsls	r1, r2, #5
 8005b74:	69fa      	ldr	r2, [r7, #28]
 8005b76:	440a      	add	r2, r1
 8005b78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b80:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3301      	adds	r3, #1
 8005b86:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b8e:	d81d      	bhi.n	8005bcc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ba6:	d0ec      	beq.n	8005b82 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ba8:	e070      	b.n	8005c8c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	0151      	lsls	r1, r2, #5
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	440a      	add	r2, r1
 8005bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bc8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bca:	e05f      	b.n	8005c8c <USB_HC_Halt+0x1ea>
            break;
 8005bcc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bce:	e05d      	b.n	8005c8c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	0151      	lsls	r1, r2, #5
 8005be2:	69fa      	ldr	r2, [r7, #28]
 8005be4:	440a      	add	r2, r1
 8005be6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d133      	bne.n	8005c68 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	0151      	lsls	r1, r2, #5
 8005c12:	69fa      	ldr	r2, [r7, #28]
 8005c14:	440a      	add	r2, r1
 8005c16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c1e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c3e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	3301      	adds	r3, #1
 8005c44:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c4c:	d81d      	bhi.n	8005c8a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c64:	d0ec      	beq.n	8005c40 <USB_HC_Halt+0x19e>
 8005c66:	e011      	b.n	8005c8c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	0151      	lsls	r1, r2, #5
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	440a      	add	r2, r1
 8005c7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	e000      	b.n	8005c8c <USB_HC_Halt+0x1ea>
          break;
 8005c8a:	bf00      	nop
    }
  }

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3724      	adds	r7, #36	; 0x24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	04da      	lsls	r2, r3, #19
 8005cb8:	4b15      	ldr	r3, [pc, #84]	; (8005d10 <USB_DoPing+0x74>)
 8005cba:	4013      	ands	r3, r2
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	0151      	lsls	r1, r2, #5
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	440a      	add	r2, r1
 8005cc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ccc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ce4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	1ff80000 	.word	0x1ff80000

08005d14 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7ff f911 	bl	8004f50 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d2e:	2110      	movs	r1, #16
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7ff f96b 	bl	800500c <USB_FlushTxFifo>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff f997 	bl	8005074 <USB_FlushRxFifo>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005d50:	2300      	movs	r3, #0
 8005d52:	61bb      	str	r3, [r7, #24]
 8005d54:	e01f      	b.n	8005d96 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d6c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d74:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d7c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	3301      	adds	r3, #1
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	2b0f      	cmp	r3, #15
 8005d9a:	d9dc      	bls.n	8005d56 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61bb      	str	r3, [r7, #24]
 8005da0:	e034      	b.n	8005e0c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005db8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dc0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dc8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3301      	adds	r3, #1
 8005de0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005de8:	d80c      	bhi.n	8005e04 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e00:	d0ec      	beq.n	8005ddc <USB_StopHost+0xc8>
 8005e02:	e000      	b.n	8005e06 <USB_StopHost+0xf2>
        break;
 8005e04:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	61bb      	str	r3, [r7, #24]
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	2b0f      	cmp	r3, #15
 8005e10:	d9c7      	bls.n	8005da2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e18:	461a      	mov	r2, r3
 8005e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f04f 32ff 	mov.w	r2, #4294967295
 8005e26:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff f880 	bl	8004f2e <USB_EnableGlobalInt>

  return ret;
 8005e2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005e38:	b590      	push	{r4, r7, lr}
 8005e3a:	b089      	sub	sp, #36	; 0x24
 8005e3c:	af04      	add	r7, sp, #16
 8005e3e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005e40:	2301      	movs	r3, #1
 8005e42:	2202      	movs	r2, #2
 8005e44:	2102      	movs	r1, #2
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fc66 	bl	8006718 <USBH_FindInterface>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	2bff      	cmp	r3, #255	; 0xff
 8005e54:	d002      	beq.n	8005e5c <USBH_CDC_InterfaceInit+0x24>
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d901      	bls.n	8005e60 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	e13d      	b.n	80060dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fc3b 	bl	80066e0 <USBH_SelectInterface>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005e6e:	7bbb      	ldrb	r3, [r7, #14]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005e74:	2302      	movs	r3, #2
 8005e76:	e131      	b.n	80060dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005e7e:	2050      	movs	r0, #80	; 0x50
 8005e80:	f002 fad2 	bl	8008428 <malloc>
 8005e84:	4603      	mov	r3, r0
 8005e86:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e11f      	b.n	80060dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005e9c:	2250      	movs	r2, #80	; 0x50
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	68b8      	ldr	r0, [r7, #8]
 8005ea2:	f002 fb7d 	bl	80085a0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	211a      	movs	r1, #26
 8005eac:	fb01 f303 	mul.w	r3, r1, r3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	b25b      	sxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	da15      	bge.n	8005eea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	211a      	movs	r1, #26
 8005ec4:	fb01 f303 	mul.w	r3, r1, r3
 8005ec8:	4413      	add	r3, r2
 8005eca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ece:	781a      	ldrb	r2, [r3, #0]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	211a      	movs	r1, #26
 8005eda:	fb01 f303 	mul.w	r3, r1, r3
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ee4:	881a      	ldrh	r2, [r3, #0]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	785b      	ldrb	r3, [r3, #1]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f001 ff2e 	bl	8007d52 <USBH_AllocPipe>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	461a      	mov	r2, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	7819      	ldrb	r1, [r3, #0]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	7858      	ldrb	r0, [r3, #1]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	8952      	ldrh	r2, [r2, #10]
 8005f16:	9202      	str	r2, [sp, #8]
 8005f18:	2203      	movs	r2, #3
 8005f1a:	9201      	str	r2, [sp, #4]
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	4623      	mov	r3, r4
 8005f20:	4602      	mov	r2, r0
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f001 fee6 	bl	8007cf4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	4619      	mov	r1, r3
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f002 f9f5 	bl	8008320 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005f36:	2300      	movs	r3, #0
 8005f38:	2200      	movs	r2, #0
 8005f3a:	210a      	movs	r1, #10
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fbeb 	bl	8006718 <USBH_FindInterface>
 8005f42:	4603      	mov	r3, r0
 8005f44:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
 8005f48:	2bff      	cmp	r3, #255	; 0xff
 8005f4a:	d002      	beq.n	8005f52 <USBH_CDC_InterfaceInit+0x11a>
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d901      	bls.n	8005f56 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f52:	2302      	movs	r3, #2
 8005f54:	e0c2      	b.n	80060dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	211a      	movs	r1, #26
 8005f5c:	fb01 f303 	mul.w	r3, r1, r3
 8005f60:	4413      	add	r3, r2
 8005f62:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	b25b      	sxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	da16      	bge.n	8005f9c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	211a      	movs	r1, #26
 8005f74:	fb01 f303 	mul.w	r3, r1, r3
 8005f78:	4413      	add	r3, r2
 8005f7a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f7e:	781a      	ldrb	r2, [r3, #0]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	211a      	movs	r1, #26
 8005f8a:	fb01 f303 	mul.w	r3, r1, r3
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f94:	881a      	ldrh	r2, [r3, #0]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	835a      	strh	r2, [r3, #26]
 8005f9a:	e015      	b.n	8005fc8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	211a      	movs	r1, #26
 8005fa2:	fb01 f303 	mul.w	r3, r1, r3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fac:	781a      	ldrb	r2, [r3, #0]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	211a      	movs	r1, #26
 8005fb8:	fb01 f303 	mul.w	r3, r1, r3
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005fc2:	881a      	ldrh	r2, [r3, #0]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	211a      	movs	r1, #26
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	b25b      	sxtb	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	da16      	bge.n	800600e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	211a      	movs	r1, #26
 8005fe6:	fb01 f303 	mul.w	r3, r1, r3
 8005fea:	4413      	add	r3, r2
 8005fec:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ff0:	781a      	ldrb	r2, [r3, #0]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	211a      	movs	r1, #26
 8005ffc:	fb01 f303 	mul.w	r3, r1, r3
 8006000:	4413      	add	r3, r2
 8006002:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006006:	881a      	ldrh	r2, [r3, #0]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	835a      	strh	r2, [r3, #26]
 800600c:	e015      	b.n	800603a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800600e:	7bfb      	ldrb	r3, [r7, #15]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	211a      	movs	r1, #26
 8006014:	fb01 f303 	mul.w	r3, r1, r3
 8006018:	4413      	add	r3, r2
 800601a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800601e:	781a      	ldrb	r2, [r3, #0]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	211a      	movs	r1, #26
 800602a:	fb01 f303 	mul.w	r3, r1, r3
 800602e:	4413      	add	r3, r2
 8006030:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006034:	881a      	ldrh	r2, [r3, #0]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	7b9b      	ldrb	r3, [r3, #14]
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f001 fe86 	bl	8007d52 <USBH_AllocPipe>
 8006046:	4603      	mov	r3, r0
 8006048:	461a      	mov	r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	7bdb      	ldrb	r3, [r3, #15]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 fe7c 	bl	8007d52 <USBH_AllocPipe>
 800605a:	4603      	mov	r3, r0
 800605c:	461a      	mov	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	7b59      	ldrb	r1, [r3, #13]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	7b98      	ldrb	r0, [r3, #14]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	8b12      	ldrh	r2, [r2, #24]
 800607a:	9202      	str	r2, [sp, #8]
 800607c:	2202      	movs	r2, #2
 800607e:	9201      	str	r2, [sp, #4]
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	4623      	mov	r3, r4
 8006084:	4602      	mov	r2, r0
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f001 fe34 	bl	8007cf4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	7b19      	ldrb	r1, [r3, #12]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	7bd8      	ldrb	r0, [r3, #15]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	8b52      	ldrh	r2, [r2, #26]
 80060a4:	9202      	str	r2, [sp, #8]
 80060a6:	2202      	movs	r2, #2
 80060a8:	9201      	str	r2, [sp, #4]
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	4623      	mov	r3, r4
 80060ae:	4602      	mov	r2, r0
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f001 fe1f 	bl	8007cf4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	7b5b      	ldrb	r3, [r3, #13]
 80060c2:	2200      	movs	r2, #0
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f002 f92a 	bl	8008320 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	7b1b      	ldrb	r3, [r3, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f002 f923 	bl	8008320 <USBH_LL_SetToggle>

  return USBH_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd90      	pop	{r4, r7, pc}

080060e4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00e      	beq.n	800611c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f001 fe14 	bl	8007d32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 fe3f 	bl	8007d94 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	7b1b      	ldrb	r3, [r3, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00e      	beq.n	8006142 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	7b1b      	ldrb	r3, [r3, #12]
 8006128:	4619      	mov	r1, r3
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f001 fe01 	bl	8007d32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	7b1b      	ldrb	r3, [r3, #12]
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f001 fe2c 	bl	8007d94 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	7b5b      	ldrb	r3, [r3, #13]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00e      	beq.n	8006168 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	7b5b      	ldrb	r3, [r3, #13]
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f001 fdee 	bl	8007d32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	7b5b      	ldrb	r3, [r3, #13]
 800615a:	4619      	mov	r1, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 fe19 	bl	8007d94 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00b      	beq.n	800618c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	4618      	mov	r0, r3
 800617e:	f002 f95b 	bl	8008438 <free>
    phost->pActiveClass->pData = 0U;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006188:	2200      	movs	r2, #0
 800618a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b084      	sub	sp, #16
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3340      	adds	r3, #64	; 0x40
 80061ac:	4619      	mov	r1, r3
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f8b1 	bl	8006316 <GetLineCoding>
 80061b4:	4603      	mov	r3, r0
 80061b6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80061b8:	7afb      	ldrb	r3, [r7, #11]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d105      	bne.n	80061ca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061c4:	2102      	movs	r1, #2
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80061ca:	7afb      	ldrb	r3, [r7, #11]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80061dc:	2301      	movs	r3, #1
 80061de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d877      	bhi.n	80062e8 <USBH_CDC_Process+0x114>
 80061f8:	a201      	add	r2, pc, #4	; (adr r2, 8006200 <USBH_CDC_Process+0x2c>)
 80061fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fe:	bf00      	nop
 8006200:	08006215 	.word	0x08006215
 8006204:	0800621b 	.word	0x0800621b
 8006208:	0800624b 	.word	0x0800624b
 800620c:	080062bf 	.word	0x080062bf
 8006210:	080062cd 	.word	0x080062cd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	73fb      	strb	r3, [r7, #15]
      break;
 8006218:	e06d      	b.n	80062f6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f897 	bl	8006354 <SetLineCoding>
 8006226:	4603      	mov	r3, r0
 8006228:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800622a:	7bbb      	ldrb	r3, [r7, #14]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d104      	bne.n	800623a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006238:	e058      	b.n	80062ec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800623a:	7bbb      	ldrb	r3, [r7, #14]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d055      	beq.n	80062ec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2204      	movs	r2, #4
 8006244:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006248:	e050      	b.n	80062ec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	3340      	adds	r3, #64	; 0x40
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f860 	bl	8006316 <GetLineCoding>
 8006256:	4603      	mov	r3, r0
 8006258:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800625a:	7bbb      	ldrb	r3, [r7, #14]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d126      	bne.n	80062ae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006272:	791b      	ldrb	r3, [r3, #4]
 8006274:	429a      	cmp	r2, r3
 8006276:	d13b      	bne.n	80062f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006282:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006284:	429a      	cmp	r2, r3
 8006286:	d133      	bne.n	80062f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006292:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006294:	429a      	cmp	r2, r3
 8006296:	d12b      	bne.n	80062f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062a0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d124      	bne.n	80062f0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f958 	bl	800655c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80062ac:	e020      	b.n	80062f0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80062ae:	7bbb      	ldrb	r3, [r7, #14]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d01d      	beq.n	80062f0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2204      	movs	r2, #4
 80062b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80062bc:	e018      	b.n	80062f0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f867 	bl	8006392 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f8da 	bl	800647e <CDC_ProcessReception>
      break;
 80062ca:	e014      	b.n	80062f6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80062cc:	2100      	movs	r1, #0
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 ffef 	bl	80072b2 <USBH_ClrFeature>
 80062d4:	4603      	mov	r3, r0
 80062d6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80062d8:	7bbb      	ldrb	r3, [r7, #14]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10a      	bne.n	80062f4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80062e6:	e005      	b.n	80062f4 <USBH_CDC_Process+0x120>

    default:
      break;
 80062e8:	bf00      	nop
 80062ea:	e004      	b.n	80062f6 <USBH_CDC_Process+0x122>
      break;
 80062ec:	bf00      	nop
 80062ee:	e002      	b.n	80062f6 <USBH_CDC_Process+0x122>
      break;
 80062f0:	bf00      	nop
 80062f2:	e000      	b.n	80062f6 <USBH_CDC_Process+0x122>
      break;
 80062f4:	bf00      	nop

  }

  return status;
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b082      	sub	sp, #8
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	22a1      	movs	r2, #161	; 0xa1
 8006324:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2221      	movs	r2, #33	; 0x21
 800632a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2207      	movs	r2, #7
 800633c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2207      	movs	r2, #7
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f001 fa83 	bl	8007850 <USBH_CtlReq>
 800634a:	4603      	mov	r3, r0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2221      	movs	r2, #33	; 0x21
 8006362:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2220      	movs	r2, #32
 8006368:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2207      	movs	r2, #7
 800637a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2207      	movs	r2, #7
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f001 fa64 	bl	8007850 <USBH_CtlReq>
 8006388:	4603      	mov	r3, r0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b086      	sub	sp, #24
 8006396:	af02      	add	r7, sp, #8
 8006398:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80063a4:	2300      	movs	r3, #0
 80063a6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d002      	beq.n	80063b8 <CDC_ProcessTransmission+0x26>
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d023      	beq.n	80063fe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80063b6:	e05e      	b.n	8006476 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	8b12      	ldrh	r2, [r2, #24]
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d90b      	bls.n	80063dc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	69d9      	ldr	r1, [r3, #28]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8b1a      	ldrh	r2, [r3, #24]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	7b5b      	ldrb	r3, [r3, #13]
 80063d0:	2001      	movs	r0, #1
 80063d2:	9000      	str	r0, [sp, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 fc4a 	bl	8007c6e <USBH_BulkSendData>
 80063da:	e00b      	b.n	80063f4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	7b5b      	ldrb	r3, [r3, #13]
 80063ea:	2001      	movs	r0, #1
 80063ec:	9000      	str	r0, [sp, #0]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 fc3d 	bl	8007c6e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063fc:	e03b      	b.n	8006476 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	7b5b      	ldrb	r3, [r3, #13]
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f001 ff61 	bl	80082cc <USBH_LL_GetURBState>
 800640a:	4603      	mov	r3, r0
 800640c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800640e:	7afb      	ldrb	r3, [r7, #11]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d128      	bne.n	8006466 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	8b12      	ldrh	r2, [r2, #24]
 800641c:	4293      	cmp	r3, r2
 800641e:	d90e      	bls.n	800643e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	8b12      	ldrh	r2, [r2, #24]
 8006428:	1a9a      	subs	r2, r3, r2
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	8b12      	ldrh	r2, [r2, #24]
 8006436:	441a      	add	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	61da      	str	r2, [r3, #28]
 800643c:	e002      	b.n	8006444 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	2b00      	cmp	r3, #0
 800644a:	d004      	beq.n	8006456 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006454:	e00e      	b.n	8006474 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f868 	bl	8006534 <USBH_CDC_TransmitCallback>
      break;
 8006464:	e006      	b.n	8006474 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006466:	7afb      	ldrb	r3, [r7, #11]
 8006468:	2b02      	cmp	r3, #2
 800646a:	d103      	bne.n	8006474 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006474:	bf00      	nop
  }
}
 8006476:	bf00      	nop
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b086      	sub	sp, #24
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006490:	2300      	movs	r3, #0
 8006492:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800649a:	2b03      	cmp	r3, #3
 800649c:	d002      	beq.n	80064a4 <CDC_ProcessReception+0x26>
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d00e      	beq.n	80064c0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80064a2:	e043      	b.n	800652c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	6a19      	ldr	r1, [r3, #32]
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	8b5a      	ldrh	r2, [r3, #26]
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	7b1b      	ldrb	r3, [r3, #12]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f001 fc01 	bl	8007cb8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2204      	movs	r2, #4
 80064ba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80064be:	e035      	b.n	800652c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	7b1b      	ldrb	r3, [r3, #12]
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f001 ff00 	bl	80082cc <USBH_LL_GetURBState>
 80064cc:	4603      	mov	r3, r0
 80064ce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80064d0:	7cfb      	ldrb	r3, [r7, #19]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d129      	bne.n	800652a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	7b1b      	ldrb	r3, [r3, #12]
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 fe63 	bl	80081a8 <USBH_LL_GetLastXferSize>
 80064e2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d016      	beq.n	800651c <CDC_ProcessReception+0x9e>
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	8b5b      	ldrh	r3, [r3, #26]
 80064f2:	461a      	mov	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d910      	bls.n	800651c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	1ad2      	subs	r2, r2, r3
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	6a1a      	ldr	r2, [r3, #32]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	441a      	add	r2, r3
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2203      	movs	r2, #3
 8006516:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800651a:	e006      	b.n	800652a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f80f 	bl	8006548 <USBH_CDC_ReceiveCallback>
      break;
 800652a:	bf00      	nop
  }
}
 800652c:	bf00      	nop
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	4613      	mov	r3, r2
 800657c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006584:	2302      	movs	r3, #2
 8006586:	e029      	b.n	80065dc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	79fa      	ldrb	r2, [r7, #7]
 800658c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f81f 	bl	80065e4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f001 fd33 	bl	8008040 <USBH_LL_Init>

  return USBH_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	e009      	b.n	800660a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	33e0      	adds	r3, #224	; 0xe0
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	2200      	movs	r2, #0
 8006602:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3301      	adds	r3, #1
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b0f      	cmp	r3, #15
 800660e:	d9f2      	bls.n	80065f6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006610:	2300      	movs	r3, #0
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	e009      	b.n	800662a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006620:	2200      	movs	r2, #0
 8006622:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3301      	adds	r3, #1
 8006628:	60fb      	str	r3, [r7, #12]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006630:	d3f1      	bcc.n	8006616 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2240      	movs	r2, #64	; 0x40
 8006656:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d016      	beq.n	80066ce <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10e      	bne.n	80066c8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80066b0:	1c59      	adds	r1, r3, #1
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	33de      	adds	r3, #222	; 0xde
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	73fb      	strb	r3, [r7, #15]
 80066c6:	e004      	b.n	80066d2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80066c8:	2302      	movs	r3, #2
 80066ca:	73fb      	strb	r3, [r7, #15]
 80066cc:	e001      	b.n	80066d2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80066ce:	2302      	movs	r3, #2
 80066d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80066f6:	78fa      	ldrb	r2, [r7, #3]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d204      	bcs.n	8006706 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	78fa      	ldrb	r2, [r7, #3]
 8006700:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006704:	e001      	b.n	800670a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006706:	2302      	movs	r3, #2
 8006708:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800670a:	7bfb      	ldrb	r3, [r7, #15]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	4608      	mov	r0, r1
 8006722:	4611      	mov	r1, r2
 8006724:	461a      	mov	r2, r3
 8006726:	4603      	mov	r3, r0
 8006728:	70fb      	strb	r3, [r7, #3]
 800672a:	460b      	mov	r3, r1
 800672c:	70bb      	strb	r3, [r7, #2]
 800672e:	4613      	mov	r3, r2
 8006730:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006732:	2300      	movs	r3, #0
 8006734:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006736:	2300      	movs	r3, #0
 8006738:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006740:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006742:	e025      	b.n	8006790 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006744:	7dfb      	ldrb	r3, [r7, #23]
 8006746:	221a      	movs	r2, #26
 8006748:	fb02 f303 	mul.w	r3, r2, r3
 800674c:	3308      	adds	r3, #8
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	4413      	add	r3, r2
 8006752:	3302      	adds	r3, #2
 8006754:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	795b      	ldrb	r3, [r3, #5]
 800675a:	78fa      	ldrb	r2, [r7, #3]
 800675c:	429a      	cmp	r2, r3
 800675e:	d002      	beq.n	8006766 <USBH_FindInterface+0x4e>
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	2bff      	cmp	r3, #255	; 0xff
 8006764:	d111      	bne.n	800678a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800676a:	78ba      	ldrb	r2, [r7, #2]
 800676c:	429a      	cmp	r2, r3
 800676e:	d002      	beq.n	8006776 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006770:	78bb      	ldrb	r3, [r7, #2]
 8006772:	2bff      	cmp	r3, #255	; 0xff
 8006774:	d109      	bne.n	800678a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800677a:	787a      	ldrb	r2, [r7, #1]
 800677c:	429a      	cmp	r2, r3
 800677e:	d002      	beq.n	8006786 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006780:	787b      	ldrb	r3, [r7, #1]
 8006782:	2bff      	cmp	r3, #255	; 0xff
 8006784:	d101      	bne.n	800678a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006786:	7dfb      	ldrb	r3, [r7, #23]
 8006788:	e006      	b.n	8006798 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800678a:	7dfb      	ldrb	r3, [r7, #23]
 800678c:	3301      	adds	r3, #1
 800678e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006790:	7dfb      	ldrb	r3, [r7, #23]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d9d6      	bls.n	8006744 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006796:	23ff      	movs	r3, #255	; 0xff
}
 8006798:	4618      	mov	r0, r3
 800679a:	371c      	adds	r7, #28
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 fc83 	bl	80080b8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80067b2:	2101      	movs	r1, #1
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 fd9c 	bl	80082f2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af04      	add	r7, sp, #16
 80067ca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80067cc:	2302      	movs	r3, #2
 80067ce:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d102      	bne.n	80067e6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2203      	movs	r2, #3
 80067e4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b0b      	cmp	r3, #11
 80067ee:	f200 81be 	bhi.w	8006b6e <USBH_Process+0x3aa>
 80067f2:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <USBH_Process+0x34>)
 80067f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f8:	08006829 	.word	0x08006829
 80067fc:	0800685b 	.word	0x0800685b
 8006800:	080068c3 	.word	0x080068c3
 8006804:	08006b09 	.word	0x08006b09
 8006808:	08006b6f 	.word	0x08006b6f
 800680c:	08006967 	.word	0x08006967
 8006810:	08006aaf 	.word	0x08006aaf
 8006814:	0800699d 	.word	0x0800699d
 8006818:	080069bd 	.word	0x080069bd
 800681c:	080069dd 	.word	0x080069dd
 8006820:	08006a21 	.word	0x08006a21
 8006824:	08006af1 	.word	0x08006af1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 819e 	beq.w	8006b72 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800683c:	20c8      	movs	r0, #200	; 0xc8
 800683e:	f001 fd9f 	bl	8008380 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f001 fc95 	bl	8008172 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006858:	e18b      	b.n	8006b72 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006860:	2b01      	cmp	r3, #1
 8006862:	d107      	bne.n	8006874 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006872:	e18d      	b.n	8006b90 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800687a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800687e:	d914      	bls.n	80068aa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006886:	3301      	adds	r3, #1
 8006888:	b2da      	uxtb	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006896:	2b03      	cmp	r3, #3
 8006898:	d903      	bls.n	80068a2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	220d      	movs	r2, #13
 800689e:	701a      	strb	r2, [r3, #0]
      break;
 80068a0:	e176      	b.n	8006b90 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	701a      	strb	r2, [r3, #0]
      break;
 80068a8:	e172      	b.n	8006b90 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80068b0:	f103 020a 	add.w	r2, r3, #10
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80068ba:	200a      	movs	r0, #10
 80068bc:	f001 fd60 	bl	8008380 <USBH_Delay>
      break;
 80068c0:	e166      	b.n	8006b90 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d005      	beq.n	80068d8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068d2:	2104      	movs	r1, #4
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80068d8:	2064      	movs	r0, #100	; 0x64
 80068da:	f001 fd51 	bl	8008380 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f001 fc20 	bl	8008124 <USBH_LL_GetSpeed>
 80068e4:	4603      	mov	r3, r0
 80068e6:	461a      	mov	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2205      	movs	r2, #5
 80068f2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80068f4:	2100      	movs	r1, #0
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f001 fa2b 	bl	8007d52 <USBH_AllocPipe>
 80068fc:	4603      	mov	r3, r0
 80068fe:	461a      	mov	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006904:	2180      	movs	r1, #128	; 0x80
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f001 fa23 	bl	8007d52 <USBH_AllocPipe>
 800690c:	4603      	mov	r3, r0
 800690e:	461a      	mov	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	7919      	ldrb	r1, [r3, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006928:	b292      	uxth	r2, r2
 800692a:	9202      	str	r2, [sp, #8]
 800692c:	2200      	movs	r2, #0
 800692e:	9201      	str	r2, [sp, #4]
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	4603      	mov	r3, r0
 8006934:	2280      	movs	r2, #128	; 0x80
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f001 f9dc 	bl	8007cf4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	7959      	ldrb	r1, [r3, #5]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006950:	b292      	uxth	r2, r2
 8006952:	9202      	str	r2, [sp, #8]
 8006954:	2200      	movs	r2, #0
 8006956:	9201      	str	r2, [sp, #4]
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	4603      	mov	r3, r0
 800695c:	2200      	movs	r2, #0
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f001 f9c8 	bl	8007cf4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006964:	e114      	b.n	8006b90 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f918 	bl	8006b9c <USBH_HandleEnum>
 800696c:	4603      	mov	r3, r0
 800696e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006970:	7bbb      	ldrb	r3, [r7, #14]
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b00      	cmp	r3, #0
 8006976:	f040 80fe 	bne.w	8006b76 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006988:	2b01      	cmp	r3, #1
 800698a:	d103      	bne.n	8006994 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2208      	movs	r2, #8
 8006990:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006992:	e0f0      	b.n	8006b76 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2207      	movs	r2, #7
 8006998:	701a      	strb	r2, [r3, #0]
      break;
 800699a:	e0ec      	b.n	8006b76 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 80e9 	beq.w	8006b7a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069ae:	2101      	movs	r1, #1
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2208      	movs	r2, #8
 80069b8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80069ba:	e0de      	b.n	8006b7a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fc2c 	bl	8007224 <USBH_SetCfg>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f040 80d5 	bne.w	8006b7e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2209      	movs	r2, #9
 80069d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069da:	e0d0      	b.n	8006b7e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d016      	beq.n	8006a18 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80069ea:	2101      	movs	r1, #1
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fc3c 	bl	800726a <USBH_SetFeature>
 80069f2:	4603      	mov	r3, r0
 80069f4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80069f6:	7bbb      	ldrb	r3, [r7, #14]
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d103      	bne.n	8006a06 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	220a      	movs	r2, #10
 8006a02:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a04:	e0bd      	b.n	8006b82 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006a06:	7bbb      	ldrb	r3, [r7, #14]
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	f040 80b9 	bne.w	8006b82 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	220a      	movs	r2, #10
 8006a14:	701a      	strb	r2, [r3, #0]
      break;
 8006a16:	e0b4      	b.n	8006b82 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	220a      	movs	r2, #10
 8006a1c:	701a      	strb	r2, [r3, #0]
      break;
 8006a1e:	e0b0      	b.n	8006b82 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 80ad 	beq.w	8006b86 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a34:	2300      	movs	r3, #0
 8006a36:	73fb      	strb	r3, [r7, #15]
 8006a38:	e016      	b.n	8006a68 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006a3a:	7bfa      	ldrb	r2, [r7, #15]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	32de      	adds	r2, #222	; 0xde
 8006a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a44:	791a      	ldrb	r2, [r3, #4]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d108      	bne.n	8006a62 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006a50:	7bfa      	ldrb	r2, [r7, #15]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	32de      	adds	r2, #222	; 0xde
 8006a56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006a60:	e005      	b.n	8006a6e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
 8006a64:	3301      	adds	r3, #1
 8006a66:	73fb      	strb	r3, [r7, #15]
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d0e5      	beq.n	8006a3a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d016      	beq.n	8006aa6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	4798      	blx	r3
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d109      	bne.n	8006a9e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2206      	movs	r2, #6
 8006a8e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a96:	2103      	movs	r1, #3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a9c:	e073      	b.n	8006b86 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	220d      	movs	r2, #13
 8006aa2:	701a      	strb	r2, [r3, #0]
      break;
 8006aa4:	e06f      	b.n	8006b86 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	220d      	movs	r2, #13
 8006aaa:	701a      	strb	r2, [r3, #0]
      break;
 8006aac:	e06b      	b.n	8006b86 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d017      	beq.n	8006ae8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	4798      	blx	r3
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d103      	bne.n	8006ad8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	220b      	movs	r2, #11
 8006ad4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ad6:	e058      	b.n	8006b8a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006ad8:	7bbb      	ldrb	r3, [r7, #14]
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d154      	bne.n	8006b8a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	220d      	movs	r2, #13
 8006ae4:	701a      	strb	r2, [r3, #0]
      break;
 8006ae6:	e050      	b.n	8006b8a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	220d      	movs	r2, #13
 8006aec:	701a      	strb	r2, [r3, #0]
      break;
 8006aee:	e04c      	b.n	8006b8a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d049      	beq.n	8006b8e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	4798      	blx	r3
      }
      break;
 8006b06:	e042      	b.n	8006b8e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7ff fd67 	bl	80065e4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d009      	beq.n	8006b34 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d005      	beq.n	8006b4a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b44:	2105      	movs	r1, #5
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d107      	bne.n	8006b66 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff fe20 	bl	80067a4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b64:	e014      	b.n	8006b90 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f001 faa6 	bl	80080b8 <USBH_LL_Start>
      break;
 8006b6c:	e010      	b.n	8006b90 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006b6e:	bf00      	nop
 8006b70:	e00e      	b.n	8006b90 <USBH_Process+0x3cc>
      break;
 8006b72:	bf00      	nop
 8006b74:	e00c      	b.n	8006b90 <USBH_Process+0x3cc>
      break;
 8006b76:	bf00      	nop
 8006b78:	e00a      	b.n	8006b90 <USBH_Process+0x3cc>
    break;
 8006b7a:	bf00      	nop
 8006b7c:	e008      	b.n	8006b90 <USBH_Process+0x3cc>
      break;
 8006b7e:	bf00      	nop
 8006b80:	e006      	b.n	8006b90 <USBH_Process+0x3cc>
      break;
 8006b82:	bf00      	nop
 8006b84:	e004      	b.n	8006b90 <USBH_Process+0x3cc>
      break;
 8006b86:	bf00      	nop
 8006b88:	e002      	b.n	8006b90 <USBH_Process+0x3cc>
      break;
 8006b8a:	bf00      	nop
 8006b8c:	e000      	b.n	8006b90 <USBH_Process+0x3cc>
      break;
 8006b8e:	bf00      	nop
  }
  return USBH_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop

08006b9c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b088      	sub	sp, #32
 8006ba0:	af04      	add	r7, sp, #16
 8006ba2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	785b      	ldrb	r3, [r3, #1]
 8006bb0:	2b07      	cmp	r3, #7
 8006bb2:	f200 81c1 	bhi.w	8006f38 <USBH_HandleEnum+0x39c>
 8006bb6:	a201      	add	r2, pc, #4	; (adr r2, 8006bbc <USBH_HandleEnum+0x20>)
 8006bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbc:	08006bdd 	.word	0x08006bdd
 8006bc0:	08006c9b 	.word	0x08006c9b
 8006bc4:	08006d05 	.word	0x08006d05
 8006bc8:	08006d93 	.word	0x08006d93
 8006bcc:	08006dfd 	.word	0x08006dfd
 8006bd0:	08006e6d 	.word	0x08006e6d
 8006bd4:	08006eb3 	.word	0x08006eb3
 8006bd8:	08006ef9 	.word	0x08006ef9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006bdc:	2108      	movs	r1, #8
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fa50 	bl	8007084 <USBH_Get_DevDesc>
 8006be4:	4603      	mov	r3, r0
 8006be6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d130      	bne.n	8006c50 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	7919      	ldrb	r1, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c12:	b292      	uxth	r2, r2
 8006c14:	9202      	str	r2, [sp, #8]
 8006c16:	2200      	movs	r2, #0
 8006c18:	9201      	str	r2, [sp, #4]
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2280      	movs	r2, #128	; 0x80
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 f867 	bl	8007cf4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	7959      	ldrb	r1, [r3, #5]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c3a:	b292      	uxth	r2, r2
 8006c3c:	9202      	str	r2, [sp, #8]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	9201      	str	r2, [sp, #4]
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	4603      	mov	r3, r0
 8006c46:	2200      	movs	r2, #0
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 f853 	bl	8007cf4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006c4e:	e175      	b.n	8006f3c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c50:	7bbb      	ldrb	r3, [r7, #14]
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	f040 8172 	bne.w	8006f3c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c5e:	3301      	adds	r3, #1
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d903      	bls.n	8006c7a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	220d      	movs	r2, #13
 8006c76:	701a      	strb	r2, [r3, #0]
      break;
 8006c78:	e160      	b.n	8006f3c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	795b      	ldrb	r3, [r3, #5]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 f887 	bl	8007d94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	791b      	ldrb	r3, [r3, #4]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f001 f881 	bl	8007d94 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	701a      	strb	r2, [r3, #0]
      break;
 8006c98:	e150      	b.n	8006f3c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006c9a:	2112      	movs	r1, #18
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f9f1 	bl	8007084 <USBH_Get_DevDesc>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ca6:	7bbb      	ldrb	r3, [r7, #14]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d103      	bne.n	8006cb4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006cb2:	e145      	b.n	8006f40 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	f040 8142 	bne.w	8006f40 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d903      	bls.n	8006cde <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	220d      	movs	r2, #13
 8006cda:	701a      	strb	r2, [r3, #0]
      break;
 8006cdc:	e130      	b.n	8006f40 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	795b      	ldrb	r3, [r3, #5]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f001 f855 	bl	8007d94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	791b      	ldrb	r3, [r3, #4]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f001 f84f 	bl	8007d94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	701a      	strb	r2, [r3, #0]
      break;
 8006d02:	e11d      	b.n	8006f40 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006d04:	2101      	movs	r1, #1
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fa68 	bl	80071dc <USBH_SetAddress>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d10:	7bbb      	ldrb	r3, [r7, #14]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d132      	bne.n	8006d7c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006d16:	2002      	movs	r0, #2
 8006d18:	f001 fb32 	bl	8008380 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2203      	movs	r2, #3
 8006d28:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	7919      	ldrb	r1, [r3, #4]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d3e:	b292      	uxth	r2, r2
 8006d40:	9202      	str	r2, [sp, #8]
 8006d42:	2200      	movs	r2, #0
 8006d44:	9201      	str	r2, [sp, #4]
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2280      	movs	r2, #128	; 0x80
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 ffd1 	bl	8007cf4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	7959      	ldrb	r1, [r3, #5]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d66:	b292      	uxth	r2, r2
 8006d68:	9202      	str	r2, [sp, #8]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	9201      	str	r2, [sp, #4]
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	4603      	mov	r3, r0
 8006d72:	2200      	movs	r2, #0
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 ffbd 	bl	8007cf4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d7a:	e0e3      	b.n	8006f44 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	f040 80e0 	bne.w	8006f44 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	220d      	movs	r2, #13
 8006d88:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	705a      	strb	r2, [r3, #1]
      break;
 8006d90:	e0d8      	b.n	8006f44 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006d92:	2109      	movs	r1, #9
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f99d 	bl	80070d4 <USBH_Get_CfgDesc>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d9e:	7bbb      	ldrb	r3, [r7, #14]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d103      	bne.n	8006dac <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2204      	movs	r2, #4
 8006da8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006daa:	e0cd      	b.n	8006f48 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	f040 80ca 	bne.w	8006f48 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dba:	3301      	adds	r3, #1
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d903      	bls.n	8006dd6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	220d      	movs	r2, #13
 8006dd2:	701a      	strb	r2, [r3, #0]
      break;
 8006dd4:	e0b8      	b.n	8006f48 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	795b      	ldrb	r3, [r3, #5]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 ffd9 	bl	8007d94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	791b      	ldrb	r3, [r3, #4]
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 ffd3 	bl	8007d94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	701a      	strb	r2, [r3, #0]
      break;
 8006dfa:	e0a5      	b.n	8006f48 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006e02:	4619      	mov	r1, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f965 	bl	80070d4 <USBH_Get_CfgDesc>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d103      	bne.n	8006e1c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2205      	movs	r2, #5
 8006e18:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e1a:	e097      	b.n	8006f4c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e1c:	7bbb      	ldrb	r3, [r7, #14]
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	f040 8094 	bne.w	8006f4c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	d903      	bls.n	8006e46 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	220d      	movs	r2, #13
 8006e42:	701a      	strb	r2, [r3, #0]
      break;
 8006e44:	e082      	b.n	8006f4c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	795b      	ldrb	r3, [r3, #5]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 ffa1 	bl	8007d94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	791b      	ldrb	r3, [r3, #4]
 8006e56:	4619      	mov	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 ff9b 	bl	8007d94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	701a      	strb	r2, [r3, #0]
      break;
 8006e6a:	e06f      	b.n	8006f4c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d019      	beq.n	8006eaa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e82:	23ff      	movs	r3, #255	; 0xff
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f949 	bl	800711c <USBH_Get_StringDesc>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e8e:	7bbb      	ldrb	r3, [r7, #14]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d103      	bne.n	8006e9c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2206      	movs	r2, #6
 8006e98:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e9a:	e059      	b.n	8006f50 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e9c:	7bbb      	ldrb	r3, [r7, #14]
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d156      	bne.n	8006f50 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2206      	movs	r2, #6
 8006ea6:	705a      	strb	r2, [r3, #1]
      break;
 8006ea8:	e052      	b.n	8006f50 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2206      	movs	r2, #6
 8006eae:	705a      	strb	r2, [r3, #1]
      break;
 8006eb0:	e04e      	b.n	8006f50 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d019      	beq.n	8006ef0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ec8:	23ff      	movs	r3, #255	; 0xff
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f926 	bl	800711c <USBH_Get_StringDesc>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ed4:	7bbb      	ldrb	r3, [r7, #14]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d103      	bne.n	8006ee2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2207      	movs	r2, #7
 8006ede:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006ee0:	e038      	b.n	8006f54 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	2b03      	cmp	r3, #3
 8006ee6:	d135      	bne.n	8006f54 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2207      	movs	r2, #7
 8006eec:	705a      	strb	r2, [r3, #1]
      break;
 8006eee:	e031      	b.n	8006f54 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2207      	movs	r2, #7
 8006ef4:	705a      	strb	r2, [r3, #1]
      break;
 8006ef6:	e02d      	b.n	8006f54 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d017      	beq.n	8006f32 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006f0e:	23ff      	movs	r3, #255	; 0xff
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f903 	bl	800711c <USBH_Get_StringDesc>
 8006f16:	4603      	mov	r3, r0
 8006f18:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f1a:	7bbb      	ldrb	r3, [r7, #14]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d102      	bne.n	8006f26 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006f24:	e018      	b.n	8006f58 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f26:	7bbb      	ldrb	r3, [r7, #14]
 8006f28:	2b03      	cmp	r3, #3
 8006f2a:	d115      	bne.n	8006f58 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f30:	e012      	b.n	8006f58 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	73fb      	strb	r3, [r7, #15]
      break;
 8006f36:	e00f      	b.n	8006f58 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006f38:	bf00      	nop
 8006f3a:	e00e      	b.n	8006f5a <USBH_HandleEnum+0x3be>
      break;
 8006f3c:	bf00      	nop
 8006f3e:	e00c      	b.n	8006f5a <USBH_HandleEnum+0x3be>
      break;
 8006f40:	bf00      	nop
 8006f42:	e00a      	b.n	8006f5a <USBH_HandleEnum+0x3be>
      break;
 8006f44:	bf00      	nop
 8006f46:	e008      	b.n	8006f5a <USBH_HandleEnum+0x3be>
      break;
 8006f48:	bf00      	nop
 8006f4a:	e006      	b.n	8006f5a <USBH_HandleEnum+0x3be>
      break;
 8006f4c:	bf00      	nop
 8006f4e:	e004      	b.n	8006f5a <USBH_HandleEnum+0x3be>
      break;
 8006f50:	bf00      	nop
 8006f52:	e002      	b.n	8006f5a <USBH_HandleEnum+0x3be>
      break;
 8006f54:	bf00      	nop
 8006f56:	e000      	b.n	8006f5a <USBH_HandleEnum+0x3be>
      break;
 8006f58:	bf00      	nop
  }
  return Status;
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006f76:	bf00      	nop
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b082      	sub	sp, #8
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f804 	bl	8006fa6 <USBH_HandleSof>
}
 8006f9e:	bf00      	nop
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b082      	sub	sp, #8
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b0b      	cmp	r3, #11
 8006fb6:	d10a      	bne.n	8006fce <USBH_HandleSof+0x28>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d005      	beq.n	8006fce <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	4798      	blx	r3
  }
}
 8006fce:	bf00      	nop
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006fe6:	bf00      	nop
}
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b083      	sub	sp, #12
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007002:	bf00      	nop
}
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 f846 	bl	80080ee <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	791b      	ldrb	r3, [r3, #4]
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fe93 	bl	8007d94 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	795b      	ldrb	r3, [r3, #5]
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fe8d 	bl	8007d94 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af02      	add	r7, sp, #8
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	460b      	mov	r3, r1
 800708e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007096:	78fb      	ldrb	r3, [r7, #3]
 8007098:	b29b      	uxth	r3, r3
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	4613      	mov	r3, r2
 800709e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070a2:	2100      	movs	r1, #0
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f864 	bl	8007172 <USBH_GetDescriptor>
 80070aa:	4603      	mov	r3, r0
 80070ac:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80070ae:	7bfb      	ldrb	r3, [r7, #15]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10a      	bne.n	80070ca <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070c0:	78fa      	ldrb	r2, [r7, #3]
 80070c2:	b292      	uxth	r2, r2
 80070c4:	4619      	mov	r1, r3
 80070c6:	f000 f919 	bl	80072fc <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af02      	add	r7, sp, #8
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	331c      	adds	r3, #28
 80070e4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80070e6:	887b      	ldrh	r3, [r7, #2]
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070f0:	2100      	movs	r1, #0
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f83d 	bl	8007172 <USBH_GetDescriptor>
 80070f8:	4603      	mov	r3, r0
 80070fa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d107      	bne.n	8007112 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007102:	887b      	ldrh	r3, [r7, #2]
 8007104:	461a      	mov	r2, r3
 8007106:	68b9      	ldr	r1, [r7, #8]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f989 	bl	8007420 <USBH_ParseCfgDesc>
 800710e:	4603      	mov	r3, r0
 8007110:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007112:	7bfb      	ldrb	r3, [r7, #15]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af02      	add	r7, sp, #8
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	607a      	str	r2, [r7, #4]
 8007126:	461a      	mov	r2, r3
 8007128:	460b      	mov	r3, r1
 800712a:	72fb      	strb	r3, [r7, #11]
 800712c:	4613      	mov	r3, r2
 800712e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007130:	7afb      	ldrb	r3, [r7, #11]
 8007132:	b29b      	uxth	r3, r3
 8007134:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007138:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007140:	893b      	ldrh	r3, [r7, #8]
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	460b      	mov	r3, r1
 8007146:	2100      	movs	r1, #0
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f000 f812 	bl	8007172 <USBH_GetDescriptor>
 800714e:	4603      	mov	r3, r0
 8007150:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007152:	7dfb      	ldrb	r3, [r7, #23]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d107      	bne.n	8007168 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800715e:	893a      	ldrh	r2, [r7, #8]
 8007160:	6879      	ldr	r1, [r7, #4]
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fb26 	bl	80077b4 <USBH_ParseStringDesc>
  }

  return status;
 8007168:	7dfb      	ldrb	r3, [r7, #23]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	607b      	str	r3, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	72fb      	strb	r3, [r7, #11]
 8007180:	4613      	mov	r3, r2
 8007182:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	789b      	ldrb	r3, [r3, #2]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d11c      	bne.n	80071c6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800718c:	7afb      	ldrb	r3, [r7, #11]
 800718e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007192:	b2da      	uxtb	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2206      	movs	r2, #6
 800719c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	893a      	ldrh	r2, [r7, #8]
 80071a2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80071a4:	893b      	ldrh	r3, [r7, #8]
 80071a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80071aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ae:	d104      	bne.n	80071ba <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f240 4209 	movw	r2, #1033	; 0x409
 80071b6:	829a      	strh	r2, [r3, #20]
 80071b8:	e002      	b.n	80071c0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8b3a      	ldrh	r2, [r7, #24]
 80071c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80071c6:	8b3b      	ldrh	r3, [r7, #24]
 80071c8:	461a      	mov	r2, r3
 80071ca:	6879      	ldr	r1, [r7, #4]
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 fb3f 	bl	8007850 <USBH_CtlReq>
 80071d2:	4603      	mov	r3, r0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	789b      	ldrb	r3, [r3, #2]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d10f      	bne.n	8007210 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2205      	movs	r2, #5
 80071fa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80071fc:	78fb      	ldrb	r3, [r7, #3]
 80071fe:	b29a      	uxth	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007210:	2200      	movs	r2, #0
 8007212:	2100      	movs	r1, #0
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fb1b 	bl	8007850 <USBH_CtlReq>
 800721a:	4603      	mov	r3, r0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	789b      	ldrb	r3, [r3, #2]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d10e      	bne.n	8007256 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2209      	movs	r2, #9
 8007242:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	887a      	ldrh	r2, [r7, #2]
 8007248:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007256:	2200      	movs	r2, #0
 8007258:	2100      	movs	r1, #0
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 faf8 	bl	8007850 <USBH_CtlReq>
 8007260:	4603      	mov	r3, r0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b082      	sub	sp, #8
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	460b      	mov	r3, r1
 8007274:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	789b      	ldrb	r3, [r3, #2]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d10f      	bne.n	800729e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2203      	movs	r2, #3
 8007288:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800728a:	78fb      	ldrb	r3, [r7, #3]
 800728c:	b29a      	uxth	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800729e:	2200      	movs	r2, #0
 80072a0:	2100      	movs	r1, #0
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fad4 	bl	8007850 <USBH_CtlReq>
 80072a8:	4603      	mov	r3, r0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b082      	sub	sp, #8
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	460b      	mov	r3, r1
 80072bc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	789b      	ldrb	r3, [r3, #2]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d10f      	bne.n	80072e6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2202      	movs	r2, #2
 80072ca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80072d8:	78fb      	ldrb	r3, [r7, #3]
 80072da:	b29a      	uxth	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80072e6:	2200      	movs	r2, #0
 80072e8:	2100      	movs	r1, #0
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fab0 	bl	8007850 <USBH_CtlReq>
 80072f0:	4603      	mov	r3, r0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	4613      	mov	r3, r2
 8007308:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	781a      	ldrb	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	785a      	ldrb	r2, [r3, #1]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	3302      	adds	r3, #2
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	b29a      	uxth	r2, r3
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	3303      	adds	r3, #3
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	b29b      	uxth	r3, r3
 800732a:	021b      	lsls	r3, r3, #8
 800732c:	b29b      	uxth	r3, r3
 800732e:	4313      	orrs	r3, r2
 8007330:	b29a      	uxth	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	791a      	ldrb	r2, [r3, #4]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	795a      	ldrb	r2, [r3, #5]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	799a      	ldrb	r2, [r3, #6]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	79da      	ldrb	r2, [r3, #7]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	79db      	ldrb	r3, [r3, #7]
 800735a:	2b20      	cmp	r3, #32
 800735c:	dc0f      	bgt.n	800737e <USBH_ParseDevDesc+0x82>
 800735e:	2b08      	cmp	r3, #8
 8007360:	db14      	blt.n	800738c <USBH_ParseDevDesc+0x90>
 8007362:	3b08      	subs	r3, #8
 8007364:	4a2d      	ldr	r2, [pc, #180]	; (800741c <USBH_ParseDevDesc+0x120>)
 8007366:	fa22 f303 	lsr.w	r3, r2, r3
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	bf14      	ite	ne
 8007372:	2301      	movne	r3, #1
 8007374:	2300      	moveq	r3, #0
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d102      	bne.n	8007382 <USBH_ParseDevDesc+0x86>
 800737c:	e006      	b.n	800738c <USBH_ParseDevDesc+0x90>
 800737e:	2b40      	cmp	r3, #64	; 0x40
 8007380:	d104      	bne.n	800738c <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	79da      	ldrb	r2, [r3, #7]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	71da      	strb	r2, [r3, #7]
      break;
 800738a:	e003      	b.n	8007394 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2240      	movs	r2, #64	; 0x40
 8007390:	71da      	strb	r2, [r3, #7]
      break;
 8007392:	bf00      	nop
  }

  if (length > 8U)
 8007394:	88fb      	ldrh	r3, [r7, #6]
 8007396:	2b08      	cmp	r3, #8
 8007398:	d939      	bls.n	800740e <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	3308      	adds	r3, #8
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	3309      	adds	r3, #9
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	021b      	lsls	r3, r3, #8
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	4313      	orrs	r3, r2
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	330a      	adds	r3, #10
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	b29a      	uxth	r2, r3
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	330b      	adds	r3, #11
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	021b      	lsls	r3, r3, #8
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	4313      	orrs	r3, r2
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	330c      	adds	r3, #12
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	b29a      	uxth	r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	330d      	adds	r3, #13
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	021b      	lsls	r3, r3, #8
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	4313      	orrs	r3, r2
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	7b9a      	ldrb	r2, [r3, #14]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	7bda      	ldrb	r2, [r3, #15]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	7c1a      	ldrb	r2, [r3, #16]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	7c5a      	ldrb	r2, [r3, #17]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	745a      	strb	r2, [r3, #17]
  }
}
 800740e:	bf00      	nop
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	01000101 	.word	0x01000101

08007420 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b08c      	sub	sp, #48	; 0x30
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	4613      	mov	r3, r2
 800742c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007434:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007440:	2300      	movs	r3, #0
 8007442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	781a      	ldrb	r2, [r3, #0]
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	785a      	ldrb	r2, [r3, #1]
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	3302      	adds	r3, #2
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	b29a      	uxth	r2, r3
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	3303      	adds	r3, #3
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	b29b      	uxth	r3, r3
 8007470:	021b      	lsls	r3, r3, #8
 8007472:	b29b      	uxth	r3, r3
 8007474:	4313      	orrs	r3, r2
 8007476:	b29b      	uxth	r3, r3
 8007478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800747c:	bf28      	it	cs
 800747e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007482:	b29a      	uxth	r2, r3
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	791a      	ldrb	r2, [r3, #4]
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	795a      	ldrb	r2, [r3, #5]
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	799a      	ldrb	r2, [r3, #6]
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	79da      	ldrb	r2, [r3, #7]
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	7a1a      	ldrb	r2, [r3, #8]
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	2b09      	cmp	r3, #9
 80074b6:	d002      	beq.n	80074be <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	2209      	movs	r2, #9
 80074bc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80074be:	88fb      	ldrh	r3, [r7, #6]
 80074c0:	2b09      	cmp	r3, #9
 80074c2:	f240 809d 	bls.w	8007600 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80074c6:	2309      	movs	r3, #9
 80074c8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80074ca:	2300      	movs	r3, #0
 80074cc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80074ce:	e081      	b.n	80075d4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80074d0:	f107 0316 	add.w	r3, r7, #22
 80074d4:	4619      	mov	r1, r3
 80074d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074d8:	f000 f99f 	bl	800781a <USBH_GetNextDesc>
 80074dc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	785b      	ldrb	r3, [r3, #1]
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	d176      	bne.n	80075d4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80074e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	2b09      	cmp	r3, #9
 80074ec:	d002      	beq.n	80074f4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80074ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f0:	2209      	movs	r2, #9
 80074f2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80074f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074f8:	221a      	movs	r2, #26
 80074fa:	fb02 f303 	mul.w	r3, r2, r3
 80074fe:	3308      	adds	r3, #8
 8007500:	6a3a      	ldr	r2, [r7, #32]
 8007502:	4413      	add	r3, r2
 8007504:	3302      	adds	r3, #2
 8007506:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800750a:	69f8      	ldr	r0, [r7, #28]
 800750c:	f000 f87e 	bl	800760c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800751a:	e043      	b.n	80075a4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800751c:	f107 0316 	add.w	r3, r7, #22
 8007520:	4619      	mov	r1, r3
 8007522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007524:	f000 f979 	bl	800781a <USBH_GetNextDesc>
 8007528:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	785b      	ldrb	r3, [r3, #1]
 800752e:	2b05      	cmp	r3, #5
 8007530:	d138      	bne.n	80075a4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	795b      	ldrb	r3, [r3, #5]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d10f      	bne.n	800755a <USBH_ParseCfgDesc+0x13a>
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	799b      	ldrb	r3, [r3, #6]
 800753e:	2b02      	cmp	r3, #2
 8007540:	d10b      	bne.n	800755a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	79db      	ldrb	r3, [r3, #7]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10f      	bne.n	800756a <USBH_ParseCfgDesc+0x14a>
 800754a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	2b09      	cmp	r3, #9
 8007550:	d00b      	beq.n	800756a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007554:	2209      	movs	r2, #9
 8007556:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007558:	e007      	b.n	800756a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b07      	cmp	r3, #7
 8007560:	d004      	beq.n	800756c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	2207      	movs	r2, #7
 8007566:	701a      	strb	r2, [r3, #0]
 8007568:	e000      	b.n	800756c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800756a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800756c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007570:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007574:	3201      	adds	r2, #1
 8007576:	00d2      	lsls	r2, r2, #3
 8007578:	211a      	movs	r1, #26
 800757a:	fb01 f303 	mul.w	r3, r1, r3
 800757e:	4413      	add	r3, r2
 8007580:	3308      	adds	r3, #8
 8007582:	6a3a      	ldr	r2, [r7, #32]
 8007584:	4413      	add	r3, r2
 8007586:	3304      	adds	r3, #4
 8007588:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800758a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800758c:	69b9      	ldr	r1, [r7, #24]
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 f86b 	bl	800766a <USBH_ParseEPDesc>
 8007594:	4603      	mov	r3, r0
 8007596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800759a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800759e:	3301      	adds	r3, #1
 80075a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	791b      	ldrb	r3, [r3, #4]
 80075a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d204      	bcs.n	80075ba <USBH_ParseCfgDesc+0x19a>
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	885a      	ldrh	r2, [r3, #2]
 80075b4:	8afb      	ldrh	r3, [r7, #22]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d8b0      	bhi.n	800751c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	791b      	ldrb	r3, [r3, #4]
 80075be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d201      	bcs.n	80075ca <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e01c      	b.n	8007604 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80075ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075ce:	3301      	adds	r3, #1
 80075d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80075d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d805      	bhi.n	80075e8 <USBH_ParseCfgDesc+0x1c8>
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	885a      	ldrh	r2, [r3, #2]
 80075e0:	8afb      	ldrh	r3, [r7, #22]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	f63f af74 	bhi.w	80074d0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	791b      	ldrb	r3, [r3, #4]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	bf28      	it	cs
 80075f0:	2302      	movcs	r3, #2
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d201      	bcs.n	8007600 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e001      	b.n	8007604 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007600:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007604:	4618      	mov	r0, r3
 8007606:	3730      	adds	r7, #48	; 0x30
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781a      	ldrb	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	785a      	ldrb	r2, [r3, #1]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	789a      	ldrb	r2, [r3, #2]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	78da      	ldrb	r2, [r3, #3]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	791a      	ldrb	r2, [r3, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	795a      	ldrb	r2, [r3, #5]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	799a      	ldrb	r2, [r3, #6]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	79da      	ldrb	r2, [r3, #7]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	7a1a      	ldrb	r2, [r3, #8]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	721a      	strb	r2, [r3, #8]
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800766a:	b480      	push	{r7}
 800766c:	b087      	sub	sp, #28
 800766e:	af00      	add	r7, sp, #0
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	781a      	ldrb	r2, [r3, #0]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	785a      	ldrb	r2, [r3, #1]
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	789a      	ldrb	r2, [r3, #2]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	78da      	ldrb	r2, [r3, #3]
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	3304      	adds	r3, #4
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	3305      	adds	r3, #5
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	021b      	lsls	r3, r3, #8
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	4313      	orrs	r3, r2
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	799a      	ldrb	r2, [r3, #6]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	889b      	ldrh	r3, [r3, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d102      	bne.n	80076cc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80076c6:	2303      	movs	r3, #3
 80076c8:	75fb      	strb	r3, [r7, #23]
 80076ca:	e033      	b.n	8007734 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	889b      	ldrh	r3, [r3, #4]
 80076d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80076d4:	f023 0307 	bic.w	r3, r3, #7
 80076d8:	b29a      	uxth	r2, r3
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	889b      	ldrh	r3, [r3, #4]
 80076e2:	b21a      	sxth	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	3304      	adds	r3, #4
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	b299      	uxth	r1, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3305      	adds	r3, #5
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	021b      	lsls	r3, r3, #8
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	430b      	orrs	r3, r1
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007700:	2b00      	cmp	r3, #0
 8007702:	d110      	bne.n	8007726 <USBH_ParseEPDesc+0xbc>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3304      	adds	r3, #4
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	b299      	uxth	r1, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3305      	adds	r3, #5
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	b29b      	uxth	r3, r3
 8007714:	021b      	lsls	r3, r3, #8
 8007716:	b29b      	uxth	r3, r3
 8007718:	430b      	orrs	r3, r1
 800771a:	b29b      	uxth	r3, r3
 800771c:	b21b      	sxth	r3, r3
 800771e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007722:	b21b      	sxth	r3, r3
 8007724:	e001      	b.n	800772a <USBH_ParseEPDesc+0xc0>
 8007726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800772a:	4313      	orrs	r3, r2
 800772c:	b21b      	sxth	r3, r3
 800772e:	b29a      	uxth	r2, r3
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800773a:	2b00      	cmp	r3, #0
 800773c:	d116      	bne.n	800776c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	78db      	ldrb	r3, [r3, #3]
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	2b01      	cmp	r3, #1
 8007748:	d005      	beq.n	8007756 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	78db      	ldrb	r3, [r3, #3]
 800774e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007752:	2b03      	cmp	r3, #3
 8007754:	d127      	bne.n	80077a6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	799b      	ldrb	r3, [r3, #6]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <USBH_ParseEPDesc+0xfc>
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	799b      	ldrb	r3, [r3, #6]
 8007762:	2b10      	cmp	r3, #16
 8007764:	d91f      	bls.n	80077a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007766:	2303      	movs	r3, #3
 8007768:	75fb      	strb	r3, [r7, #23]
 800776a:	e01c      	b.n	80077a6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	78db      	ldrb	r3, [r3, #3]
 8007770:	f003 0303 	and.w	r3, r3, #3
 8007774:	2b01      	cmp	r3, #1
 8007776:	d10a      	bne.n	800778e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	799b      	ldrb	r3, [r3, #6]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d003      	beq.n	8007788 <USBH_ParseEPDesc+0x11e>
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	799b      	ldrb	r3, [r3, #6]
 8007784:	2b10      	cmp	r3, #16
 8007786:	d90e      	bls.n	80077a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007788:	2303      	movs	r3, #3
 800778a:	75fb      	strb	r3, [r7, #23]
 800778c:	e00b      	b.n	80077a6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	78db      	ldrb	r3, [r3, #3]
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	2b03      	cmp	r3, #3
 8007798:	d105      	bne.n	80077a6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	799b      	ldrb	r3, [r3, #6]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80077a2:	2303      	movs	r3, #3
 80077a4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	371c      	adds	r7, #28
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b087      	sub	sp, #28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	4613      	mov	r3, r2
 80077c0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	3301      	adds	r3, #1
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b03      	cmp	r3, #3
 80077ca:	d120      	bne.n	800780e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	1e9a      	subs	r2, r3, #2
 80077d2:	88fb      	ldrh	r3, [r7, #6]
 80077d4:	4293      	cmp	r3, r2
 80077d6:	bf28      	it	cs
 80077d8:	4613      	movcs	r3, r2
 80077da:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	3302      	adds	r3, #2
 80077e0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80077e2:	2300      	movs	r3, #0
 80077e4:	82fb      	strh	r3, [r7, #22]
 80077e6:	e00b      	b.n	8007800 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80077e8:	8afb      	ldrh	r3, [r7, #22]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	4413      	add	r3, r2
 80077ee:	781a      	ldrb	r2, [r3, #0]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	3301      	adds	r3, #1
 80077f8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80077fa:	8afb      	ldrh	r3, [r7, #22]
 80077fc:	3302      	adds	r3, #2
 80077fe:	82fb      	strh	r3, [r7, #22]
 8007800:	8afa      	ldrh	r2, [r7, #22]
 8007802:	8abb      	ldrh	r3, [r7, #20]
 8007804:	429a      	cmp	r2, r3
 8007806:	d3ef      	bcc.n	80077e8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2200      	movs	r2, #0
 800780c:	701a      	strb	r2, [r3, #0]
  }
}
 800780e:	bf00      	nop
 8007810:	371c      	adds	r7, #28
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800781a:	b480      	push	{r7}
 800781c:	b085      	sub	sp, #20
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	881a      	ldrh	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	b29b      	uxth	r3, r3
 800782e:	4413      	add	r3, r2
 8007830:	b29a      	uxth	r2, r3
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4413      	add	r3, r2
 8007840:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007842:	68fb      	ldr	r3, [r7, #12]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	4613      	mov	r3, r2
 800785c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800785e:	2301      	movs	r3, #1
 8007860:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	789b      	ldrb	r3, [r3, #2]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d002      	beq.n	8007870 <USBH_CtlReq+0x20>
 800786a:	2b02      	cmp	r3, #2
 800786c:	d00f      	beq.n	800788e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800786e:	e027      	b.n	80078c0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	88fa      	ldrh	r2, [r7, #6]
 800787a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2201      	movs	r2, #1
 8007880:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2202      	movs	r2, #2
 8007886:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007888:	2301      	movs	r3, #1
 800788a:	75fb      	strb	r3, [r7, #23]
      break;
 800788c:	e018      	b.n	80078c0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 f81c 	bl	80078cc <USBH_HandleControl>
 8007894:	4603      	mov	r3, r0
 8007896:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007898:	7dfb      	ldrb	r3, [r7, #23]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <USBH_CtlReq+0x54>
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d106      	bne.n	80078b2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2201      	movs	r2, #1
 80078a8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	761a      	strb	r2, [r3, #24]
      break;
 80078b0:	e005      	b.n	80078be <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d102      	bne.n	80078be <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	709a      	strb	r2, [r3, #2]
      break;
 80078be:	bf00      	nop
  }
  return status;
 80078c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3718      	adds	r7, #24
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af02      	add	r7, sp, #8
 80078d2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80078d4:	2301      	movs	r3, #1
 80078d6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078d8:	2300      	movs	r3, #0
 80078da:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	7e1b      	ldrb	r3, [r3, #24]
 80078e0:	3b01      	subs	r3, #1
 80078e2:	2b0a      	cmp	r3, #10
 80078e4:	f200 8156 	bhi.w	8007b94 <USBH_HandleControl+0x2c8>
 80078e8:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <USBH_HandleControl+0x24>)
 80078ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ee:	bf00      	nop
 80078f0:	0800791d 	.word	0x0800791d
 80078f4:	08007937 	.word	0x08007937
 80078f8:	080079a1 	.word	0x080079a1
 80078fc:	080079c7 	.word	0x080079c7
 8007900:	080079ff 	.word	0x080079ff
 8007904:	08007a29 	.word	0x08007a29
 8007908:	08007a7b 	.word	0x08007a7b
 800790c:	08007a9d 	.word	0x08007a9d
 8007910:	08007ad9 	.word	0x08007ad9
 8007914:	08007aff 	.word	0x08007aff
 8007918:	08007b3d 	.word	0x08007b3d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f103 0110 	add.w	r1, r3, #16
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	795b      	ldrb	r3, [r3, #5]
 8007926:	461a      	mov	r2, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f943 	bl	8007bb4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2202      	movs	r2, #2
 8007932:	761a      	strb	r2, [r3, #24]
      break;
 8007934:	e139      	b.n	8007baa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	795b      	ldrb	r3, [r3, #5]
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fcc5 	bl	80082cc <USBH_LL_GetURBState>
 8007942:	4603      	mov	r3, r0
 8007944:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d11e      	bne.n	800798a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	7c1b      	ldrb	r3, [r3, #16]
 8007950:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007954:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	8adb      	ldrh	r3, [r3, #22]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800795e:	7b7b      	ldrb	r3, [r7, #13]
 8007960:	2b80      	cmp	r3, #128	; 0x80
 8007962:	d103      	bne.n	800796c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2203      	movs	r2, #3
 8007968:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800796a:	e115      	b.n	8007b98 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2205      	movs	r2, #5
 8007970:	761a      	strb	r2, [r3, #24]
      break;
 8007972:	e111      	b.n	8007b98 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007974:	7b7b      	ldrb	r3, [r7, #13]
 8007976:	2b80      	cmp	r3, #128	; 0x80
 8007978:	d103      	bne.n	8007982 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2209      	movs	r2, #9
 800797e:	761a      	strb	r2, [r3, #24]
      break;
 8007980:	e10a      	b.n	8007b98 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2207      	movs	r2, #7
 8007986:	761a      	strb	r2, [r3, #24]
      break;
 8007988:	e106      	b.n	8007b98 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800798a:	7bbb      	ldrb	r3, [r7, #14]
 800798c:	2b04      	cmp	r3, #4
 800798e:	d003      	beq.n	8007998 <USBH_HandleControl+0xcc>
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	2b02      	cmp	r3, #2
 8007994:	f040 8100 	bne.w	8007b98 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	220b      	movs	r2, #11
 800799c:	761a      	strb	r2, [r3, #24]
      break;
 800799e:	e0fb      	b.n	8007b98 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6899      	ldr	r1, [r3, #8]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	899a      	ldrh	r2, [r3, #12]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	791b      	ldrb	r3, [r3, #4]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f93a 	bl	8007c32 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2204      	movs	r2, #4
 80079c2:	761a      	strb	r2, [r3, #24]
      break;
 80079c4:	e0f1      	b.n	8007baa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	791b      	ldrb	r3, [r3, #4]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fc7d 	bl	80082cc <USBH_LL_GetURBState>
 80079d2:	4603      	mov	r3, r0
 80079d4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d102      	bne.n	80079e2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2209      	movs	r2, #9
 80079e0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	2b05      	cmp	r3, #5
 80079e6:	d102      	bne.n	80079ee <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80079e8:	2303      	movs	r3, #3
 80079ea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079ec:	e0d6      	b.n	8007b9c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	f040 80d3 	bne.w	8007b9c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	220b      	movs	r2, #11
 80079fa:	761a      	strb	r2, [r3, #24]
      break;
 80079fc:	e0ce      	b.n	8007b9c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6899      	ldr	r1, [r3, #8]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	899a      	ldrh	r2, [r3, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	795b      	ldrb	r3, [r3, #5]
 8007a0a:	2001      	movs	r0, #1
 8007a0c:	9000      	str	r0, [sp, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f8ea 	bl	8007be8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2206      	movs	r2, #6
 8007a24:	761a      	strb	r2, [r3, #24]
      break;
 8007a26:	e0c0      	b.n	8007baa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	795b      	ldrb	r3, [r3, #5]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fc4c 	bl	80082cc <USBH_LL_GetURBState>
 8007a34:	4603      	mov	r3, r0
 8007a36:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d103      	bne.n	8007a46 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2207      	movs	r2, #7
 8007a42:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a44:	e0ac      	b.n	8007ba0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	2b05      	cmp	r3, #5
 8007a4a:	d105      	bne.n	8007a58 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	220c      	movs	r2, #12
 8007a50:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007a52:	2303      	movs	r3, #3
 8007a54:	73fb      	strb	r3, [r7, #15]
      break;
 8007a56:	e0a3      	b.n	8007ba0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d103      	bne.n	8007a66 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2205      	movs	r2, #5
 8007a62:	761a      	strb	r2, [r3, #24]
      break;
 8007a64:	e09c      	b.n	8007ba0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	f040 8099 	bne.w	8007ba0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	220b      	movs	r2, #11
 8007a72:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007a74:	2302      	movs	r3, #2
 8007a76:	73fb      	strb	r3, [r7, #15]
      break;
 8007a78:	e092      	b.n	8007ba0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	791b      	ldrb	r3, [r3, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2100      	movs	r1, #0
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f8d5 	bl	8007c32 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2208      	movs	r2, #8
 8007a98:	761a      	strb	r2, [r3, #24]

      break;
 8007a9a:	e086      	b.n	8007baa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	791b      	ldrb	r3, [r3, #4]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fc12 	bl	80082cc <USBH_LL_GetURBState>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d105      	bne.n	8007abe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	220d      	movs	r2, #13
 8007ab6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007abc:	e072      	b.n	8007ba4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	d103      	bne.n	8007acc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	220b      	movs	r2, #11
 8007ac8:	761a      	strb	r2, [r3, #24]
      break;
 8007aca:	e06b      	b.n	8007ba4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	2b05      	cmp	r3, #5
 8007ad0:	d168      	bne.n	8007ba4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad6:	e065      	b.n	8007ba4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	795b      	ldrb	r3, [r3, #5]
 8007adc:	2201      	movs	r2, #1
 8007ade:	9200      	str	r2, [sp, #0]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f87f 	bl	8007be8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	220a      	movs	r2, #10
 8007afa:	761a      	strb	r2, [r3, #24]
      break;
 8007afc:	e055      	b.n	8007baa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	795b      	ldrb	r3, [r3, #5]
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fbe1 	bl	80082cc <USBH_LL_GetURBState>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d105      	bne.n	8007b20 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007b14:	2300      	movs	r3, #0
 8007b16:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	220d      	movs	r2, #13
 8007b1c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b1e:	e043      	b.n	8007ba8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b20:	7bbb      	ldrb	r3, [r7, #14]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d103      	bne.n	8007b2e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2209      	movs	r2, #9
 8007b2a:	761a      	strb	r2, [r3, #24]
      break;
 8007b2c:	e03c      	b.n	8007ba8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007b2e:	7bbb      	ldrb	r3, [r7, #14]
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d139      	bne.n	8007ba8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	220b      	movs	r2, #11
 8007b38:	761a      	strb	r2, [r3, #24]
      break;
 8007b3a:	e035      	b.n	8007ba8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	7e5b      	ldrb	r3, [r3, #25]
 8007b40:	3301      	adds	r3, #1
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	765a      	strb	r2, [r3, #25]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	7e5b      	ldrb	r3, [r3, #25]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d806      	bhi.n	8007b5e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007b5c:	e025      	b.n	8007baa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b64:	2106      	movs	r1, #6
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	795b      	ldrb	r3, [r3, #5]
 8007b74:	4619      	mov	r1, r3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f90c 	bl	8007d94 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	791b      	ldrb	r3, [r3, #4]
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f906 	bl	8007d94 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007b8e:	2302      	movs	r3, #2
 8007b90:	73fb      	strb	r3, [r7, #15]
      break;
 8007b92:	e00a      	b.n	8007baa <USBH_HandleControl+0x2de>

    default:
      break;
 8007b94:	bf00      	nop
 8007b96:	e008      	b.n	8007baa <USBH_HandleControl+0x2de>
      break;
 8007b98:	bf00      	nop
 8007b9a:	e006      	b.n	8007baa <USBH_HandleControl+0x2de>
      break;
 8007b9c:	bf00      	nop
 8007b9e:	e004      	b.n	8007baa <USBH_HandleControl+0x2de>
      break;
 8007ba0:	bf00      	nop
 8007ba2:	e002      	b.n	8007baa <USBH_HandleControl+0x2de>
      break;
 8007ba4:	bf00      	nop
 8007ba6:	e000      	b.n	8007baa <USBH_HandleControl+0x2de>
      break;
 8007ba8:	bf00      	nop
  }

  return status;
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af04      	add	r7, sp, #16
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007bc2:	79f9      	ldrb	r1, [r7, #7]
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	9303      	str	r3, [sp, #12]
 8007bc8:	2308      	movs	r3, #8
 8007bca:	9302      	str	r3, [sp, #8]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	9301      	str	r3, [sp, #4]
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 fb46 	bl	800826a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b088      	sub	sp, #32
 8007bec:	af04      	add	r7, sp, #16
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	80fb      	strh	r3, [r7, #6]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c0c:	7979      	ldrb	r1, [r7, #5]
 8007c0e:	7e3b      	ldrb	r3, [r7, #24]
 8007c10:	9303      	str	r3, [sp, #12]
 8007c12:	88fb      	ldrh	r3, [r7, #6]
 8007c14:	9302      	str	r3, [sp, #8]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	9301      	str	r3, [sp, #4]
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	2200      	movs	r2, #0
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 fb21 	bl	800826a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b088      	sub	sp, #32
 8007c36:	af04      	add	r7, sp, #16
 8007c38:	60f8      	str	r0, [r7, #12]
 8007c3a:	60b9      	str	r1, [r7, #8]
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	461a      	mov	r2, r3
 8007c40:	460b      	mov	r3, r1
 8007c42:	80fb      	strh	r3, [r7, #6]
 8007c44:	4613      	mov	r3, r2
 8007c46:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c48:	7979      	ldrb	r1, [r7, #5]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	9303      	str	r3, [sp, #12]
 8007c4e:	88fb      	ldrh	r3, [r7, #6]
 8007c50:	9302      	str	r3, [sp, #8]
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	2301      	movs	r3, #1
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 fb03 	bl	800826a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c64:	2300      	movs	r3, #0

}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b088      	sub	sp, #32
 8007c72:	af04      	add	r7, sp, #16
 8007c74:	60f8      	str	r0, [r7, #12]
 8007c76:	60b9      	str	r1, [r7, #8]
 8007c78:	4611      	mov	r1, r2
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	80fb      	strh	r3, [r7, #6]
 8007c80:	4613      	mov	r3, r2
 8007c82:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c92:	7979      	ldrb	r1, [r7, #5]
 8007c94:	7e3b      	ldrb	r3, [r7, #24]
 8007c96:	9303      	str	r3, [sp, #12]
 8007c98:	88fb      	ldrh	r3, [r7, #6]
 8007c9a:	9302      	str	r3, [sp, #8]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	9301      	str	r3, [sp, #4]
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f000 fade 	bl	800826a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b088      	sub	sp, #32
 8007cbc:	af04      	add	r7, sp, #16
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	80fb      	strh	r3, [r7, #6]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007cce:	7979      	ldrb	r1, [r7, #5]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	9303      	str	r3, [sp, #12]
 8007cd4:	88fb      	ldrh	r3, [r7, #6]
 8007cd6:	9302      	str	r3, [sp, #8]
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	9301      	str	r3, [sp, #4]
 8007cdc:	2301      	movs	r3, #1
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f000 fac0 	bl	800826a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af04      	add	r7, sp, #16
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	4608      	mov	r0, r1
 8007cfe:	4611      	mov	r1, r2
 8007d00:	461a      	mov	r2, r3
 8007d02:	4603      	mov	r3, r0
 8007d04:	70fb      	strb	r3, [r7, #3]
 8007d06:	460b      	mov	r3, r1
 8007d08:	70bb      	strb	r3, [r7, #2]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007d0e:	7878      	ldrb	r0, [r7, #1]
 8007d10:	78ba      	ldrb	r2, [r7, #2]
 8007d12:	78f9      	ldrb	r1, [r7, #3]
 8007d14:	8b3b      	ldrh	r3, [r7, #24]
 8007d16:	9302      	str	r3, [sp, #8]
 8007d18:	7d3b      	ldrb	r3, [r7, #20]
 8007d1a:	9301      	str	r3, [sp, #4]
 8007d1c:	7c3b      	ldrb	r3, [r7, #16]
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	4603      	mov	r3, r0
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fa53 	bl	80081ce <USBH_LL_OpenPipe>

  return USBH_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b082      	sub	sp, #8
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007d3e:	78fb      	ldrb	r3, [r7, #3]
 8007d40:	4619      	mov	r1, r3
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa72 	bl	800822c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f836 	bl	8007dd0 <USBH_GetFreePipe>
 8007d64:	4603      	mov	r3, r0
 8007d66:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007d68:	89fb      	ldrh	r3, [r7, #14]
 8007d6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d00a      	beq.n	8007d88 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007d72:	78fa      	ldrb	r2, [r7, #3]
 8007d74:	89fb      	ldrh	r3, [r7, #14]
 8007d76:	f003 030f 	and.w	r3, r3, #15
 8007d7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d7e:	6879      	ldr	r1, [r7, #4]
 8007d80:	33e0      	adds	r3, #224	; 0xe0
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	440b      	add	r3, r1
 8007d86:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007d88:	89fb      	ldrh	r3, [r7, #14]
 8007d8a:	b2db      	uxtb	r3, r3
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007da0:	78fb      	ldrb	r3, [r7, #3]
 8007da2:	2b0f      	cmp	r3, #15
 8007da4:	d80d      	bhi.n	8007dc2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007da6:	78fb      	ldrb	r3, [r7, #3]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	33e0      	adds	r3, #224	; 0xe0
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4413      	add	r3, r2
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	78fb      	ldrb	r3, [r7, #3]
 8007db4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007db8:	6879      	ldr	r1, [r7, #4]
 8007dba:	33e0      	adds	r3, #224	; 0xe0
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	440b      	add	r3, r1
 8007dc0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007ddc:	2300      	movs	r3, #0
 8007dde:	73fb      	strb	r3, [r7, #15]
 8007de0:	e00f      	b.n	8007e02 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007de2:	7bfb      	ldrb	r3, [r7, #15]
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	33e0      	adds	r3, #224	; 0xe0
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d102      	bne.n	8007dfc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	e007      	b.n	8007e0c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	73fb      	strb	r3, [r7, #15]
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	2b0f      	cmp	r3, #15
 8007e06:	d9ec      	bls.n	8007de2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007e08:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	490e      	ldr	r1, [pc, #56]	; (8007e58 <MX_USB_HOST_Init+0x40>)
 8007e20:	480e      	ldr	r0, [pc, #56]	; (8007e5c <MX_USB_HOST_Init+0x44>)
 8007e22:	f7fe fba5 	bl	8006570 <USBH_Init>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007e2c:	f7f8 fe5a 	bl	8000ae4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007e30:	490b      	ldr	r1, [pc, #44]	; (8007e60 <MX_USB_HOST_Init+0x48>)
 8007e32:	480a      	ldr	r0, [pc, #40]	; (8007e5c <MX_USB_HOST_Init+0x44>)
 8007e34:	f7fe fc2a 	bl	800668c <USBH_RegisterClass>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007e3e:	f7f8 fe51 	bl	8000ae4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007e42:	4806      	ldr	r0, [pc, #24]	; (8007e5c <MX_USB_HOST_Init+0x44>)
 8007e44:	f7fe fcae 	bl	80067a4 <USBH_Start>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007e4e:	f7f8 fe49 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007e52:	bf00      	nop
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	08007e79 	.word	0x08007e79
 8007e5c:	20000210 	.word	0x20000210
 8007e60:	2000000c 	.word	0x2000000c

08007e64 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007e68:	4802      	ldr	r0, [pc, #8]	; (8007e74 <MX_USB_HOST_Process+0x10>)
 8007e6a:	f7fe fcab 	bl	80067c4 <USBH_Process>
}
 8007e6e:	bf00      	nop
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	20000210 	.word	0x20000210

08007e78 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e84:	78fb      	ldrb	r3, [r7, #3]
 8007e86:	3b01      	subs	r3, #1
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	d819      	bhi.n	8007ec0 <USBH_UserProcess+0x48>
 8007e8c:	a201      	add	r2, pc, #4	; (adr r2, 8007e94 <USBH_UserProcess+0x1c>)
 8007e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e92:	bf00      	nop
 8007e94:	08007ec1 	.word	0x08007ec1
 8007e98:	08007eb1 	.word	0x08007eb1
 8007e9c:	08007ec1 	.word	0x08007ec1
 8007ea0:	08007eb9 	.word	0x08007eb9
 8007ea4:	08007ea9 	.word	0x08007ea9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007ea8:	4b09      	ldr	r3, [pc, #36]	; (8007ed0 <USBH_UserProcess+0x58>)
 8007eaa:	2203      	movs	r2, #3
 8007eac:	701a      	strb	r2, [r3, #0]
  break;
 8007eae:	e008      	b.n	8007ec2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007eb0:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <USBH_UserProcess+0x58>)
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	701a      	strb	r2, [r3, #0]
  break;
 8007eb6:	e004      	b.n	8007ec2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007eb8:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <USBH_UserProcess+0x58>)
 8007eba:	2201      	movs	r2, #1
 8007ebc:	701a      	strb	r2, [r3, #0]
  break;
 8007ebe:	e000      	b.n	8007ec2 <USBH_UserProcess+0x4a>

  default:
  break;
 8007ec0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	200005e8 	.word	0x200005e8

08007ed4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b08a      	sub	sp, #40	; 0x28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007edc:	f107 0314 	add.w	r3, r7, #20
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	605a      	str	r2, [r3, #4]
 8007ee6:	609a      	str	r2, [r3, #8]
 8007ee8:	60da      	str	r2, [r3, #12]
 8007eea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ef4:	d147      	bne.n	8007f86 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	613b      	str	r3, [r7, #16]
 8007efa:	4b25      	ldr	r3, [pc, #148]	; (8007f90 <HAL_HCD_MspInit+0xbc>)
 8007efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efe:	4a24      	ldr	r2, [pc, #144]	; (8007f90 <HAL_HCD_MspInit+0xbc>)
 8007f00:	f043 0301 	orr.w	r3, r3, #1
 8007f04:	6313      	str	r3, [r2, #48]	; 0x30
 8007f06:	4b22      	ldr	r3, [pc, #136]	; (8007f90 <HAL_HCD_MspInit+0xbc>)
 8007f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	613b      	str	r3, [r7, #16]
 8007f10:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007f12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007f20:	f107 0314 	add.w	r3, r7, #20
 8007f24:	4619      	mov	r1, r3
 8007f26:	481b      	ldr	r0, [pc, #108]	; (8007f94 <HAL_HCD_MspInit+0xc0>)
 8007f28:	f7f9 f9b0 	bl	800128c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007f2c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f32:	2302      	movs	r3, #2
 8007f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f36:	2300      	movs	r3, #0
 8007f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f3e:	230a      	movs	r3, #10
 8007f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f42:	f107 0314 	add.w	r3, r7, #20
 8007f46:	4619      	mov	r1, r3
 8007f48:	4812      	ldr	r0, [pc, #72]	; (8007f94 <HAL_HCD_MspInit+0xc0>)
 8007f4a:	f7f9 f99f 	bl	800128c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f4e:	4b10      	ldr	r3, [pc, #64]	; (8007f90 <HAL_HCD_MspInit+0xbc>)
 8007f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f52:	4a0f      	ldr	r2, [pc, #60]	; (8007f90 <HAL_HCD_MspInit+0xbc>)
 8007f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f58:	6353      	str	r3, [r2, #52]	; 0x34
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	60fb      	str	r3, [r7, #12]
 8007f5e:	4b0c      	ldr	r3, [pc, #48]	; (8007f90 <HAL_HCD_MspInit+0xbc>)
 8007f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f62:	4a0b      	ldr	r2, [pc, #44]	; (8007f90 <HAL_HCD_MspInit+0xbc>)
 8007f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f68:	6453      	str	r3, [r2, #68]	; 0x44
 8007f6a:	4b09      	ldr	r3, [pc, #36]	; (8007f90 <HAL_HCD_MspInit+0xbc>)
 8007f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f76:	2200      	movs	r2, #0
 8007f78:	2100      	movs	r1, #0
 8007f7a:	2043      	movs	r0, #67	; 0x43
 8007f7c:	f7f9 f94f 	bl	800121e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f80:	2043      	movs	r0, #67	; 0x43
 8007f82:	f7f9 f968 	bl	8001256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f86:	bf00      	nop
 8007f88:	3728      	adds	r7, #40	; 0x28
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	40023800 	.word	0x40023800
 8007f94:	40020000 	.word	0x40020000

08007f98 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe ffeb 	bl	8006f82 <USBH_LL_IncTimer>
}
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7ff f823 	bl	800700e <USBH_LL_Connect>
}
 8007fc8:	bf00      	nop
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff f82c 	bl	800703c <USBH_LL_Disconnect>
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	70fb      	strb	r3, [r7, #3]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008016:	4618      	mov	r0, r3
 8008018:	f7fe ffdd 	bl	8006fd6 <USBH_LL_PortEnabled>
}
 800801c:	bf00      	nop
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008032:	4618      	mov	r0, r3
 8008034:	f7fe ffdd 	bl	8006ff2 <USBH_LL_PortDisabled>
}
 8008038:	bf00      	nop
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800804e:	2b01      	cmp	r3, #1
 8008050:	d12a      	bne.n	80080a8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008052:	4a18      	ldr	r2, [pc, #96]	; (80080b4 <USBH_LL_Init+0x74>)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a15      	ldr	r2, [pc, #84]	; (80080b4 <USBH_LL_Init+0x74>)
 800805e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008062:	4b14      	ldr	r3, [pc, #80]	; (80080b4 <USBH_LL_Init+0x74>)
 8008064:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008068:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800806a:	4b12      	ldr	r3, [pc, #72]	; (80080b4 <USBH_LL_Init+0x74>)
 800806c:	2208      	movs	r2, #8
 800806e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008070:	4b10      	ldr	r3, [pc, #64]	; (80080b4 <USBH_LL_Init+0x74>)
 8008072:	2201      	movs	r2, #1
 8008074:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008076:	4b0f      	ldr	r3, [pc, #60]	; (80080b4 <USBH_LL_Init+0x74>)
 8008078:	2200      	movs	r2, #0
 800807a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800807c:	4b0d      	ldr	r3, [pc, #52]	; (80080b4 <USBH_LL_Init+0x74>)
 800807e:	2202      	movs	r2, #2
 8008080:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008082:	4b0c      	ldr	r3, [pc, #48]	; (80080b4 <USBH_LL_Init+0x74>)
 8008084:	2200      	movs	r2, #0
 8008086:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008088:	480a      	ldr	r0, [pc, #40]	; (80080b4 <USBH_LL_Init+0x74>)
 800808a:	f7f9 face 	bl	800162a <HAL_HCD_Init>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008094:	f7f8 fd26 	bl	8000ae4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008098:	4806      	ldr	r0, [pc, #24]	; (80080b4 <USBH_LL_Init+0x74>)
 800809a:	f7f9 feb2 	bl	8001e02 <HAL_HCD_GetCurrentFrame>
 800809e:	4603      	mov	r3, r0
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7fe ff5e 	bl	8006f64 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	200005ec 	.word	0x200005ec

080080b8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7f9 fe21 	bl	8001d16 <HAL_HCD_Start>
 80080d4:	4603      	mov	r3, r0
 80080d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 f95c 	bl	8008398 <USBH_Get_USB_Status>
 80080e0:	4603      	mov	r3, r0
 80080e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008104:	4618      	mov	r0, r3
 8008106:	f7f9 fe29 	bl	8001d5c <HAL_HCD_Stop>
 800810a:	4603      	mov	r3, r0
 800810c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800810e:	7bfb      	ldrb	r3, [r7, #15]
 8008110:	4618      	mov	r0, r3
 8008112:	f000 f941 	bl	8008398 <USBH_Get_USB_Status>
 8008116:	4603      	mov	r3, r0
 8008118:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800811a:	7bbb      	ldrb	r3, [r7, #14]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800812c:	2301      	movs	r3, #1
 800812e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008136:	4618      	mov	r0, r3
 8008138:	f7f9 fe71 	bl	8001e1e <HAL_HCD_GetCurrentSpeed>
 800813c:	4603      	mov	r3, r0
 800813e:	2b02      	cmp	r3, #2
 8008140:	d00c      	beq.n	800815c <USBH_LL_GetSpeed+0x38>
 8008142:	2b02      	cmp	r3, #2
 8008144:	d80d      	bhi.n	8008162 <USBH_LL_GetSpeed+0x3e>
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <USBH_LL_GetSpeed+0x2c>
 800814a:	2b01      	cmp	r3, #1
 800814c:	d003      	beq.n	8008156 <USBH_LL_GetSpeed+0x32>
 800814e:	e008      	b.n	8008162 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008150:	2300      	movs	r3, #0
 8008152:	73fb      	strb	r3, [r7, #15]
    break;
 8008154:	e008      	b.n	8008168 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008156:	2301      	movs	r3, #1
 8008158:	73fb      	strb	r3, [r7, #15]
    break;
 800815a:	e005      	b.n	8008168 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800815c:	2302      	movs	r3, #2
 800815e:	73fb      	strb	r3, [r7, #15]
    break;
 8008160:	e002      	b.n	8008168 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008162:	2301      	movs	r3, #1
 8008164:	73fb      	strb	r3, [r7, #15]
    break;
 8008166:	bf00      	nop
  }
  return  speed;
 8008168:	7bfb      	ldrb	r3, [r7, #15]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b084      	sub	sp, #16
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008188:	4618      	mov	r0, r3
 800818a:	f7f9 fe04 	bl	8001d96 <HAL_HCD_ResetPort>
 800818e:	4603      	mov	r3, r0
 8008190:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008192:	7bfb      	ldrb	r3, [r7, #15]
 8008194:	4618      	mov	r0, r3
 8008196:	f000 f8ff 	bl	8008398 <USBH_Get_USB_Status>
 800819a:	4603      	mov	r3, r0
 800819c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800819e:	7bbb      	ldrb	r3, [r7, #14]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	460b      	mov	r3, r1
 80081b2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081ba:	78fa      	ldrb	r2, [r7, #3]
 80081bc:	4611      	mov	r1, r2
 80081be:	4618      	mov	r0, r3
 80081c0:	f7f9 fe0b 	bl	8001dda <HAL_HCD_HC_GetXferCount>
 80081c4:	4603      	mov	r3, r0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80081ce:	b590      	push	{r4, r7, lr}
 80081d0:	b089      	sub	sp, #36	; 0x24
 80081d2:	af04      	add	r7, sp, #16
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	4608      	mov	r0, r1
 80081d8:	4611      	mov	r1, r2
 80081da:	461a      	mov	r2, r3
 80081dc:	4603      	mov	r3, r0
 80081de:	70fb      	strb	r3, [r7, #3]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70bb      	strb	r3, [r7, #2]
 80081e4:	4613      	mov	r3, r2
 80081e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081ec:	2300      	movs	r3, #0
 80081ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80081f6:	787c      	ldrb	r4, [r7, #1]
 80081f8:	78ba      	ldrb	r2, [r7, #2]
 80081fa:	78f9      	ldrb	r1, [r7, #3]
 80081fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081fe:	9302      	str	r3, [sp, #8]
 8008200:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008204:	9301      	str	r3, [sp, #4]
 8008206:	f897 3020 	ldrb.w	r3, [r7, #32]
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	4623      	mov	r3, r4
 800820e:	f7f9 fa6e 	bl	80016ee <HAL_HCD_HC_Init>
 8008212:	4603      	mov	r3, r0
 8008214:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008216:	7bfb      	ldrb	r3, [r7, #15]
 8008218:	4618      	mov	r0, r3
 800821a:	f000 f8bd 	bl	8008398 <USBH_Get_USB_Status>
 800821e:	4603      	mov	r3, r0
 8008220:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008222:	7bbb      	ldrb	r3, [r7, #14]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	bd90      	pop	{r4, r7, pc}

0800822c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	460b      	mov	r3, r1
 8008236:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008246:	78fa      	ldrb	r2, [r7, #3]
 8008248:	4611      	mov	r1, r2
 800824a:	4618      	mov	r0, r3
 800824c:	f7f9 fade 	bl	800180c <HAL_HCD_HC_Halt>
 8008250:	4603      	mov	r3, r0
 8008252:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008254:	7bfb      	ldrb	r3, [r7, #15]
 8008256:	4618      	mov	r0, r3
 8008258:	f000 f89e 	bl	8008398 <USBH_Get_USB_Status>
 800825c:	4603      	mov	r3, r0
 800825e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008260:	7bbb      	ldrb	r3, [r7, #14]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800826a:	b590      	push	{r4, r7, lr}
 800826c:	b089      	sub	sp, #36	; 0x24
 800826e:	af04      	add	r7, sp, #16
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	4608      	mov	r0, r1
 8008274:	4611      	mov	r1, r2
 8008276:	461a      	mov	r2, r3
 8008278:	4603      	mov	r3, r0
 800827a:	70fb      	strb	r3, [r7, #3]
 800827c:	460b      	mov	r3, r1
 800827e:	70bb      	strb	r3, [r7, #2]
 8008280:	4613      	mov	r3, r2
 8008282:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008292:	787c      	ldrb	r4, [r7, #1]
 8008294:	78ba      	ldrb	r2, [r7, #2]
 8008296:	78f9      	ldrb	r1, [r7, #3]
 8008298:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800829c:	9303      	str	r3, [sp, #12]
 800829e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082a0:	9302      	str	r3, [sp, #8]
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	9301      	str	r3, [sp, #4]
 80082a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	4623      	mov	r3, r4
 80082ae:	f7f9 fad1 	bl	8001854 <HAL_HCD_HC_SubmitRequest>
 80082b2:	4603      	mov	r3, r0
 80082b4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 f86d 	bl	8008398 <USBH_Get_USB_Status>
 80082be:	4603      	mov	r3, r0
 80082c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd90      	pop	{r4, r7, pc}

080082cc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	460b      	mov	r3, r1
 80082d6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082de:	78fa      	ldrb	r2, [r7, #3]
 80082e0:	4611      	mov	r1, r2
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7f9 fd65 	bl	8001db2 <HAL_HCD_HC_GetURBState>
 80082e8:	4603      	mov	r3, r0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b082      	sub	sp, #8
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	460b      	mov	r3, r1
 80082fc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008304:	2b01      	cmp	r3, #1
 8008306:	d103      	bne.n	8008310 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008308:	78fb      	ldrb	r3, [r7, #3]
 800830a:	4618      	mov	r0, r3
 800830c:	f000 f870 	bl	80083f0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008310:	20c8      	movs	r0, #200	; 0xc8
 8008312:	f7f8 fe85 	bl	8001020 <HAL_Delay>
  return USBH_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	460b      	mov	r3, r1
 800832a:	70fb      	strb	r3, [r7, #3]
 800832c:	4613      	mov	r3, r2
 800832e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008336:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008338:	78fb      	ldrb	r3, [r7, #3]
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	212c      	movs	r1, #44	; 0x2c
 800833e:	fb01 f303 	mul.w	r3, r1, r3
 8008342:	4413      	add	r3, r2
 8008344:	333b      	adds	r3, #59	; 0x3b
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d009      	beq.n	8008360 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800834c:	78fb      	ldrb	r3, [r7, #3]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	212c      	movs	r1, #44	; 0x2c
 8008352:	fb01 f303 	mul.w	r3, r1, r3
 8008356:	4413      	add	r3, r2
 8008358:	3354      	adds	r3, #84	; 0x54
 800835a:	78ba      	ldrb	r2, [r7, #2]
 800835c:	701a      	strb	r2, [r3, #0]
 800835e:	e008      	b.n	8008372 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008360:	78fb      	ldrb	r3, [r7, #3]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	212c      	movs	r1, #44	; 0x2c
 8008366:	fb01 f303 	mul.w	r3, r1, r3
 800836a:	4413      	add	r3, r2
 800836c:	3355      	adds	r3, #85	; 0x55
 800836e:	78ba      	ldrb	r2, [r7, #2]
 8008370:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7f8 fe49 	bl	8001020 <HAL_Delay>
}
 800838e:	bf00      	nop
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
	...

08008398 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	4603      	mov	r3, r0
 80083a0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	2b03      	cmp	r3, #3
 80083aa:	d817      	bhi.n	80083dc <USBH_Get_USB_Status+0x44>
 80083ac:	a201      	add	r2, pc, #4	; (adr r2, 80083b4 <USBH_Get_USB_Status+0x1c>)
 80083ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b2:	bf00      	nop
 80083b4:	080083c5 	.word	0x080083c5
 80083b8:	080083cb 	.word	0x080083cb
 80083bc:	080083d1 	.word	0x080083d1
 80083c0:	080083d7 	.word	0x080083d7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	73fb      	strb	r3, [r7, #15]
    break;
 80083c8:	e00b      	b.n	80083e2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80083ca:	2302      	movs	r3, #2
 80083cc:	73fb      	strb	r3, [r7, #15]
    break;
 80083ce:	e008      	b.n	80083e2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80083d0:	2301      	movs	r3, #1
 80083d2:	73fb      	strb	r3, [r7, #15]
    break;
 80083d4:	e005      	b.n	80083e2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80083d6:	2302      	movs	r3, #2
 80083d8:	73fb      	strb	r3, [r7, #15]
    break;
 80083da:	e002      	b.n	80083e2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80083dc:	2302      	movs	r3, #2
 80083de:	73fb      	strb	r3, [r7, #15]
    break;
 80083e0:	bf00      	nop
  }
  return usb_status;
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80083fa:	79fb      	ldrb	r3, [r7, #7]
 80083fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80083fe:	79fb      	ldrb	r3, [r7, #7]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d102      	bne.n	800840a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008404:	2300      	movs	r3, #0
 8008406:	73fb      	strb	r3, [r7, #15]
 8008408:	e001      	b.n	800840e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800840a:	2301      	movs	r3, #1
 800840c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800840e:	7bfb      	ldrb	r3, [r7, #15]
 8008410:	461a      	mov	r2, r3
 8008412:	2101      	movs	r1, #1
 8008414:	4803      	ldr	r0, [pc, #12]	; (8008424 <MX_DriverVbusFS+0x34>)
 8008416:	f7f9 f8d5 	bl	80015c4 <HAL_GPIO_WritePin>
}
 800841a:	bf00      	nop
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	40020800 	.word	0x40020800

08008428 <malloc>:
 8008428:	4b02      	ldr	r3, [pc, #8]	; (8008434 <malloc+0xc>)
 800842a:	4601      	mov	r1, r0
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	f000 b82b 	b.w	8008488 <_malloc_r>
 8008432:	bf00      	nop
 8008434:	20000078 	.word	0x20000078

08008438 <free>:
 8008438:	4b02      	ldr	r3, [pc, #8]	; (8008444 <free+0xc>)
 800843a:	4601      	mov	r1, r0
 800843c:	6818      	ldr	r0, [r3, #0]
 800843e:	f000 b8f3 	b.w	8008628 <_free_r>
 8008442:	bf00      	nop
 8008444:	20000078 	.word	0x20000078

08008448 <sbrk_aligned>:
 8008448:	b570      	push	{r4, r5, r6, lr}
 800844a:	4e0e      	ldr	r6, [pc, #56]	; (8008484 <sbrk_aligned+0x3c>)
 800844c:	460c      	mov	r4, r1
 800844e:	6831      	ldr	r1, [r6, #0]
 8008450:	4605      	mov	r5, r0
 8008452:	b911      	cbnz	r1, 800845a <sbrk_aligned+0x12>
 8008454:	f000 f8ac 	bl	80085b0 <_sbrk_r>
 8008458:	6030      	str	r0, [r6, #0]
 800845a:	4621      	mov	r1, r4
 800845c:	4628      	mov	r0, r5
 800845e:	f000 f8a7 	bl	80085b0 <_sbrk_r>
 8008462:	1c43      	adds	r3, r0, #1
 8008464:	d00a      	beq.n	800847c <sbrk_aligned+0x34>
 8008466:	1cc4      	adds	r4, r0, #3
 8008468:	f024 0403 	bic.w	r4, r4, #3
 800846c:	42a0      	cmp	r0, r4
 800846e:	d007      	beq.n	8008480 <sbrk_aligned+0x38>
 8008470:	1a21      	subs	r1, r4, r0
 8008472:	4628      	mov	r0, r5
 8008474:	f000 f89c 	bl	80085b0 <_sbrk_r>
 8008478:	3001      	adds	r0, #1
 800847a:	d101      	bne.n	8008480 <sbrk_aligned+0x38>
 800847c:	f04f 34ff 	mov.w	r4, #4294967295
 8008480:	4620      	mov	r0, r4
 8008482:	bd70      	pop	{r4, r5, r6, pc}
 8008484:	200008f4 	.word	0x200008f4

08008488 <_malloc_r>:
 8008488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800848c:	1ccd      	adds	r5, r1, #3
 800848e:	f025 0503 	bic.w	r5, r5, #3
 8008492:	3508      	adds	r5, #8
 8008494:	2d0c      	cmp	r5, #12
 8008496:	bf38      	it	cc
 8008498:	250c      	movcc	r5, #12
 800849a:	2d00      	cmp	r5, #0
 800849c:	4607      	mov	r7, r0
 800849e:	db01      	blt.n	80084a4 <_malloc_r+0x1c>
 80084a0:	42a9      	cmp	r1, r5
 80084a2:	d905      	bls.n	80084b0 <_malloc_r+0x28>
 80084a4:	230c      	movs	r3, #12
 80084a6:	603b      	str	r3, [r7, #0]
 80084a8:	2600      	movs	r6, #0
 80084aa:	4630      	mov	r0, r6
 80084ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008584 <_malloc_r+0xfc>
 80084b4:	f000 f868 	bl	8008588 <__malloc_lock>
 80084b8:	f8d8 3000 	ldr.w	r3, [r8]
 80084bc:	461c      	mov	r4, r3
 80084be:	bb5c      	cbnz	r4, 8008518 <_malloc_r+0x90>
 80084c0:	4629      	mov	r1, r5
 80084c2:	4638      	mov	r0, r7
 80084c4:	f7ff ffc0 	bl	8008448 <sbrk_aligned>
 80084c8:	1c43      	adds	r3, r0, #1
 80084ca:	4604      	mov	r4, r0
 80084cc:	d155      	bne.n	800857a <_malloc_r+0xf2>
 80084ce:	f8d8 4000 	ldr.w	r4, [r8]
 80084d2:	4626      	mov	r6, r4
 80084d4:	2e00      	cmp	r6, #0
 80084d6:	d145      	bne.n	8008564 <_malloc_r+0xdc>
 80084d8:	2c00      	cmp	r4, #0
 80084da:	d048      	beq.n	800856e <_malloc_r+0xe6>
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	4631      	mov	r1, r6
 80084e0:	4638      	mov	r0, r7
 80084e2:	eb04 0903 	add.w	r9, r4, r3
 80084e6:	f000 f863 	bl	80085b0 <_sbrk_r>
 80084ea:	4581      	cmp	r9, r0
 80084ec:	d13f      	bne.n	800856e <_malloc_r+0xe6>
 80084ee:	6821      	ldr	r1, [r4, #0]
 80084f0:	1a6d      	subs	r5, r5, r1
 80084f2:	4629      	mov	r1, r5
 80084f4:	4638      	mov	r0, r7
 80084f6:	f7ff ffa7 	bl	8008448 <sbrk_aligned>
 80084fa:	3001      	adds	r0, #1
 80084fc:	d037      	beq.n	800856e <_malloc_r+0xe6>
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	442b      	add	r3, r5
 8008502:	6023      	str	r3, [r4, #0]
 8008504:	f8d8 3000 	ldr.w	r3, [r8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d038      	beq.n	800857e <_malloc_r+0xf6>
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	42a2      	cmp	r2, r4
 8008510:	d12b      	bne.n	800856a <_malloc_r+0xe2>
 8008512:	2200      	movs	r2, #0
 8008514:	605a      	str	r2, [r3, #4]
 8008516:	e00f      	b.n	8008538 <_malloc_r+0xb0>
 8008518:	6822      	ldr	r2, [r4, #0]
 800851a:	1b52      	subs	r2, r2, r5
 800851c:	d41f      	bmi.n	800855e <_malloc_r+0xd6>
 800851e:	2a0b      	cmp	r2, #11
 8008520:	d917      	bls.n	8008552 <_malloc_r+0xca>
 8008522:	1961      	adds	r1, r4, r5
 8008524:	42a3      	cmp	r3, r4
 8008526:	6025      	str	r5, [r4, #0]
 8008528:	bf18      	it	ne
 800852a:	6059      	strne	r1, [r3, #4]
 800852c:	6863      	ldr	r3, [r4, #4]
 800852e:	bf08      	it	eq
 8008530:	f8c8 1000 	streq.w	r1, [r8]
 8008534:	5162      	str	r2, [r4, r5]
 8008536:	604b      	str	r3, [r1, #4]
 8008538:	4638      	mov	r0, r7
 800853a:	f104 060b 	add.w	r6, r4, #11
 800853e:	f000 f829 	bl	8008594 <__malloc_unlock>
 8008542:	f026 0607 	bic.w	r6, r6, #7
 8008546:	1d23      	adds	r3, r4, #4
 8008548:	1af2      	subs	r2, r6, r3
 800854a:	d0ae      	beq.n	80084aa <_malloc_r+0x22>
 800854c:	1b9b      	subs	r3, r3, r6
 800854e:	50a3      	str	r3, [r4, r2]
 8008550:	e7ab      	b.n	80084aa <_malloc_r+0x22>
 8008552:	42a3      	cmp	r3, r4
 8008554:	6862      	ldr	r2, [r4, #4]
 8008556:	d1dd      	bne.n	8008514 <_malloc_r+0x8c>
 8008558:	f8c8 2000 	str.w	r2, [r8]
 800855c:	e7ec      	b.n	8008538 <_malloc_r+0xb0>
 800855e:	4623      	mov	r3, r4
 8008560:	6864      	ldr	r4, [r4, #4]
 8008562:	e7ac      	b.n	80084be <_malloc_r+0x36>
 8008564:	4634      	mov	r4, r6
 8008566:	6876      	ldr	r6, [r6, #4]
 8008568:	e7b4      	b.n	80084d4 <_malloc_r+0x4c>
 800856a:	4613      	mov	r3, r2
 800856c:	e7cc      	b.n	8008508 <_malloc_r+0x80>
 800856e:	230c      	movs	r3, #12
 8008570:	603b      	str	r3, [r7, #0]
 8008572:	4638      	mov	r0, r7
 8008574:	f000 f80e 	bl	8008594 <__malloc_unlock>
 8008578:	e797      	b.n	80084aa <_malloc_r+0x22>
 800857a:	6025      	str	r5, [r4, #0]
 800857c:	e7dc      	b.n	8008538 <_malloc_r+0xb0>
 800857e:	605b      	str	r3, [r3, #4]
 8008580:	deff      	udf	#255	; 0xff
 8008582:	bf00      	nop
 8008584:	200008f0 	.word	0x200008f0

08008588 <__malloc_lock>:
 8008588:	4801      	ldr	r0, [pc, #4]	; (8008590 <__malloc_lock+0x8>)
 800858a:	f000 b84b 	b.w	8008624 <__retarget_lock_acquire_recursive>
 800858e:	bf00      	nop
 8008590:	20000a34 	.word	0x20000a34

08008594 <__malloc_unlock>:
 8008594:	4801      	ldr	r0, [pc, #4]	; (800859c <__malloc_unlock+0x8>)
 8008596:	f000 b846 	b.w	8008626 <__retarget_lock_release_recursive>
 800859a:	bf00      	nop
 800859c:	20000a34 	.word	0x20000a34

080085a0 <memset>:
 80085a0:	4402      	add	r2, r0
 80085a2:	4603      	mov	r3, r0
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d100      	bne.n	80085aa <memset+0xa>
 80085a8:	4770      	bx	lr
 80085aa:	f803 1b01 	strb.w	r1, [r3], #1
 80085ae:	e7f9      	b.n	80085a4 <memset+0x4>

080085b0 <_sbrk_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	4d06      	ldr	r5, [pc, #24]	; (80085cc <_sbrk_r+0x1c>)
 80085b4:	2300      	movs	r3, #0
 80085b6:	4604      	mov	r4, r0
 80085b8:	4608      	mov	r0, r1
 80085ba:	602b      	str	r3, [r5, #0]
 80085bc:	f7f8 fc4c 	bl	8000e58 <_sbrk>
 80085c0:	1c43      	adds	r3, r0, #1
 80085c2:	d102      	bne.n	80085ca <_sbrk_r+0x1a>
 80085c4:	682b      	ldr	r3, [r5, #0]
 80085c6:	b103      	cbz	r3, 80085ca <_sbrk_r+0x1a>
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	bd38      	pop	{r3, r4, r5, pc}
 80085cc:	20000a30 	.word	0x20000a30

080085d0 <__errno>:
 80085d0:	4b01      	ldr	r3, [pc, #4]	; (80085d8 <__errno+0x8>)
 80085d2:	6818      	ldr	r0, [r3, #0]
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	20000078 	.word	0x20000078

080085dc <__libc_init_array>:
 80085dc:	b570      	push	{r4, r5, r6, lr}
 80085de:	4d0d      	ldr	r5, [pc, #52]	; (8008614 <__libc_init_array+0x38>)
 80085e0:	4c0d      	ldr	r4, [pc, #52]	; (8008618 <__libc_init_array+0x3c>)
 80085e2:	1b64      	subs	r4, r4, r5
 80085e4:	10a4      	asrs	r4, r4, #2
 80085e6:	2600      	movs	r6, #0
 80085e8:	42a6      	cmp	r6, r4
 80085ea:	d109      	bne.n	8008600 <__libc_init_array+0x24>
 80085ec:	4d0b      	ldr	r5, [pc, #44]	; (800861c <__libc_init_array+0x40>)
 80085ee:	4c0c      	ldr	r4, [pc, #48]	; (8008620 <__libc_init_array+0x44>)
 80085f0:	f000 f866 	bl	80086c0 <_init>
 80085f4:	1b64      	subs	r4, r4, r5
 80085f6:	10a4      	asrs	r4, r4, #2
 80085f8:	2600      	movs	r6, #0
 80085fa:	42a6      	cmp	r6, r4
 80085fc:	d105      	bne.n	800860a <__libc_init_array+0x2e>
 80085fe:	bd70      	pop	{r4, r5, r6, pc}
 8008600:	f855 3b04 	ldr.w	r3, [r5], #4
 8008604:	4798      	blx	r3
 8008606:	3601      	adds	r6, #1
 8008608:	e7ee      	b.n	80085e8 <__libc_init_array+0xc>
 800860a:	f855 3b04 	ldr.w	r3, [r5], #4
 800860e:	4798      	blx	r3
 8008610:	3601      	adds	r6, #1
 8008612:	e7f2      	b.n	80085fa <__libc_init_array+0x1e>
 8008614:	080086fc 	.word	0x080086fc
 8008618:	080086fc 	.word	0x080086fc
 800861c:	080086fc 	.word	0x080086fc
 8008620:	08008700 	.word	0x08008700

08008624 <__retarget_lock_acquire_recursive>:
 8008624:	4770      	bx	lr

08008626 <__retarget_lock_release_recursive>:
 8008626:	4770      	bx	lr

08008628 <_free_r>:
 8008628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800862a:	2900      	cmp	r1, #0
 800862c:	d044      	beq.n	80086b8 <_free_r+0x90>
 800862e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008632:	9001      	str	r0, [sp, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	f1a1 0404 	sub.w	r4, r1, #4
 800863a:	bfb8      	it	lt
 800863c:	18e4      	addlt	r4, r4, r3
 800863e:	f7ff ffa3 	bl	8008588 <__malloc_lock>
 8008642:	4a1e      	ldr	r2, [pc, #120]	; (80086bc <_free_r+0x94>)
 8008644:	9801      	ldr	r0, [sp, #4]
 8008646:	6813      	ldr	r3, [r2, #0]
 8008648:	b933      	cbnz	r3, 8008658 <_free_r+0x30>
 800864a:	6063      	str	r3, [r4, #4]
 800864c:	6014      	str	r4, [r2, #0]
 800864e:	b003      	add	sp, #12
 8008650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008654:	f7ff bf9e 	b.w	8008594 <__malloc_unlock>
 8008658:	42a3      	cmp	r3, r4
 800865a:	d908      	bls.n	800866e <_free_r+0x46>
 800865c:	6825      	ldr	r5, [r4, #0]
 800865e:	1961      	adds	r1, r4, r5
 8008660:	428b      	cmp	r3, r1
 8008662:	bf01      	itttt	eq
 8008664:	6819      	ldreq	r1, [r3, #0]
 8008666:	685b      	ldreq	r3, [r3, #4]
 8008668:	1949      	addeq	r1, r1, r5
 800866a:	6021      	streq	r1, [r4, #0]
 800866c:	e7ed      	b.n	800864a <_free_r+0x22>
 800866e:	461a      	mov	r2, r3
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	b10b      	cbz	r3, 8008678 <_free_r+0x50>
 8008674:	42a3      	cmp	r3, r4
 8008676:	d9fa      	bls.n	800866e <_free_r+0x46>
 8008678:	6811      	ldr	r1, [r2, #0]
 800867a:	1855      	adds	r5, r2, r1
 800867c:	42a5      	cmp	r5, r4
 800867e:	d10b      	bne.n	8008698 <_free_r+0x70>
 8008680:	6824      	ldr	r4, [r4, #0]
 8008682:	4421      	add	r1, r4
 8008684:	1854      	adds	r4, r2, r1
 8008686:	42a3      	cmp	r3, r4
 8008688:	6011      	str	r1, [r2, #0]
 800868a:	d1e0      	bne.n	800864e <_free_r+0x26>
 800868c:	681c      	ldr	r4, [r3, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	6053      	str	r3, [r2, #4]
 8008692:	440c      	add	r4, r1
 8008694:	6014      	str	r4, [r2, #0]
 8008696:	e7da      	b.n	800864e <_free_r+0x26>
 8008698:	d902      	bls.n	80086a0 <_free_r+0x78>
 800869a:	230c      	movs	r3, #12
 800869c:	6003      	str	r3, [r0, #0]
 800869e:	e7d6      	b.n	800864e <_free_r+0x26>
 80086a0:	6825      	ldr	r5, [r4, #0]
 80086a2:	1961      	adds	r1, r4, r5
 80086a4:	428b      	cmp	r3, r1
 80086a6:	bf04      	itt	eq
 80086a8:	6819      	ldreq	r1, [r3, #0]
 80086aa:	685b      	ldreq	r3, [r3, #4]
 80086ac:	6063      	str	r3, [r4, #4]
 80086ae:	bf04      	itt	eq
 80086b0:	1949      	addeq	r1, r1, r5
 80086b2:	6021      	streq	r1, [r4, #0]
 80086b4:	6054      	str	r4, [r2, #4]
 80086b6:	e7ca      	b.n	800864e <_free_r+0x26>
 80086b8:	b003      	add	sp, #12
 80086ba:	bd30      	pop	{r4, r5, pc}
 80086bc:	200008f0 	.word	0x200008f0

080086c0 <_init>:
 80086c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c2:	bf00      	nop
 80086c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c6:	bc08      	pop	{r3}
 80086c8:	469e      	mov	lr, r3
 80086ca:	4770      	bx	lr

080086cc <_fini>:
 80086cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ce:	bf00      	nop
 80086d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086d2:	bc08      	pop	{r3}
 80086d4:	469e      	mov	lr, r3
 80086d6:	4770      	bx	lr
